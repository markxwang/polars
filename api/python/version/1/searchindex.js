Search.setIndex({"alltitles": {"ABS": [[1266, "abs"]], "ACOS": [[1269, "acos"]], "ACOSD": [[1269, "acosd"]], "ARRAY_AGG": [[1263, "array-agg"]], "ARRAY_CONTAINS": [[1263, "array-contains"]], "ARRAY_GET": [[1263, "array-get"]], "ARRAY_LENGTH": [[1263, "array-length"]], "ARRAY_LOWER": [[1263, "array-lower"]], "ARRAY_MEAN": [[1263, "array-mean"]], "ARRAY_REVERSE": [[1263, "array-reverse"]], "ARRAY_SUM": [[1263, "array-sum"]], "ARRAY_TO_STRING": [[1263, "array-to-string"]], "ARRAY_UNIQUE": [[1263, "array-unique"]], "ARRAY_UPPER": [[1263, "array-upper"]], "ASIN": [[1269, "asin"]], "ASIND": [[1269, "asind"]], "ATAN": [[1269, "atan"]], "ATAN2": [[1269, "atan2"]], "ATAN2D": [[1269, "atan2d"]], "ATAND": [[1269, "atand"]], "AVG": [[1262, "avg"]], "Aggregate": [[1262, "aggregate"]], "Aggregation": [[169, "aggregation"], [317, "aggregation"], [789, "aggregation"], [892, "aggregation"]], "Aliases": [[1262, null], [1262, null], [1266, null], [1266, null], [1267, null], [1267, null]], "Array": [[767, "array"], [1238, "array"], [1263, "array"]], "Asserts": [[1275, "asserts"]], "Attributes": [[305, "attributes"], [881, "attributes"], [1239, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[788, "avro"]], "BIT_LENGTH": [[1267, "bit-length"]], "Binary": [[768, "binary"], [781, "binary"], [1240, "binary"]], "Boolean": [[769, "boolean"], [1241, "boolean"]], "CAST": [[1270, "cast"]], "CBRT": [[1266, "cbrt"]], "CEIL": [[1266, "ceil"]], "COALESCE": [[1264, "coalesce"]], "CONCAT": [[1267, "concat"]], "CONCAT_WS": [[1267, "concat-ws"]], "COS": [[1269, "cos"]], "COSD": [[1269, "cosd"]], "COT": [[1269, "cot"]], "COTD": [[1269, "cotd"]], "COUNT": [[1262, "count"]], "CREATE TABLE": [[1274, "create-table"]], "CSV": [[788, "csv"]], "Categories": [[770, "categories"], [1242, "categories"]], "Clipboard": [[788, "clipboard"]], "Columns / names": [[772, "columns-names"]], "Comparison": [[781, "comparison"]], "Computation": [[306, "computation"], [773, "computation"], [1243, "computation"]], "Conditional": [[1264, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[781, "conjunction"]], "Conversion": [[786, "conversion"]], "DATE": [[1267, "date"]], "DATE_PART": [[1268, "date-part"]], "DEGREES": [[1269, "degrees"]], "DISTINCT": [[1261, "distinct"]], "DIV": [[1266, "div"]], "DROP TABLES": [[1274, "drop-tables"]], "Data types": [[315, "data-types"]], "DataFrame": [[310, "dataframe"]], "DataType": [[315, "datatype"]], "Database": [[788, "database"]], "Delta Lake": [[788, "delta-lake"]], "Descriptive": [[307, "descriptive"], [882, "descriptive"], [1244, "descriptive"]], "Documentation": [[1272, null], [1272, null], [1272, null]], "ENDS_WITH": [[1267, "ends-with"]], "EXCEPT": [[1273, "except"]], "EXP": [[1266, "exp"]], "EXPLAIN": [[1274, "explain"]], "EXTRACT": [[1268, "extract"]], "Errors": [[316, "errors"]], "Examples": [[1, "examples"], [891, "examples"], [1275, "examples"]], "Excel / ODS": [[788, "excel-ods"]], "Exceptions": [[316, "exceptions"]], "Export": [[308, "export"], [1245, "export"]], "Expression SQL": [[1272, "expression-sql"]], "Expressions": [[775, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1262, "first"]], "FLOOR": [[1266, "floor"]], "FROM": [[1261, "from"]], "Feather / IPC": [[788, "feather-ipc"]], "Frame SQL": [[1272, "frame-sql"]], "Functions": [[774, "functions"], [786, "functions"], [891, "functions"]], "GREATEST": [[1264, "greatest"]], "GROUP BY": [[1261, "group-by"]], "Global SQL": [[1272, "global-sql"]], "GroupBy": [[309, "groupby"], [883, "groupby"]], "HAVING": [[1261, "having"]], "IF": [[1264, "if"]], "IFNULL": [[1264, "ifnull"]], "INITCAP": [[1267, "initcap"]], "INTERSECT": [[1273, "intersect"]], "Iceberg": [[788, "iceberg"]], "Importing": [[891, "importing"]], "InProcessQuery": [[884, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[788, "input-output"]], "Introduction": [[1272, "introduction"]], "JOIN": [[1261, "join"]], "JSON": [[788, "json"]], "LAST": [[1262, "last"]], "LEAST": [[1264, "least"]], "LEFT": [[1267, "left"]], "LENGTH": [[1267, "length"]], "LIMIT": [[1261, "limit"]], "LN": [[1266, "ln"]], "LOG": [[1266, "log"]], "LOG10": [[1266, "log10"]], "LOG1P": [[1266, "log1p"]], "LOG2": [[1266, "log2"]], "LOWER": [[1267, "lower"]], "LTRIM": [[1267, "ltrim"]], "LazyFrame": [[885, "lazyframe"]], "List": [[776, "list"], [1247, "list"]], "MAX": [[1262, "max"]], "MEDIAN": [[1262, "median"]], "MIN": [[1262, "min"]], "MOD": [[1266, "mod"]], "Manipulation/selection": [[312, "manipulation-selection"], [779, "manipulation-selection"], [887, "manipulation-selection"], [1249, "manipulation-selection"]], "Math": [[1266, "math"]], "Meta": [[777, "meta"]], "Metadata": [[888, "metadata"]], "Methods": [[1272, "methods"]], "Miscellaneous": [[311, "miscellaneous"], [778, "miscellaneous"], [786, "miscellaneous"], [886, "miscellaneous"], [1248, "miscellaneous"]], "NULLIF": [[1264, "nullif"]], "Name": [[780, "name"]], "Nested": [[315, "nested"]], "Numeric": [[315, "numeric"], [781, "numeric"]], "OCTET_LENGTH": [[1267, "octet-length"]], "OFFSET": [[1261, "offset"]], "ORDER BY": [[1261, "order-by"]], "Operators": [[781, "operators"]], "Other": [[315, "other"]], "PI": [[1266, "pi"]], "POW": [[1266, "pow"]], "Panic": [[316, "panic"]], "Parallelization": [[786, "parallelization"]], "Parametric testing": [[1275, "parametric-testing"]], "Parquet": [[788, "parquet"]], "Plot": [[313, "plot"], [1250, "plot"]], "Plugins": [[889, "plugins"]], "Polars strategies": [[1275, "polars-strategies"]], "Profiles": [[1275, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[788, "pyarrow-datasets"]], "Python API": [[1272, "python-api"]], "Python API reference": [[787, "python-api-reference"]], "Querying": [[1272, "querying"]], "RADIANS": [[1269, "radians"]], "REGEXP_LIKE": [[1267, "regexp-like"]], "REPLACE": [[1267, "replace"]], "REVERSE": [[1267, "reverse"]], "RIGHT": [[1267, "right"]], "ROUND": [[1266, "round"]], "RTRIM": [[1267, "rtrim"]], "Random": [[786, "random"]], "SELECT": [[1261, "select"]], "SHOW TABLES": [[1274, "show-tables"]], "SIGN": [[1266, "sign"]], "SIN": [[1269, "sin"]], "SIND": [[1269, "sind"]], "SQL Clauses": [[1261, "sql-clauses"]], "SQL Functions": [[1265, "sql-functions"]], "SQL Interface": [[1271, "sql-interface"]], "SQLContext": [[1272, "sqlcontext"]], "SQRT": [[1266, "sqrt"]], "STARTS_WITH": [[1267, "starts-with"]], "STDDEV": [[1262, "stddev"]], "STRFTIME": [[1268, "strftime"]], "STRPOS": [[1267, "strpos"]], "STRPTIME": [[1267, "strptime"]], "SUBSTRING": [[1267, "substring"]], "SUM": [[1262, "sum"]], "Schema": [[890, "schema"]], "Selectors": [[891, "selectors"]], "Serialization": [[311, "serialization"], [886, "serialization"]], "Series": [[1246, "series"]], "Set Operations": [[1273, "set-operations"]], "Set operations": [[891, "set-operations"]], "Strategy helpers": [[1275, "strategy-helpers"]], "String": [[315, "string"], [782, "string"], [1251, "string"], [1267, "string"]], "StringCache": [[786, "stringcache"]], "Struct": [[783, "struct"], [1252, "struct"]], "Style": [[314, "style"]], "TAN": [[1269, "tan"]], "TAND": [[1269, "tand"]], "TIMESTAMP": [[1267, "timestamp"]], "TRUNCATE": [[1274, "truncate"]], "TRY_CAST": [[1270, "try-cast"]], "Table Operations": [[1274, "table-operations"]], "Temporal": [[315, "temporal"], [784, "temporal"], [1253, "temporal"], [1268, "temporal"]], "Testing": [[1275, "testing"]], "Trigonometry": [[1269, "trigonometry"]], "Types": [[1270, "types"]], "UNION": [[1273, "union"]], "UNION ALL": [[1273, "union-all"]], "UNION BY NAME": [[1273, "union-by-name"]], "UNNEST": [[1263, "unnest"], [1274, "unnest"]], "UPPER": [[1267, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1262, "variance"]], "WHERE": [[1261, "where"]], "Warnings": [[316, "warnings"]], "Window": [[785, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__arrow_c_stream__": [[170, "polars-dataframe-arrow-c-stream"]], "polars.DataFrame.__dataframe__": [[171, "polars-dataframe-dataframe"]], "polars.DataFrame.approx_n_unique": [[172, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[173, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[174, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[175, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[176, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[177, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[178, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[179, "polars-dataframe-corr"]], "polars.DataFrame.count": [[180, "polars-dataframe-count"]], "polars.DataFrame.describe": [[181, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[182, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[183, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[184, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[185, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[186, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[187, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[188, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[189, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[190, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[191, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[192, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[193, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[194, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[195, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[196, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[197, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[198, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[199, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[200, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[201, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[202, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[203, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[204, "polars-dataframe-head"]], "polars.DataFrame.height": [[205, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[206, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[207, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[208, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[209, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[210, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[211, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[212, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[213, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[214, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[215, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[216, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[217, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[218, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[219, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[220, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[221, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[222, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[223, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[224, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[225, "polars-dataframe-median"]], "polars.DataFrame.melt": [[226, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[227, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[228, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[229, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[230, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[231, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[232, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[233, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[234, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[235, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[236, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[237, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[238, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[239, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[240, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[241, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[242, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[243, "polars-dataframe-row"]], "polars.DataFrame.rows": [[244, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[245, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[246, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[247, "polars-dataframe-schema"]], "polars.DataFrame.select": [[248, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[249, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[250, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[251, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[252, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[253, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[254, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[255, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[256, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[257, "polars-dataframe-sql"]], "polars.DataFrame.std": [[258, "polars-dataframe-std"]], "polars.DataFrame.sum": [[259, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[260, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[261, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[262, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[263, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[264, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[265, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[266, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[267, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[268, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[269, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[270, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[271, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[272, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[273, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[274, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[275, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[276, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[277, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[278, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[279, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[280, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[281, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[282, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[283, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[284, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[285, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[286, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[287, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[318, "polars-expr-abs"]], "polars.Expr.add": [[319, "polars-expr-add"]], "polars.Expr.agg_groups": [[320, "polars-expr-agg-groups"]], "polars.Expr.alias": [[321, "polars-expr-alias"]], "polars.Expr.all": [[322, "polars-expr-all"]], "polars.Expr.and_": [[323, "polars-expr-and"]], "polars.Expr.any": [[324, "polars-expr-any"]], "polars.Expr.append": [[325, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[326, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[327, "polars-expr-arccos"]], "polars.Expr.arccosh": [[328, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[329, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[330, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[331, "polars-expr-arctan"]], "polars.Expr.arctanh": [[332, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[333, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[334, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[335, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[336, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[337, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[338, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[339, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[340, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[341, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[342, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[343, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[344, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[345, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[346, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[347, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[348, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[349, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[350, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[351, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[352, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[353, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[354, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[355, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[356, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[357, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[358, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[359, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[360, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[361, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[362, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[363, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[364, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[365, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[366, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[367, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[368, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[369, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[370, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[371, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[372, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[373, "polars-expr-cbrt"]], "polars.Expr.ceil": [[374, "polars-expr-ceil"]], "polars.Expr.clip": [[375, "polars-expr-clip"]], "polars.Expr.cos": [[376, "polars-expr-cos"]], "polars.Expr.cosh": [[377, "polars-expr-cosh"]], "polars.Expr.cot": [[378, "polars-expr-cot"]], "polars.Expr.count": [[379, "polars-expr-count"]], "polars.Expr.cum_count": [[380, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[381, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[382, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[383, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[384, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[385, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[386, "polars-expr-cut"]], "polars.Expr.degrees": [[387, "polars-expr-degrees"]], "polars.Expr.deserialize": [[388, "polars-expr-deserialize"]], "polars.Expr.diff": [[389, "polars-expr-diff"]], "polars.Expr.dot": [[390, "polars-expr-dot"]], "polars.Expr.drop_nans": [[391, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[392, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[393, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[394, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[395, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[396, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[397, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[398, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[399, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[400, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[401, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[402, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[403, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[404, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[405, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[406, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[407, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[408, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[409, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[410, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[411, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[412, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[413, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[414, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[415, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[416, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[417, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[418, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[419, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[420, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[421, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[422, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[423, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[424, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[425, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[426, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[427, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[428, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[429, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[430, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[431, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[432, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[433, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[434, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[435, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[436, "polars-expr-dt-year"]], "polars.Expr.entropy": [[437, "polars-expr-entropy"]], "polars.Expr.eq": [[438, "polars-expr-eq"]], "polars.Expr.eq_missing": [[439, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[440, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[441, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[442, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[443, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[444, "polars-expr-exclude"]], "polars.Expr.exp": [[445, "polars-expr-exp"]], "polars.Expr.explode": [[446, "polars-expr-explode"]], "polars.Expr.extend_constant": [[447, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[448, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[449, "polars-expr-fill-null"]], "polars.Expr.filter": [[450, "polars-expr-filter"]], "polars.Expr.first": [[451, "polars-expr-first"]], "polars.Expr.flatten": [[452, "polars-expr-flatten"]], "polars.Expr.floor": [[453, "polars-expr-floor"]], "polars.Expr.floordiv": [[454, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[455, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[456, "polars-expr-from-json"]], "polars.Expr.gather": [[457, "polars-expr-gather"]], "polars.Expr.gather_every": [[458, "polars-expr-gather-every"]], "polars.Expr.ge": [[459, "polars-expr-ge"]], "polars.Expr.get": [[460, "polars-expr-get"]], "polars.Expr.gt": [[461, "polars-expr-gt"]], "polars.Expr.has_nulls": [[462, "polars-expr-has-nulls"]], "polars.Expr.hash": [[463, "polars-expr-hash"]], "polars.Expr.head": [[464, "polars-expr-head"]], "polars.Expr.hist": [[465, "polars-expr-hist"]], "polars.Expr.implode": [[466, "polars-expr-implode"]], "polars.Expr.inspect": [[467, "polars-expr-inspect"]], "polars.Expr.interpolate": [[468, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[469, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[470, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[471, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[472, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[473, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[474, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[475, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[476, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[477, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[478, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[479, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[480, "polars-expr-is-null"]], "polars.Expr.is_unique": [[481, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[482, "polars-expr-kurtosis"]], "polars.Expr.last": [[483, "polars-expr-last"]], "polars.Expr.le": [[484, "polars-expr-le"]], "polars.Expr.len": [[485, "polars-expr-len"]], "polars.Expr.limit": [[486, "polars-expr-limit"]], "polars.Expr.list.all": [[487, "polars-expr-list-all"]], "polars.Expr.list.any": [[488, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[489, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[490, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[491, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[492, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[493, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[494, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[495, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[496, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[497, "polars-expr-list-explode"]], "polars.Expr.list.first": [[498, "polars-expr-list-first"]], "polars.Expr.list.gather": [[499, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[500, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[501, "polars-expr-list-get"]], "polars.Expr.list.head": [[502, "polars-expr-list-head"]], "polars.Expr.list.join": [[503, "polars-expr-list-join"]], "polars.Expr.list.last": [[504, "polars-expr-list-last"]], "polars.Expr.list.len": [[505, "polars-expr-list-len"]], "polars.Expr.list.max": [[506, "polars-expr-list-max"]], "polars.Expr.list.mean": [[507, "polars-expr-list-mean"]], "polars.Expr.list.median": [[508, "polars-expr-list-median"]], "polars.Expr.list.min": [[509, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[510, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[511, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[512, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[513, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[514, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[515, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[516, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[517, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[518, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[519, "polars-expr-list-sort"]], "polars.Expr.list.std": [[520, "polars-expr-list-std"]], "polars.Expr.list.sum": [[521, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[522, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[523, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[524, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[525, "polars-expr-list-unique"]], "polars.Expr.list.var": [[526, "polars-expr-list-var"]], "polars.Expr.log": [[527, "polars-expr-log"]], "polars.Expr.log10": [[528, "polars-expr-log10"]], "polars.Expr.log1p": [[529, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[530, "polars-expr-lower-bound"]], "polars.Expr.lt": [[531, "polars-expr-lt"]], "polars.Expr.map_batches": [[532, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[533, "polars-expr-map-elements"]], "polars.Expr.max": [[534, "polars-expr-max"]], "polars.Expr.mean": [[535, "polars-expr-mean"]], "polars.Expr.median": [[536, "polars-expr-median"]], "polars.Expr.meta.eq": [[537, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[538, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[539, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[540, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[541, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[542, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[543, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[544, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[545, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[546, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[547, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[548, "polars-expr-meta-write-json"]], "polars.Expr.min": [[549, "polars-expr-min"]], "polars.Expr.mod": [[550, "polars-expr-mod"]], "polars.Expr.mode": [[551, "polars-expr-mode"]], "polars.Expr.mul": [[552, "polars-expr-mul"]], "polars.Expr.n_unique": [[553, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[554, "polars-expr-name-keep"]], "polars.Expr.name.map": [[555, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[556, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[557, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[558, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[559, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[560, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[561, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[562, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[563, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[564, "polars-expr-nan-min"]], "polars.Expr.ne": [[565, "polars-expr-ne"]], "polars.Expr.ne_missing": [[566, "polars-expr-ne-missing"]], "polars.Expr.neg": [[567, "polars-expr-neg"]], "polars.Expr.not_": [[568, "polars-expr-not"]], "polars.Expr.null_count": [[569, "polars-expr-null-count"]], "polars.Expr.or_": [[570, "polars-expr-or"]], "polars.Expr.over": [[571, "polars-expr-over"]], "polars.Expr.pct_change": [[572, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[573, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[574, "polars-expr-peak-min"]], "polars.Expr.pipe": [[575, "polars-expr-pipe"]], "polars.Expr.pow": [[576, "polars-expr-pow"]], "polars.Expr.product": [[577, "polars-expr-product"]], "polars.Expr.qcut": [[578, "polars-expr-qcut"]], "polars.Expr.quantile": [[579, "polars-expr-quantile"]], "polars.Expr.radians": [[580, "polars-expr-radians"]], "polars.Expr.rank": [[581, "polars-expr-rank"]], "polars.Expr.rechunk": [[582, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[583, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[584, "polars-expr-repeat-by"]], "polars.Expr.replace": [[585, "polars-expr-replace"]], "polars.Expr.replace_strict": [[586, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[587, "polars-expr-reshape"]], "polars.Expr.reverse": [[588, "polars-expr-reverse"]], "polars.Expr.rle": [[589, "polars-expr-rle"]], "polars.Expr.rle_id": [[590, "polars-expr-rle-id"]], "polars.Expr.rolling": [[591, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[592, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[593, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[594, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[595, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[596, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[597, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[598, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[599, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[600, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[601, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[602, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[603, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[604, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[605, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[606, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[607, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[608, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[609, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[610, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[611, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[612, "polars-expr-sample"]], "polars.Expr.search_sorted": [[613, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[614, "polars-expr-set-sorted"]], "polars.Expr.shift": [[615, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[616, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[617, "polars-expr-shuffle"]], "polars.Expr.sign": [[618, "polars-expr-sign"]], "polars.Expr.sin": [[619, "polars-expr-sin"]], "polars.Expr.sinh": [[620, "polars-expr-sinh"]], "polars.Expr.skew": [[621, "polars-expr-skew"]], "polars.Expr.slice": [[622, "polars-expr-slice"]], "polars.Expr.sort": [[623, "polars-expr-sort"]], "polars.Expr.sort_by": [[624, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[625, "polars-expr-sqrt"]], "polars.Expr.std": [[626, "polars-expr-std"]], "polars.Expr.str.concat": [[627, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[628, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[629, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[630, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[631, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[632, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[633, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[634, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[635, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[636, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[637, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[638, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[639, "polars-expr-str-find"]], "polars.Expr.str.head": [[640, "polars-expr-str-head"]], "polars.Expr.str.join": [[641, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[642, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[643, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[644, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[645, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[646, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[647, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[648, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[649, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[650, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[651, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[652, "polars-expr-str-slice"]], "polars.Expr.str.split": [[653, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[654, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[655, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[656, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[657, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[658, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[659, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[660, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[661, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[662, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[663, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[664, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[665, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[666, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[667, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[668, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[669, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[670, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[671, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[672, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[673, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[674, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[675, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[676, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[677, "polars-expr-sub"]], "polars.Expr.sum": [[678, "polars-expr-sum"]], "polars.Expr.tail": [[679, "polars-expr-tail"]], "polars.Expr.tan": [[680, "polars-expr-tan"]], "polars.Expr.tanh": [[681, "polars-expr-tanh"]], "polars.Expr.to_physical": [[682, "polars-expr-to-physical"]], "polars.Expr.top_k": [[683, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[684, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[685, "polars-expr-truediv"]], "polars.Expr.unique": [[686, "polars-expr-unique"]], "polars.Expr.unique_counts": [[687, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[688, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[689, "polars-expr-value-counts"]], "polars.Expr.var": [[690, "polars-expr-var"]], "polars.Expr.where": [[691, "polars-expr-where"]], "polars.Expr.xor": [[692, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[790, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[791, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[792, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[793, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[794, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[795, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[796, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[797, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[798, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[799, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[800, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[801, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[802, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[803, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[804, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[805, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[806, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[807, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[808, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[809, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[810, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[811, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[812, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[813, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[814, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[815, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[816, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[817, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[818, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[819, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[820, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[821, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[822, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[823, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[824, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[825, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[826, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[827, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[828, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[829, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[830, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[831, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[832, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[833, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[834, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[835, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[836, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[837, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[838, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[839, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[840, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[841, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[842, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[843, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[844, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[845, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[846, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[847, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[848, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[849, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[850, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[851, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[852, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[853, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[854, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[855, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[856, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[857, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[858, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[859, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[860, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[861, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1254, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1255, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1256, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1257, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1258, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1259, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1260, "polars-sqlcontext-unregister"]], "polars.Series.__arrow_c_stream__": [[893, "polars-series-arrow-c-stream"]], "polars.Series.abs": [[894, "polars-series-abs"]], "polars.Series.alias": [[895, "polars-series-alias"]], "polars.Series.all": [[896, "polars-series-all"]], "polars.Series.any": [[897, "polars-series-any"]], "polars.Series.append": [[898, "polars-series-append"]], "polars.Series.arccos": [[899, "polars-series-arccos"]], "polars.Series.arccosh": [[900, "polars-series-arccosh"]], "polars.Series.arcsin": [[901, "polars-series-arcsin"]], "polars.Series.arcsinh": [[902, "polars-series-arcsinh"]], "polars.Series.arctan": [[903, "polars-series-arctan"]], "polars.Series.arctanh": [[904, "polars-series-arctanh"]], "polars.Series.arg_max": [[905, "polars-series-arg-max"]], "polars.Series.arg_min": [[906, "polars-series-arg-min"]], "polars.Series.arg_sort": [[907, "polars-series-arg-sort"]], "polars.Series.arg_true": [[908, "polars-series-arg-true"]], "polars.Series.arg_unique": [[909, "polars-series-arg-unique"]], "polars.Series.arr.all": [[910, "polars-series-arr-all"]], "polars.Series.arr.any": [[911, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[912, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[913, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[914, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[915, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[916, "polars-series-arr-explode"]], "polars.Series.arr.first": [[917, "polars-series-arr-first"]], "polars.Series.arr.get": [[918, "polars-series-arr-get"]], "polars.Series.arr.join": [[919, "polars-series-arr-join"]], "polars.Series.arr.last": [[920, "polars-series-arr-last"]], "polars.Series.arr.max": [[921, "polars-series-arr-max"]], "polars.Series.arr.median": [[922, "polars-series-arr-median"]], "polars.Series.arr.min": [[923, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[924, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[925, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[926, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[927, "polars-series-arr-sort"]], "polars.Series.arr.std": [[928, "polars-series-arr-std"]], "polars.Series.arr.sum": [[929, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[930, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[931, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[932, "polars-series-arr-unique"]], "polars.Series.arr.var": [[933, "polars-series-arr-var"]], "polars.Series.bin.contains": [[934, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[935, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[936, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[937, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[938, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[939, "polars-series-bin-starts-with"]], "polars.Series.bottom_k": [[940, "polars-series-bottom-k"]], "polars.Series.cast": [[941, "polars-series-cast"]], "polars.Series.cat.get_categories": [[942, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[943, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[944, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[945, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[946, "polars-series-cbrt"]], "polars.Series.ceil": [[947, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[948, "polars-series-chunk-lengths"]], "polars.Series.clear": [[949, "polars-series-clear"]], "polars.Series.clip": [[950, "polars-series-clip"]], "polars.Series.clone": [[951, "polars-series-clone"]], "polars.Series.cos": [[952, "polars-series-cos"]], "polars.Series.cosh": [[953, "polars-series-cosh"]], "polars.Series.cot": [[954, "polars-series-cot"]], "polars.Series.cum_count": [[955, "polars-series-cum-count"]], "polars.Series.cum_max": [[956, "polars-series-cum-max"]], "polars.Series.cum_min": [[957, "polars-series-cum-min"]], "polars.Series.cum_prod": [[958, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[959, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[960, "polars-series-cumulative-eval"]], "polars.Series.cut": [[961, "polars-series-cut"]], "polars.Series.describe": [[962, "polars-series-describe"]], "polars.Series.diff": [[963, "polars-series-diff"]], "polars.Series.dot": [[964, "polars-series-dot"]], "polars.Series.drop_nans": [[965, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[966, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[967, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[968, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[969, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[970, "polars-series-dt-century"]], "polars.Series.dt.combine": [[971, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[972, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[973, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[974, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[975, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[976, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[977, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[978, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[979, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[980, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[981, "polars-series-dt-max"]], "polars.Series.dt.mean": [[982, "polars-series-dt-mean"]], "polars.Series.dt.median": [[983, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[984, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[985, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[986, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[987, "polars-series-dt-min"]], "polars.Series.dt.minute": [[988, "polars-series-dt-minute"]], "polars.Series.dt.month": [[989, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[990, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[991, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[992, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[993, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[994, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[995, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[996, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[997, "polars-series-dt-round"]], "polars.Series.dt.second": [[998, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[999, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[1000, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[1001, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1002, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1003, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1004, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1005, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1006, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1007, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1008, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1009, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1010, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1011, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1012, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1013, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1014, "polars-series-dt-year"]], "polars.Series.dtype": [[1015, "polars-series-dtype"]], "polars.Series.entropy": [[1016, "polars-series-entropy"]], "polars.Series.equals": [[1017, "polars-series-equals"]], "polars.Series.estimated_size": [[1018, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1019, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1020, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1021, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1022, "polars-series-ewm-var"]], "polars.Series.exp": [[1023, "polars-series-exp"]], "polars.Series.explode": [[1024, "polars-series-explode"]], "polars.Series.extend": [[1025, "polars-series-extend"]], "polars.Series.extend_constant": [[1026, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1027, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1028, "polars-series-fill-null"]], "polars.Series.filter": [[1029, "polars-series-filter"]], "polars.Series.flags": [[1030, "polars-series-flags"]], "polars.Series.floor": [[1031, "polars-series-floor"]], "polars.Series.gather": [[1032, "polars-series-gather"]], "polars.Series.gather_every": [[1033, "polars-series-gather-every"]], "polars.Series.get_chunks": [[1034, "polars-series-get-chunks"]], "polars.Series.has_nulls": [[1035, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1036, "polars-series-has-validity"]], "polars.Series.hash": [[1037, "polars-series-hash"]], "polars.Series.head": [[1038, "polars-series-head"]], "polars.Series.hist": [[1039, "polars-series-hist"]], "polars.Series.implode": [[1040, "polars-series-implode"]], "polars.Series.interpolate": [[1041, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1042, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1043, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1044, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1045, "polars-series-is-empty"]], "polars.Series.is_finite": [[1046, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1047, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1048, "polars-series-is-in"]], "polars.Series.is_infinite": [[1049, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1050, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1051, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1052, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1053, "polars-series-is-not-null"]], "polars.Series.is_null": [[1054, "polars-series-is-null"]], "polars.Series.is_sorted": [[1055, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1056, "polars-series-is-unique"]], "polars.Series.item": [[1057, "polars-series-item"]], "polars.Series.kurtosis": [[1058, "polars-series-kurtosis"]], "polars.Series.len": [[1059, "polars-series-len"]], "polars.Series.limit": [[1060, "polars-series-limit"]], "polars.Series.list.all": [[1061, "polars-series-list-all"]], "polars.Series.list.any": [[1062, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1063, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1064, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1065, "polars-series-list-concat"]], "polars.Series.list.contains": [[1066, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1067, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1068, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1069, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1070, "polars-series-list-eval"]], "polars.Series.list.explode": [[1071, "polars-series-list-explode"]], "polars.Series.list.first": [[1072, "polars-series-list-first"]], "polars.Series.list.gather": [[1073, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1074, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1075, "polars-series-list-get"]], "polars.Series.list.head": [[1076, "polars-series-list-head"]], "polars.Series.list.join": [[1077, "polars-series-list-join"]], "polars.Series.list.last": [[1078, "polars-series-list-last"]], "polars.Series.list.len": [[1079, "polars-series-list-len"]], "polars.Series.list.max": [[1080, "polars-series-list-max"]], "polars.Series.list.mean": [[1081, "polars-series-list-mean"]], "polars.Series.list.median": [[1082, "polars-series-list-median"]], "polars.Series.list.min": [[1083, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1084, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1085, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1086, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1087, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1088, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1089, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1090, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1091, "polars-series-list-shift"]], "polars.Series.list.slice": [[1092, "polars-series-list-slice"]], "polars.Series.list.sort": [[1093, "polars-series-list-sort"]], "polars.Series.list.std": [[1094, "polars-series-list-std"]], "polars.Series.list.sum": [[1095, "polars-series-list-sum"]], "polars.Series.list.tail": [[1096, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1097, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1098, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1099, "polars-series-list-unique"]], "polars.Series.list.var": [[1100, "polars-series-list-var"]], "polars.Series.log": [[1101, "polars-series-log"]], "polars.Series.log10": [[1102, "polars-series-log10"]], "polars.Series.log1p": [[1103, "polars-series-log1p"]], "polars.Series.lower_bound": [[1104, "polars-series-lower-bound"]], "polars.Series.map_elements": [[1105, "polars-series-map-elements"]], "polars.Series.max": [[1106, "polars-series-max"]], "polars.Series.mean": [[1107, "polars-series-mean"]], "polars.Series.median": [[1108, "polars-series-median"]], "polars.Series.min": [[1109, "polars-series-min"]], "polars.Series.mode": [[1110, "polars-series-mode"]], "polars.Series.n_chunks": [[1111, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1112, "polars-series-n-unique"]], "polars.Series.name": [[1113, "polars-series-name"]], "polars.Series.nan_max": [[1114, "polars-series-nan-max"]], "polars.Series.nan_min": [[1115, "polars-series-nan-min"]], "polars.Series.new_from_index": [[1116, "polars-series-new-from-index"]], "polars.Series.not_": [[1117, "polars-series-not"]], "polars.Series.null_count": [[1118, "polars-series-null-count"]], "polars.Series.pct_change": [[1119, "polars-series-pct-change"]], "polars.Series.peak_max": [[1120, "polars-series-peak-max"]], "polars.Series.peak_min": [[1121, "polars-series-peak-min"]], "polars.Series.product": [[1122, "polars-series-product"]], "polars.Series.qcut": [[1123, "polars-series-qcut"]], "polars.Series.quantile": [[1124, "polars-series-quantile"]], "polars.Series.rank": [[1125, "polars-series-rank"]], "polars.Series.rechunk": [[1126, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1127, "polars-series-reinterpret"]], "polars.Series.rename": [[1128, "polars-series-rename"]], "polars.Series.replace": [[1129, "polars-series-replace"]], "polars.Series.replace_strict": [[1130, "polars-series-replace-strict"]], "polars.Series.reshape": [[1131, "polars-series-reshape"]], "polars.Series.reverse": [[1132, "polars-series-reverse"]], "polars.Series.rle": [[1133, "polars-series-rle"]], "polars.Series.rle_id": [[1134, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1135, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1136, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1137, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1138, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1139, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1140, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1141, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1142, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1143, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1144, "polars-series-rolling-var"]], "polars.Series.round": [[1145, "polars-series-round"]], "polars.Series.round_sig_figs": [[1146, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1147, "polars-series-sample"]], "polars.Series.scatter": [[1148, "polars-series-scatter"]], "polars.Series.search_sorted": [[1149, "polars-series-search-sorted"]], "polars.Series.set": [[1150, "polars-series-set"]], "polars.Series.set_sorted": [[1151, "polars-series-set-sorted"]], "polars.Series.shape": [[1152, "polars-series-shape"]], "polars.Series.shift": [[1153, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1154, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1155, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1156, "polars-series-shuffle"]], "polars.Series.sign": [[1157, "polars-series-sign"]], "polars.Series.sin": [[1158, "polars-series-sin"]], "polars.Series.sinh": [[1159, "polars-series-sinh"]], "polars.Series.skew": [[1160, "polars-series-skew"]], "polars.Series.slice": [[1161, "polars-series-slice"]], "polars.Series.sort": [[1162, "polars-series-sort"]], "polars.Series.sqrt": [[1163, "polars-series-sqrt"]], "polars.Series.std": [[1164, "polars-series-std"]], "polars.Series.str.concat": [[1165, "polars-series-str-concat"]], "polars.Series.str.contains": [[1166, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1167, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1168, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1169, "polars-series-str-decode"]], "polars.Series.str.encode": [[1170, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1171, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1172, "polars-series-str-explode"]], "polars.Series.str.extract": [[1173, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1174, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1175, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1176, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1177, "polars-series-str-find"]], "polars.Series.str.head": [[1178, "polars-series-str-head"]], "polars.Series.str.join": [[1179, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1180, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1181, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1182, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1183, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1184, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1185, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1186, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1187, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1188, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1189, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1190, "polars-series-str-slice"]], "polars.Series.str.split": [[1191, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1192, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1193, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1194, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1195, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1196, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1197, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1198, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1199, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1200, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1201, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1202, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1203, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1204, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1205, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1206, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1207, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1208, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1209, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1210, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1211, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1212, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1213, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1214, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1215, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1216, "polars-series-struct-unnest"]], "polars.Series.sum": [[1217, "polars-series-sum"]], "polars.Series.tail": [[1218, "polars-series-tail"]], "polars.Series.tan": [[1219, "polars-series-tan"]], "polars.Series.tanh": [[1220, "polars-series-tanh"]], "polars.Series.to_arrow": [[1221, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1222, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1223, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1224, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1225, "polars-series-to-jax"]], "polars.Series.to_list": [[1226, "polars-series-to-list"]], "polars.Series.to_numpy": [[1227, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1228, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1229, "polars-series-to-physical"]], "polars.Series.to_torch": [[1230, "polars-series-to-torch"]], "polars.Series.top_k": [[1231, "polars-series-top-k"]], "polars.Series.unique": [[1232, "polars-series-unique"]], "polars.Series.unique_counts": [[1233, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1234, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1235, "polars-series-value-counts"]], "polars.Series.var": [[1236, "polars-series-var"]], "polars.Series.zip_with": [[1237, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[693, "polars-all"]], "polars.all_horizontal": [[694, "polars-all-horizontal"]], "polars.any": [[695, "polars-any"]], "polars.any_horizontal": [[696, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[697, "polars-approx-n-unique"]], "polars.arange": [[698, "polars-arange"]], "polars.arctan2": [[699, "polars-arctan2"]], "polars.arctan2d": [[700, "polars-arctan2d"]], "polars.arg_sort_by": [[701, "polars-arg-sort-by"]], "polars.arg_where": [[702, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[703, "polars-business-day-count"]], "polars.coalesce": [[704, "polars-coalesce"]], "polars.col": [[771, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[705, "polars-concat-list"]], "polars.concat_str": [[706, "polars-concat-str"]], "polars.corr": [[707, "polars-corr"]], "polars.count": [[708, "polars-count"]], "polars.cov": [[709, "polars-cov"]], "polars.cum_count": [[710, "polars-cum-count"]], "polars.cum_fold": [[711, "polars-cum-fold"]], "polars.cum_reduce": [[712, "polars-cum-reduce"]], "polars.cum_sum": [[713, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[714, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[288, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[289, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[290, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[291, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[292, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[293, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[294, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[295, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[296, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[297, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[298, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[299, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[300, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[301, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[302, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[303, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[304, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[715, "polars-date"]], "polars.date_range": [[716, "polars-date-range"]], "polars.date_ranges": [[717, "polars-date-ranges"]], "polars.datetime": [[718, "polars-datetime"]], "polars.datetime_range": [[719, "polars-datetime-range"]], "polars.datetime_ranges": [[720, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[721, "polars-duration"]], "polars.element": [[722, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[723, "polars-exclude"]], "polars.first": [[724, "polars-first"]], "polars.fold": [[725, "polars-fold"]], "polars.format": [[726, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[727, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[728, "polars-groups"]], "polars.head": [[729, "polars-head"]], "polars.implode": [[730, "polars-implode"]], "polars.int_range": [[731, "polars-int-range"]], "polars.int_ranges": [[732, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[733, "polars-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[862, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[863, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[864, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[865, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[866, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[867, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[868, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[869, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[870, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[871, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[872, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[873, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[874, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[875, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[876, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[877, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[878, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[879, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[880, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[734, "polars-len"]], "polars.lit": [[735, "polars-lit"]], "polars.map_batches": [[736, "polars-map-batches"]], "polars.map_groups": [[737, "polars-map-groups"]], "polars.max": [[738, "polars-max"]], "polars.max_horizontal": [[739, "polars-max-horizontal"]], "polars.mean": [[740, "polars-mean"]], "polars.mean_horizontal": [[741, "polars-mean-horizontal"]], "polars.median": [[742, "polars-median"]], "polars.min": [[743, "polars-min"]], "polars.min_horizontal": [[744, "polars-min-horizontal"]], "polars.n_unique": [[745, "polars-n-unique"]], "polars.nth": [[746, "polars-nth"]], "polars.ones": [[747, "polars-ones"]], "polars.quantile": [[748, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[749, "polars-reduce"]], "polars.repeat": [[750, "polars-repeat"]], "polars.rolling_corr": [[751, "polars-rolling-corr"]], "polars.rolling_cov": [[752, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[753, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[754, "polars-sql"]], "polars.sql_expr": [[755, "polars-sql-expr"]], "polars.std": [[756, "polars-std"]], "polars.struct": [[757, "polars-struct"]], "polars.sum": [[758, "polars-sum"]], "polars.sum_horizontal": [[759, "polars-sum-horizontal"]], "polars.tail": [[760, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[761, "polars-time"]], "polars.time_range": [[762, "polars-time-range"]], "polars.time_ranges": [[763, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[764, "polars-var"]], "polars.when": [[765, "polars-when"]], "polars.zeros": [[766, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__arrow_c_stream__() (polars.dataframe method)": [[170, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[893, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[171, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1272, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1272, "polars.SQLContext.__exit__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.sqlcontext method)": [[1272, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[318, "polars.Expr.abs", false]], "abs() (polars.series method)": [[894, "polars.Series.abs", false]], "add() (polars.expr method)": [[319, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[393, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[967, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[320, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[321, "polars.Expr.alias", false]], "alias() (polars.series method)": [[895, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[693, "polars.all", false]], "all() (in module polars.selectors)": [[891, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[322, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[338, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[487, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[896, "polars.Series.all", false]], "all() (polars.series.arr method)": [[910, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1061, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[694, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[891, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[891, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[323, "polars.Expr.and_", false]], "any() (in module polars)": [[695, "polars.any", false]], "any() (polars.expr method)": [[324, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[339, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[488, "polars.Expr.list.any", false]], "any() (polars.series method)": [[897, "polars.Series.any", false]], "any() (polars.series.arr method)": [[911, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1062, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[696, "polars.any_horizontal", false]], "append() (polars.expr method)": [[325, "polars.Expr.append", false]], "append() (polars.series method)": [[898, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[697, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[172, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[326, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[790, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[698, "polars.arange", false]], "arccos() (polars.expr method)": [[327, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[899, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[328, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[900, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[329, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[901, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[330, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[902, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[331, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[903, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[699, "polars.arctan2", false]], "arctan2d() (in module polars)": [[700, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[332, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[904, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[333, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[340, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[489, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[905, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[912, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1063, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[334, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[341, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[490, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[906, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[913, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1064, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[335, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[907, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[701, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[336, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[908, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[337, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[909, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[702, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[362, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[394, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[968, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[891, "polars.selectors.binary", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[891, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[173, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[369, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[791, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[940, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[370, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[703, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[891, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[891, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[891, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[792, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[878, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[174, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[371, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[793, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[941, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[395, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[969, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[891, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[373, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[946, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[374, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[947, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[396, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[970, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[948, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[175, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[794, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[949, "polars.Series.clear", false]], "clip() (polars.expr method)": [[375, "polars.Expr.clip", false]], "clip() (polars.series method)": [[950, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[176, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[795, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[951, "polars.Series.clone", false]], "coalesce() (in module polars)": [[704, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[796, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[797, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[177, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[798, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[178, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[799, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[397, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[971, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[491, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[627, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1065, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1165, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[705, "polars.concat_list", false]], "concat_str() (in module polars)": [[706, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[891, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[342, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[363, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[492, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[628, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[914, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[934, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1066, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1166, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[629, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1167, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[398, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[972, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[707, "polars.corr", false]], "corr() (polars.dataframe method)": [[179, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[376, "polars.Expr.cos", false]], "cos() (polars.series method)": [[952, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[377, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[953, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[378, "polars.Expr.cot", false]], "cot() (polars.series method)": [[954, "polars.Series.cot", false]], "count() (in module polars)": [[708, "polars.count", false]], "count() (polars.dataframe method)": [[180, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[379, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[800, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count_matches() (polars.expr.arr method)": [[343, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[493, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[630, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[915, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1067, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1168, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[709, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[710, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[380, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[955, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[711, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[381, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[956, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[382, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[957, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[383, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[958, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[712, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[713, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[384, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[959, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[714, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[385, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[960, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[386, "polars.Expr.cut", false]], "cut() (polars.series method)": [[961, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[715, "polars.date", false]], "date() (in module polars.selectors)": [[891, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[399, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[973, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[716, "polars.date_range", false]], "date_ranges() (in module polars)": [[717, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[718, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[891, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[400, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[974, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[719, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[720, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[401, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[975, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[891, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[364, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[631, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[935, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1169, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[387, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[181, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[801, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[962, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[182, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[388, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[802, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[389, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[494, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[963, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1068, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[891, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[390, "polars.Expr.dot", false]], "dot() (polars.series method)": [[964, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[183, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[803, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[184, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[391, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[965, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[185, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[392, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[495, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[804, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[966, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1069, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[402, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[976, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1015, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[186, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[805, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[721, "polars.duration", false]], "duration() (in module polars.selectors)": [[891, "polars.selectors.duration", false]], "element() (in module polars)": [[722, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[365, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[632, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[936, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1170, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[891, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[366, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[633, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[937, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1171, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[437, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1016, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[403, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[977, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[438, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[537, "polars.Expr.meta.eq", false]], "eq_missing() (polars.expr method)": [[439, "polars.Expr.eq_missing", false]], "equals() (polars.dataframe method)": [[187, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1017, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[188, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1018, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[496, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1070, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[440, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1019, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[441, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1020, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[442, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1021, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[443, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1022, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[723, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[891, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[444, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1254, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1255, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[445, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1023, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[891, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[806, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[189, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[446, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[344, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[497, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[634, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[807, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1024, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[916, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1071, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1172, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[190, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1025, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[447, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1026, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[635, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1173, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[636, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1174, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[637, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1175, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[638, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1176, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[879, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[880, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[673, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1211, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1212, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[191, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[448, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[808, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1027, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[192, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[449, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[809, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1028, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[193, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[450, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[810, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1029, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[639, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1177, "polars.Series.str.find", false]], "first() (in module polars)": [[724, "polars.first", false]], "first() (in module polars.selectors)": [[891, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[451, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[345, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[498, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[811, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[917, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1072, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[194, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1030, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[452, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[891, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[453, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1031, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[454, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[725, "polars.fold", false]], "fold() (polars.dataframe method)": [[195, "polars.DataFrame.fold", false]], "format() (in module polars)": [[726, "polars.format", false]], "forward_fill() (polars.expr method)": [[455, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[727, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[456, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[457, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[499, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1032, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1073, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[196, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[458, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[500, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[812, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1033, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1074, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[459, "polars.Expr.ge", false]], "get() (polars.expr method)": [[460, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[346, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[501, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[918, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1075, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[372, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[942, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1034, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[197, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[198, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[199, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[200, "polars.DataFrame.glimpse", false]], "group_by() (polars.dataframe method)": [[201, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[813, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[202, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[814, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[728, "polars.groups", false]], "gt() (polars.expr method)": [[461, "polars.Expr.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[538, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[462, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1035, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1036, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[463, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1037, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[203, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[729, "polars.head", false]], "head() (polars.dataframe method)": [[204, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[464, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[502, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[640, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[815, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1038, "polars.Series.head", false]], "head() (polars.series.list method)": [[1076, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1178, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[205, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[465, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1039, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[404, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[978, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[206, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[730, "polars.implode", false]], "implode() (polars.expr method)": [[466, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1040, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[207, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[467, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[816, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[731, "polars.int_range", false]], "int_ranges() (in module polars)": [[732, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[891, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[208, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[468, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[817, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1041, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[469, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1042, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[470, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1043, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[539, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[209, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[471, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1044, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[210, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1045, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[472, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1046, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[473, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1047, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[474, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1048, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[475, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1049, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[476, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1050, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[405, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[979, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[943, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[477, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1051, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[478, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1052, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[479, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1053, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[480, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1054, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[540, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[891, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1055, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[211, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[481, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1056, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[406, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[980, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[212, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1057, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[213, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[214, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[215, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[216, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[347, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[503, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[641, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[818, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[919, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1077, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1179, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[217, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[819, "polars.LazyFrame.join_asof", false]], "json_decode() (polars.expr.str method)": [[642, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1180, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[674, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1213, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[643, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1181, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[554, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[482, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1058, "polars.Series.kurtosis", false]], "last() (in module polars)": [[733, "polars.last", false]], "last() (in module polars.selectors)": [[891, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[483, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[348, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[504, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[820, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[920, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1078, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[218, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[821, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[484, "polars.Expr.le", false]], "len() (in module polars)": [[734, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[485, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[505, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1059, "polars.Series.len", false]], "len() (polars.series.list method)": [[1079, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[644, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1182, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[645, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1183, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[219, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[486, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[822, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1060, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[735, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[527, "polars.Expr.log", false]], "log() (polars.series method)": [[1101, "polars.Series.log", false]], "log10() (polars.expr method)": [[528, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1102, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[529, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1103, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[530, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1104, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[531, "polars.Expr.lt", false]], "map() (polars.expr.name method)": [[555, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[736, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[532, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[823, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[533, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1105, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[556, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[737, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[220, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[891, "polars.selectors.matches", false]], "max() (in module polars)": [[738, "polars.max", false]], "max() (polars.dataframe method)": [[221, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[534, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[349, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[506, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[824, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1106, "polars.Series.max", false]], "max() (polars.series.arr method)": [[921, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[981, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1080, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[739, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[222, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[740, "polars.mean", false]], "mean() (polars.dataframe method)": [[223, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[535, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[507, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[825, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1107, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[982, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1081, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[741, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[224, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[742, "polars.median", false]], "median() (polars.dataframe method)": [[225, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[536, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[350, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[508, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[826, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1108, "polars.Series.median", false]], "median() (polars.series.arr method)": [[922, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[983, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1082, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[226, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[827, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[227, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[828, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[407, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[984, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[408, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[985, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[409, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[986, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[743, "polars.min", false]], "min() (polars.dataframe method)": [[228, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[549, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[351, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[509, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[829, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1109, "polars.Series.min", false]], "min() (polars.series.arr method)": [[923, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[987, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1083, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[744, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[229, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[410, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[988, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[550, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[551, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1110, "polars.Series.mode", false]], "module": [[889, "module-polars.plugins", false], [891, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[411, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[989, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[412, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[990, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[413, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[991, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[552, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[230, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1111, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[745, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[231, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[553, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[352, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[510, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1112, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[924, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1084, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1113, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[563, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1114, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[564, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1115, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[414, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[992, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[565, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[541, "polars.Expr.meta.ne", false]], "ne_missing() (polars.expr method)": [[566, "polars.Expr.ne_missing", false]], "neg() (polars.expr method)": [[567, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1116, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[568, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1117, "polars.Series.not_", false]], "nth() (in module polars)": [[746, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[232, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[569, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[830, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1118, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[891, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[415, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[993, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[747, "polars.ones", false]], "or_() (polars.expr method)": [[570, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[416, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[994, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[542, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[571, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[646, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1184, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[647, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1185, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[233, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[572, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1119, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[573, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1120, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[574, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1121, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[234, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[575, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[831, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[235, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[313, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1250, "polars.Series.plot", false]], "polars.plugins": [[889, "module-polars.plugins", false]], "polars.selectors": [[891, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[543, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[576, "polars.Expr.pow", false]], "prefix() (polars.expr.name method)": [[557, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[558, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[236, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[577, "polars.Expr.product", false]], "product() (polars.series method)": [[1122, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[832, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[578, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1123, "polars.Series.qcut", false]], "quantile() (in module polars)": [[748, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[237, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[579, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[833, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1124, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[417, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[995, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[580, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[581, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1125, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[238, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[582, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1126, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[749, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1256, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1257, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1258, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[889, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[583, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1127, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[239, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[834, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1128, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[675, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1214, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[750, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[584, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[585, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[648, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1129, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1186, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[649, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1187, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[240, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[650, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1188, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[586, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1130, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[418, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[996, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[587, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1131, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[241, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[588, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[353, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[511, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[651, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[835, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1132, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[925, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1085, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1189, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[589, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1133, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[590, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1134, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[242, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[591, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[836, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[751, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[752, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[592, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1135, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[593, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1136, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[594, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[595, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1137, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[596, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[597, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1138, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[598, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[599, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1139, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[600, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[601, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1140, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[602, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[603, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1141, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[604, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1142, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[605, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[606, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1143, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[607, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[608, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1144, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[609, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[544, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[610, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[419, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1145, "polars.Series.round", false]], "round() (polars.series.dt method)": [[997, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[611, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1146, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[243, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[244, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[245, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[246, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[612, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[512, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1147, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1086, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1148, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[247, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[837, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1215, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[613, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1149, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[420, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[998, "polars.Series.dt.second", false]], "select() (in module polars)": [[753, "polars.select", false]], "select() (polars.dataframe method)": [[248, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[838, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[249, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[839, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[250, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[545, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[840, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1150, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[513, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1087, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[514, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1088, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[251, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[614, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[841, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1151, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[515, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1089, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[516, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1090, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[252, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1152, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[253, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[615, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[354, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[517, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[842, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1153, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[926, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1091, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[843, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[616, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1154, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[254, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1155, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[617, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1156, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[618, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1157, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[891, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[619, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1158, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[620, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1159, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[367, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[938, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[621, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1160, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[255, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[622, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[518, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[652, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[844, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1161, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1092, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1190, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[256, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[623, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[355, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[519, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[845, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1162, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[927, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1093, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[624, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[653, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1191, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[654, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1192, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[655, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1193, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[754, "polars.sql", false]], "sql() (polars.dataframe method)": [[257, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[846, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[755, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1272, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[625, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1163, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[891, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[368, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[656, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[939, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1194, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[756, "polars.std", false]], "std() (polars.dataframe method)": [[258, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[626, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[356, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[520, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[847, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1164, "polars.Series.std", false]], "std() (polars.series.arr method)": [[928, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1094, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[421, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[999, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[891, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[657, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1195, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[658, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1196, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[659, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1197, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[660, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1198, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[661, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1199, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[662, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1200, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[757, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[314, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[677, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[559, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[560, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[758, "polars.sum", false]], "sum() (polars.dataframe method)": [[259, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[678, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[357, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[521, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[848, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1217, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[929, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1095, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[759, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[260, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1259, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[760, "polars.tail", false]], "tail() (polars.dataframe method)": [[261, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[679, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[522, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[663, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[849, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1218, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1096, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1201, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[680, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1219, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[681, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1220, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[891, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[761, "polars.time", false]], "time() (in module polars.selectors)": [[891, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[422, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1000, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[762, "polars.time_range", false]], "time_ranges() (in module polars)": [[763, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[423, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1001, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[523, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1097, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[262, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1221, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[664, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1202, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[665, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1203, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[666, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1204, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[263, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[264, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[265, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1222, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1223, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[266, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1224, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[667, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1205, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[267, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1225, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[358, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1226, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[930, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[944, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[561, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[668, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1206, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[268, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1227, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[269, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1228, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[682, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1229, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[270, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[424, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1002, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[271, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[359, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[524, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[931, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1098, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[669, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1207, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[670, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1208, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[272, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1230, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[562, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[671, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1209, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[273, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[683, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[850, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1231, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[684, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1003, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1004, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1005, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1006, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1007, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1008, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[431, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1009, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[274, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[546, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[685, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[432, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1010, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[547, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[275, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[686, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[360, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[525, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[851, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1232, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[932, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1099, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[687, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1233, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[276, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[852, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1216, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[277, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[853, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1260, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[891, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[278, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[279, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[854, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[688, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1234, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[280, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[945, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[689, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1235, "polars.Series.value_counts", false]], "var() (in module polars)": [[764, "polars.var", false]], "var() (polars.dataframe method)": [[281, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[690, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[361, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[526, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[855, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1236, "polars.Series.var", false]], "var() (polars.series.arr method)": [[933, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1100, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[282, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[433, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1011, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[434, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1012, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[765, "polars.when", false]], "where() (polars.expr method)": [[691, "polars.Expr.where", false]], "width (polars.dataframe property)": [[283, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[856, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[284, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[857, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[285, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[858, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[859, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[676, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[286, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[860, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[287, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[861, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[435, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1013, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[548, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[692, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[436, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1014, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[766, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[672, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1210, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1237, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1272, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [693, 4, 1, "", "all"], [694, 4, 1, "", "all_horizontal"], [695, 4, 1, "", "any"], [696, 4, 1, "", "any_horizontal"], [697, 4, 1, "", "approx_n_unique"], [698, 4, 1, "", "arange"], [699, 4, 1, "", "arctan2"], [700, 4, 1, "", "arctan2d"], [701, 4, 1, "", "arg_sort_by"], [702, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [703, 4, 1, "", "business_day_count"], [704, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [705, 4, 1, "", "concat_list"], [706, 4, 1, "", "concat_str"], [707, 4, 1, "", "corr"], [708, 4, 1, "", "count"], [709, 4, 1, "", "cov"], [710, 4, 1, "", "cum_count"], [711, 4, 1, "", "cum_fold"], [712, 4, 1, "", "cum_reduce"], [713, 4, 1, "", "cum_sum"], [714, 4, 1, "", "cum_sum_horizontal"], [715, 4, 1, "", "date"], [716, 4, 1, "", "date_range"], [717, 4, 1, "", "date_ranges"], [718, 4, 1, "", "datetime"], [719, 4, 1, "", "datetime_range"], [720, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [721, 4, 1, "", "duration"], [722, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [723, 4, 1, "", "exclude"], [724, 4, 1, "", "first"], [725, 4, 1, "", "fold"], [726, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [727, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [728, 4, 1, "", "groups"], [729, 4, 1, "", "head"], [730, 4, 1, "", "implode"], [731, 4, 1, "", "int_range"], [732, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [733, 4, 1, "", "last"], [734, 4, 1, "", "len"], [735, 4, 1, "", "lit"], [736, 4, 1, "", "map_batches"], [737, 4, 1, "", "map_groups"], [738, 4, 1, "", "max"], [739, 4, 1, "", "max_horizontal"], [740, 4, 1, "", "mean"], [741, 4, 1, "", "mean_horizontal"], [742, 4, 1, "", "median"], [743, 4, 1, "", "min"], [744, 4, 1, "", "min_horizontal"], [745, 4, 1, "", "n_unique"], [746, 4, 1, "", "nth"], [747, 4, 1, "", "ones"], [889, 6, 0, "-", "plugins"], [748, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [749, 4, 1, "", "reduce"], [750, 4, 1, "", "repeat"], [751, 4, 1, "", "rolling_corr"], [752, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [753, 4, 1, "", "select"], [891, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [754, 4, 1, "", "sql"], [755, 4, 1, "", "sql_expr"], [756, 4, 1, "", "std"], [757, 4, 1, "", "struct"], [758, 4, 1, "", "sum"], [759, 4, 1, "", "sum_horizontal"], [760, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [761, 4, 1, "", "time"], [762, 4, 1, "", "time_range"], [763, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [764, 4, 1, "", "var"], [765, 4, 1, "", "when"], [766, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__arrow_c_stream__"], [171, 0, 1, "", "__dataframe__"], [172, 0, 1, "", "approx_n_unique"], [173, 0, 1, "", "bottom_k"], [174, 0, 1, "", "cast"], [175, 0, 1, "", "clear"], [176, 0, 1, "", "clone"], [177, 0, 1, "", "collect_schema"], [178, 1, 1, "", "columns"], [179, 0, 1, "", "corr"], [180, 0, 1, "", "count"], [181, 0, 1, "", "describe"], [182, 0, 1, "", "deserialize"], [183, 0, 1, "", "drop"], [184, 0, 1, "", "drop_in_place"], [185, 0, 1, "", "drop_nulls"], [186, 1, 1, "", "dtypes"], [187, 0, 1, "", "equals"], [188, 0, 1, "", "estimated_size"], [189, 0, 1, "", "explode"], [190, 0, 1, "", "extend"], [191, 0, 1, "", "fill_nan"], [192, 0, 1, "", "fill_null"], [193, 0, 1, "", "filter"], [194, 1, 1, "", "flags"], [195, 0, 1, "", "fold"], [196, 0, 1, "", "gather_every"], [197, 0, 1, "", "get_column"], [198, 0, 1, "", "get_column_index"], [199, 0, 1, "", "get_columns"], [200, 0, 1, "", "glimpse"], [201, 0, 1, "", "group_by"], [202, 0, 1, "", "group_by_dynamic"], [203, 0, 1, "", "hash_rows"], [204, 0, 1, "", "head"], [205, 1, 1, "", "height"], [206, 0, 1, "", "hstack"], [207, 0, 1, "", "insert_column"], [208, 0, 1, "", "interpolate"], [209, 0, 1, "", "is_duplicated"], [210, 0, 1, "", "is_empty"], [211, 0, 1, "", "is_unique"], [212, 0, 1, "", "item"], [213, 0, 1, "", "iter_columns"], [214, 0, 1, "", "iter_rows"], [215, 0, 1, "", "iter_slices"], [216, 0, 1, "", "join"], [217, 0, 1, "", "join_asof"], [218, 0, 1, "", "lazy"], [219, 0, 1, "", "limit"], [220, 0, 1, "", "map_rows"], [221, 0, 1, "", "max"], [222, 0, 1, "", "max_horizontal"], [223, 0, 1, "", "mean"], [224, 0, 1, "", "mean_horizontal"], [225, 0, 1, "", "median"], [226, 0, 1, "", "melt"], [227, 0, 1, "", "merge_sorted"], [228, 0, 1, "", "min"], [229, 0, 1, "", "min_horizontal"], [230, 0, 1, "", "n_chunks"], [231, 0, 1, "", "n_unique"], [232, 0, 1, "", "null_count"], [233, 0, 1, "", "partition_by"], [234, 0, 1, "", "pipe"], [235, 0, 1, "", "pivot"], [313, 1, 1, "", "plot"], [236, 0, 1, "", "product"], [237, 0, 1, "", "quantile"], [238, 0, 1, "", "rechunk"], [239, 0, 1, "", "rename"], [240, 0, 1, "", "replace_column"], [241, 0, 1, "", "reverse"], [242, 0, 1, "", "rolling"], [243, 0, 1, "", "row"], [244, 0, 1, "", "rows"], [245, 0, 1, "", "rows_by_key"], [246, 0, 1, "", "sample"], [247, 1, 1, "", "schema"], [248, 0, 1, "", "select"], [249, 0, 1, "", "select_seq"], [250, 0, 1, "", "serialize"], [251, 0, 1, "", "set_sorted"], [252, 1, 1, "", "shape"], [253, 0, 1, "", "shift"], [254, 0, 1, "", "shrink_to_fit"], [255, 0, 1, "", "slice"], [256, 0, 1, "", "sort"], [257, 0, 1, "", "sql"], [258, 0, 1, "", "std"], [314, 1, 1, "", "style"], [259, 0, 1, "", "sum"], [260, 0, 1, "", "sum_horizontal"], [261, 0, 1, "", "tail"], [262, 0, 1, "", "to_arrow"], [263, 0, 1, "", "to_dict"], [264, 0, 1, "", "to_dicts"], [265, 0, 1, "", "to_dummies"], [266, 0, 1, "", "to_init_repr"], [267, 0, 1, "", "to_jax"], [268, 0, 1, "", "to_numpy"], [269, 0, 1, "", "to_pandas"], [270, 0, 1, "", "to_series"], [271, 0, 1, "", "to_struct"], [272, 0, 1, "", "to_torch"], [273, 0, 1, "", "top_k"], [274, 0, 1, "", "transpose"], [275, 0, 1, "", "unique"], [276, 0, 1, "", "unnest"], [277, 0, 1, "", "unpivot"], [278, 0, 1, "", "unstack"], [279, 0, 1, "", "update"], [280, 0, 1, "", "upsample"], [281, 0, 1, "", "var"], [282, 0, 1, "", "vstack"], [283, 1, 1, "", "width"], [284, 0, 1, "", "with_columns"], [285, 0, 1, "", "with_columns_seq"], [286, 0, 1, "", "with_row_count"], [287, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[318, 0, 1, "", "abs"], [319, 0, 1, "", "add"], [320, 0, 1, "", "agg_groups"], [321, 0, 1, "", "alias"], [322, 0, 1, "", "all"], [323, 0, 1, "", "and_"], [324, 0, 1, "", "any"], [325, 0, 1, "", "append"], [326, 0, 1, "", "approx_n_unique"], [327, 0, 1, "", "arccos"], [328, 0, 1, "", "arccosh"], [329, 0, 1, "", "arcsin"], [330, 0, 1, "", "arcsinh"], [331, 0, 1, "", "arctan"], [332, 0, 1, "", "arctanh"], [333, 0, 1, "", "arg_max"], [334, 0, 1, "", "arg_min"], [335, 0, 1, "", "arg_sort"], [336, 0, 1, "", "arg_true"], [337, 0, 1, "", "arg_unique"], [362, 0, 1, "", "backward_fill"], [369, 0, 1, "", "bottom_k"], [370, 0, 1, "", "bottom_k_by"], [371, 0, 1, "", "cast"], [373, 0, 1, "", "cbrt"], [374, 0, 1, "", "ceil"], [375, 0, 1, "", "clip"], [376, 0, 1, "", "cos"], [377, 0, 1, "", "cosh"], [378, 0, 1, "", "cot"], [379, 0, 1, "", "count"], [380, 0, 1, "", "cum_count"], [381, 0, 1, "", "cum_max"], [382, 0, 1, "", "cum_min"], [383, 0, 1, "", "cum_prod"], [384, 0, 1, "", "cum_sum"], [385, 0, 1, "", "cumulative_eval"], [386, 0, 1, "", "cut"], [387, 0, 1, "", "degrees"], [388, 0, 1, "", "deserialize"], [389, 0, 1, "", "diff"], [390, 0, 1, "", "dot"], [391, 0, 1, "", "drop_nans"], [392, 0, 1, "", "drop_nulls"], [437, 0, 1, "", "entropy"], [438, 0, 1, "", "eq"], [439, 0, 1, "", "eq_missing"], [440, 0, 1, "", "ewm_mean"], [441, 0, 1, "", "ewm_mean_by"], [442, 0, 1, "", "ewm_std"], [443, 0, 1, "", "ewm_var"], [444, 0, 1, "", "exclude"], [445, 0, 1, "", "exp"], [446, 0, 1, "", "explode"], [447, 0, 1, "", "extend_constant"], [448, 0, 1, "", "fill_nan"], [449, 0, 1, "", "fill_null"], [450, 0, 1, "", "filter"], [451, 0, 1, "", "first"], [452, 0, 1, "", "flatten"], [453, 0, 1, "", "floor"], [454, 0, 1, "", "floordiv"], [455, 0, 1, "", "forward_fill"], [456, 0, 1, "", "from_json"], [457, 0, 1, "", "gather"], [458, 0, 1, "", "gather_every"], [459, 0, 1, "", "ge"], [460, 0, 1, "", "get"], [461, 0, 1, "", "gt"], [462, 0, 1, "", "has_nulls"], [463, 0, 1, "", "hash"], [464, 0, 1, "", "head"], [465, 0, 1, "", "hist"], [466, 0, 1, "", "implode"], [467, 0, 1, "", "inspect"], [468, 0, 1, "", "interpolate"], [469, 0, 1, "", "interpolate_by"], [470, 0, 1, "", "is_between"], [471, 0, 1, "", "is_duplicated"], [472, 0, 1, "", "is_finite"], [473, 0, 1, "", "is_first_distinct"], [474, 0, 1, "", "is_in"], [475, 0, 1, "", "is_infinite"], [476, 0, 1, "", "is_last_distinct"], [477, 0, 1, "", "is_nan"], [478, 0, 1, "", "is_not_nan"], [479, 0, 1, "", "is_not_null"], [480, 0, 1, "", "is_null"], [481, 0, 1, "", "is_unique"], [482, 0, 1, "", "kurtosis"], [483, 0, 1, "", "last"], [484, 0, 1, "", "le"], [485, 0, 1, "", "len"], [486, 0, 1, "", "limit"], [527, 0, 1, "", "log"], [528, 0, 1, "", "log10"], [529, 0, 1, "", "log1p"], [530, 0, 1, "", "lower_bound"], [531, 0, 1, "", "lt"], [532, 0, 1, "", "map_batches"], [533, 0, 1, "", "map_elements"], [534, 0, 1, "", "max"], [535, 0, 1, "", "mean"], [536, 0, 1, "", "median"], [549, 0, 1, "", "min"], [550, 0, 1, "", "mod"], [551, 0, 1, "", "mode"], [552, 0, 1, "", "mul"], [553, 0, 1, "", "n_unique"], [563, 0, 1, "", "nan_max"], [564, 0, 1, "", "nan_min"], [565, 0, 1, "", "ne"], [566, 0, 1, "", "ne_missing"], [567, 0, 1, "", "neg"], [568, 0, 1, "", "not_"], [569, 0, 1, "", "null_count"], [570, 0, 1, "", "or_"], [571, 0, 1, "", "over"], [572, 0, 1, "", "pct_change"], [573, 0, 1, "", "peak_max"], [574, 0, 1, "", "peak_min"], [575, 0, 1, "", "pipe"], [576, 0, 1, "", "pow"], [577, 0, 1, "", "product"], [578, 0, 1, "", "qcut"], [579, 0, 1, "", "quantile"], [580, 0, 1, "", "radians"], [581, 0, 1, "", "rank"], [582, 0, 1, "", "rechunk"], [583, 0, 1, "", "reinterpret"], [584, 0, 1, "", "repeat_by"], [585, 0, 1, "", "replace"], [586, 0, 1, "", "replace_strict"], [587, 0, 1, "", "reshape"], [588, 0, 1, "", "reverse"], [589, 0, 1, "", "rle"], [590, 0, 1, "", "rle_id"], [591, 0, 1, "", "rolling"], [592, 0, 1, "", "rolling_map"], [593, 0, 1, "", "rolling_max"], [594, 0, 1, "", "rolling_max_by"], [595, 0, 1, "", "rolling_mean"], [596, 0, 1, "", "rolling_mean_by"], [597, 0, 1, "", "rolling_median"], [598, 0, 1, "", "rolling_median_by"], [599, 0, 1, "", "rolling_min"], [600, 0, 1, "", "rolling_min_by"], [601, 0, 1, "", "rolling_quantile"], [602, 0, 1, "", "rolling_quantile_by"], [603, 0, 1, "", "rolling_skew"], [604, 0, 1, "", "rolling_std"], [605, 0, 1, "", "rolling_std_by"], [606, 0, 1, "", "rolling_sum"], [607, 0, 1, "", "rolling_sum_by"], [608, 0, 1, "", "rolling_var"], [609, 0, 1, "", "rolling_var_by"], [610, 0, 1, "", "round"], [611, 0, 1, "", "round_sig_figs"], [612, 0, 1, "", "sample"], [613, 0, 1, "", "search_sorted"], [614, 0, 1, "", "set_sorted"], [615, 0, 1, "", "shift"], [616, 0, 1, "", "shrink_dtype"], [617, 0, 1, "", "shuffle"], [618, 0, 1, "", "sign"], [619, 0, 1, "", "sin"], [620, 0, 1, "", "sinh"], [621, 0, 1, "", "skew"], [622, 0, 1, "", "slice"], [623, 0, 1, "", "sort"], [624, 0, 1, "", "sort_by"], [625, 0, 1, "", "sqrt"], [626, 0, 1, "", "std"], [677, 0, 1, "", "sub"], [678, 0, 1, "", "sum"], [679, 0, 1, "", "tail"], [680, 0, 1, "", "tan"], [681, 0, 1, "", "tanh"], [682, 0, 1, "", "to_physical"], [683, 0, 1, "", "top_k"], [684, 0, 1, "", "top_k_by"], [685, 0, 1, "", "truediv"], [686, 0, 1, "", "unique"], [687, 0, 1, "", "unique_counts"], [688, 0, 1, "", "upper_bound"], [689, 0, 1, "", "value_counts"], [690, 0, 1, "", "var"], [691, 0, 1, "", "where"], [692, 0, 1, "", "xor"]], "polars.Expr.arr": [[338, 0, 1, "", "all"], [339, 0, 1, "", "any"], [340, 0, 1, "", "arg_max"], [341, 0, 1, "", "arg_min"], [342, 0, 1, "", "contains"], [343, 0, 1, "", "count_matches"], [344, 0, 1, "", "explode"], [345, 0, 1, "", "first"], [346, 0, 1, "", "get"], [347, 0, 1, "", "join"], [348, 0, 1, "", "last"], [349, 0, 1, "", "max"], [350, 0, 1, "", "median"], [351, 0, 1, "", "min"], [352, 0, 1, "", "n_unique"], [353, 0, 1, "", "reverse"], [354, 0, 1, "", "shift"], [355, 0, 1, "", "sort"], [356, 0, 1, "", "std"], [357, 0, 1, "", "sum"], [358, 0, 1, "", "to_list"], [359, 0, 1, "", "to_struct"], [360, 0, 1, "", "unique"], [361, 0, 1, "", "var"]], "polars.Expr.bin": [[363, 0, 1, "", "contains"], [364, 0, 1, "", "decode"], [365, 0, 1, "", "encode"], [366, 0, 1, "", "ends_with"], [367, 0, 1, "", "size"], [368, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[372, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[393, 0, 1, "", "add_business_days"], [394, 0, 1, "", "base_utc_offset"], [395, 0, 1, "", "cast_time_unit"], [396, 0, 1, "", "century"], [397, 0, 1, "", "combine"], [398, 0, 1, "", "convert_time_zone"], [399, 0, 1, "", "date"], [400, 0, 1, "", "datetime"], [401, 0, 1, "", "day"], [402, 0, 1, "", "dst_offset"], [403, 0, 1, "", "epoch"], [404, 0, 1, "", "hour"], [405, 0, 1, "", "is_leap_year"], [406, 0, 1, "", "iso_year"], [407, 0, 1, "", "microsecond"], [408, 0, 1, "", "millennium"], [409, 0, 1, "", "millisecond"], [410, 0, 1, "", "minute"], [411, 0, 1, "", "month"], [412, 0, 1, "", "month_end"], [413, 0, 1, "", "month_start"], [414, 0, 1, "", "nanosecond"], [415, 0, 1, "", "offset_by"], [416, 0, 1, "", "ordinal_day"], [417, 0, 1, "", "quarter"], [418, 0, 1, "", "replace_time_zone"], [419, 0, 1, "", "round"], [420, 0, 1, "", "second"], [421, 0, 1, "", "strftime"], [422, 0, 1, "", "time"], [423, 0, 1, "", "timestamp"], [424, 0, 1, "", "to_string"], [425, 0, 1, "", "total_days"], [426, 0, 1, "", "total_hours"], [427, 0, 1, "", "total_microseconds"], [428, 0, 1, "", "total_milliseconds"], [429, 0, 1, "", "total_minutes"], [430, 0, 1, "", "total_nanoseconds"], [431, 0, 1, "", "total_seconds"], [432, 0, 1, "", "truncate"], [433, 0, 1, "", "week"], [434, 0, 1, "", "weekday"], [435, 0, 1, "", "with_time_unit"], [436, 0, 1, "", "year"]], "polars.Expr.list": [[487, 0, 1, "", "all"], [488, 0, 1, "", "any"], [489, 0, 1, "", "arg_max"], [490, 0, 1, "", "arg_min"], [491, 0, 1, "", "concat"], [492, 0, 1, "", "contains"], [493, 0, 1, "", "count_matches"], [494, 0, 1, "", "diff"], [495, 0, 1, "", "drop_nulls"], [496, 0, 1, "", "eval"], [497, 0, 1, "", "explode"], [498, 0, 1, "", "first"], [499, 0, 1, "", "gather"], [500, 0, 1, "", "gather_every"], [501, 0, 1, "", "get"], [502, 0, 1, "", "head"], [503, 0, 1, "", "join"], [504, 0, 1, "", "last"], [505, 0, 1, "", "len"], [506, 0, 1, "", "max"], [507, 0, 1, "", "mean"], [508, 0, 1, "", "median"], [509, 0, 1, "", "min"], [510, 0, 1, "", "n_unique"], [511, 0, 1, "", "reverse"], [512, 0, 1, "", "sample"], [513, 0, 1, "", "set_difference"], [514, 0, 1, "", "set_intersection"], [515, 0, 1, "", "set_symmetric_difference"], [516, 0, 1, "", "set_union"], [517, 0, 1, "", "shift"], [518, 0, 1, "", "slice"], [519, 0, 1, "", "sort"], [520, 0, 1, "", "std"], [521, 0, 1, "", "sum"], [522, 0, 1, "", "tail"], [523, 0, 1, "", "to_array"], [524, 0, 1, "", "to_struct"], [525, 0, 1, "", "unique"], [526, 0, 1, "", "var"]], "polars.Expr.meta": [[537, 0, 1, "", "eq"], [538, 0, 1, "", "has_multiple_outputs"], [539, 0, 1, "", "is_column_selection"], [540, 0, 1, "", "is_regex_projection"], [541, 0, 1, "", "ne"], [542, 0, 1, "", "output_name"], [543, 0, 1, "", "pop"], [544, 0, 1, "", "root_names"], [545, 0, 1, "", "serialize"], [546, 0, 1, "", "tree_format"], [547, 0, 1, "", "undo_aliases"], [548, 0, 1, "", "write_json"]], "polars.Expr.name": [[554, 0, 1, "", "keep"], [555, 0, 1, "", "map"], [556, 0, 1, "", "map_fields"], [557, 0, 1, "", "prefix"], [558, 0, 1, "", "prefix_fields"], [559, 0, 1, "", "suffix"], [560, 0, 1, "", "suffix_fields"], [561, 0, 1, "", "to_lowercase"], [562, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[627, 0, 1, "", "concat"], [628, 0, 1, "", "contains"], [629, 0, 1, "", "contains_any"], [630, 0, 1, "", "count_matches"], [631, 0, 1, "", "decode"], [632, 0, 1, "", "encode"], [633, 0, 1, "", "ends_with"], [634, 0, 1, "", "explode"], [635, 0, 1, "", "extract"], [636, 0, 1, "", "extract_all"], [637, 0, 1, "", "extract_groups"], [638, 0, 1, "", "extract_many"], [639, 0, 1, "", "find"], [640, 0, 1, "", "head"], [641, 0, 1, "", "join"], [642, 0, 1, "", "json_decode"], [643, 0, 1, "", "json_path_match"], [644, 0, 1, "", "len_bytes"], [645, 0, 1, "", "len_chars"], [646, 0, 1, "", "pad_end"], [647, 0, 1, "", "pad_start"], [648, 0, 1, "", "replace"], [649, 0, 1, "", "replace_all"], [650, 0, 1, "", "replace_many"], [651, 0, 1, "", "reverse"], [652, 0, 1, "", "slice"], [653, 0, 1, "", "split"], [654, 0, 1, "", "split_exact"], [655, 0, 1, "", "splitn"], [656, 0, 1, "", "starts_with"], [657, 0, 1, "", "strip_chars"], [658, 0, 1, "", "strip_chars_end"], [659, 0, 1, "", "strip_chars_start"], [660, 0, 1, "", "strip_prefix"], [661, 0, 1, "", "strip_suffix"], [662, 0, 1, "", "strptime"], [663, 0, 1, "", "tail"], [664, 0, 1, "", "to_date"], [665, 0, 1, "", "to_datetime"], [666, 0, 1, "", "to_decimal"], [667, 0, 1, "", "to_integer"], [668, 0, 1, "", "to_lowercase"], [669, 0, 1, "", "to_time"], [670, 0, 1, "", "to_titlecase"], [671, 0, 1, "", "to_uppercase"], [672, 0, 1, "", "zfill"]], "polars.Expr.struct": [[673, 0, 1, "", "field"], [674, 0, 1, "", "json_encode"], [675, 0, 1, "", "rename_fields"], [676, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[790, 0, 1, "", "approx_n_unique"], [791, 0, 1, "", "bottom_k"], [792, 0, 1, "", "cache"], [793, 0, 1, "", "cast"], [794, 0, 1, "", "clear"], [795, 0, 1, "", "clone"], [796, 0, 1, "", "collect"], [797, 0, 1, "", "collect_async"], [798, 0, 1, "", "collect_schema"], [799, 1, 1, "", "columns"], [800, 0, 1, "", "count"], [801, 0, 1, "", "describe"], [802, 0, 1, "", "deserialize"], [803, 0, 1, "", "drop"], [804, 0, 1, "", "drop_nulls"], [805, 1, 1, "", "dtypes"], [806, 0, 1, "", "explain"], [807, 0, 1, "", "explode"], [808, 0, 1, "", "fill_nan"], [809, 0, 1, "", "fill_null"], [810, 0, 1, "", "filter"], [811, 0, 1, "", "first"], [812, 0, 1, "", "gather_every"], [813, 0, 1, "", "group_by"], [814, 0, 1, "", "group_by_dynamic"], [815, 0, 1, "", "head"], [816, 0, 1, "", "inspect"], [817, 0, 1, "", "interpolate"], [818, 0, 1, "", "join"], [819, 0, 1, "", "join_asof"], [820, 0, 1, "", "last"], [821, 0, 1, "", "lazy"], [822, 0, 1, "", "limit"], [823, 0, 1, "", "map_batches"], [824, 0, 1, "", "max"], [825, 0, 1, "", "mean"], [826, 0, 1, "", "median"], [827, 0, 1, "", "melt"], [828, 0, 1, "", "merge_sorted"], [829, 0, 1, "", "min"], [830, 0, 1, "", "null_count"], [831, 0, 1, "", "pipe"], [832, 0, 1, "", "profile"], [833, 0, 1, "", "quantile"], [834, 0, 1, "", "rename"], [835, 0, 1, "", "reverse"], [836, 0, 1, "", "rolling"], [837, 1, 1, "", "schema"], [838, 0, 1, "", "select"], [839, 0, 1, "", "select_seq"], [840, 0, 1, "", "serialize"], [841, 0, 1, "", "set_sorted"], [842, 0, 1, "", "shift"], [843, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [844, 0, 1, "", "slice"], [845, 0, 1, "", "sort"], [846, 0, 1, "", "sql"], [847, 0, 1, "", "std"], [848, 0, 1, "", "sum"], [849, 0, 1, "", "tail"], [850, 0, 1, "", "top_k"], [851, 0, 1, "", "unique"], [852, 0, 1, "", "unnest"], [853, 0, 1, "", "unpivot"], [854, 0, 1, "", "update"], [855, 0, 1, "", "var"], [856, 1, 1, "", "width"], [857, 0, 1, "", "with_columns"], [858, 0, 1, "", "with_columns_seq"], [859, 0, 1, "", "with_context"], [860, 0, 1, "", "with_row_count"], [861, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1272, 0, 1, "", "__enter__"], [1272, 0, 1, "", "__exit__"], [1272, 0, 1, "", "__init__"], [1254, 0, 1, "", "execute"], [1255, 0, 1, "", "execute_global"], [1256, 0, 1, "", "register"], [1257, 0, 1, "", "register_globals"], [1258, 0, 1, "", "register_many"], [1259, 0, 1, "", "tables"], [1260, 0, 1, "", "unregister"]], "polars.Series": [[893, 0, 1, "", "__arrow_c_stream__"], [894, 0, 1, "", "abs"], [895, 0, 1, "", "alias"], [896, 0, 1, "", "all"], [897, 0, 1, "", "any"], [898, 0, 1, "", "append"], [899, 0, 1, "", "arccos"], [900, 0, 1, "", "arccosh"], [901, 0, 1, "", "arcsin"], [902, 0, 1, "", "arcsinh"], [903, 0, 1, "", "arctan"], [904, 0, 1, "", "arctanh"], [905, 0, 1, "", "arg_max"], [906, 0, 1, "", "arg_min"], [907, 0, 1, "", "arg_sort"], [908, 0, 1, "", "arg_true"], [909, 0, 1, "", "arg_unique"], [940, 0, 1, "", "bottom_k"], [941, 0, 1, "", "cast"], [946, 0, 1, "", "cbrt"], [947, 0, 1, "", "ceil"], [948, 0, 1, "", "chunk_lengths"], [949, 0, 1, "", "clear"], [950, 0, 1, "", "clip"], [951, 0, 1, "", "clone"], [952, 0, 1, "", "cos"], [953, 0, 1, "", "cosh"], [954, 0, 1, "", "cot"], [955, 0, 1, "", "cum_count"], [956, 0, 1, "", "cum_max"], [957, 0, 1, "", "cum_min"], [958, 0, 1, "", "cum_prod"], [959, 0, 1, "", "cum_sum"], [960, 0, 1, "", "cumulative_eval"], [961, 0, 1, "", "cut"], [962, 0, 1, "", "describe"], [963, 0, 1, "", "diff"], [964, 0, 1, "", "dot"], [965, 0, 1, "", "drop_nans"], [966, 0, 1, "", "drop_nulls"], [1015, 1, 1, "", "dtype"], [1016, 0, 1, "", "entropy"], [1017, 0, 1, "", "equals"], [1018, 0, 1, "", "estimated_size"], [1019, 0, 1, "", "ewm_mean"], [1020, 0, 1, "", "ewm_mean_by"], [1021, 0, 1, "", "ewm_std"], [1022, 0, 1, "", "ewm_var"], [1023, 0, 1, "", "exp"], [1024, 0, 1, "", "explode"], [1025, 0, 1, "", "extend"], [1026, 0, 1, "", "extend_constant"], [1027, 0, 1, "", "fill_nan"], [1028, 0, 1, "", "fill_null"], [1029, 0, 1, "", "filter"], [1030, 1, 1, "", "flags"], [1031, 0, 1, "", "floor"], [1032, 0, 1, "", "gather"], [1033, 0, 1, "", "gather_every"], [1034, 0, 1, "", "get_chunks"], [1035, 0, 1, "", "has_nulls"], [1036, 0, 1, "", "has_validity"], [1037, 0, 1, "", "hash"], [1038, 0, 1, "", "head"], [1039, 0, 1, "", "hist"], [1040, 0, 1, "", "implode"], [1041, 0, 1, "", "interpolate"], [1042, 0, 1, "", "interpolate_by"], [1043, 0, 1, "", "is_between"], [1044, 0, 1, "", "is_duplicated"], [1045, 0, 1, "", "is_empty"], [1046, 0, 1, "", "is_finite"], [1047, 0, 1, "", "is_first_distinct"], [1048, 0, 1, "", "is_in"], [1049, 0, 1, "", "is_infinite"], [1050, 0, 1, "", "is_last_distinct"], [1051, 0, 1, "", "is_nan"], [1052, 0, 1, "", "is_not_nan"], [1053, 0, 1, "", "is_not_null"], [1054, 0, 1, "", "is_null"], [1055, 0, 1, "", "is_sorted"], [1056, 0, 1, "", "is_unique"], [1057, 0, 1, "", "item"], [1058, 0, 1, "", "kurtosis"], [1059, 0, 1, "", "len"], [1060, 0, 1, "", "limit"], [1101, 0, 1, "", "log"], [1102, 0, 1, "", "log10"], [1103, 0, 1, "", "log1p"], [1104, 0, 1, "", "lower_bound"], [1105, 0, 1, "", "map_elements"], [1106, 0, 1, "", "max"], [1107, 0, 1, "", "mean"], [1108, 0, 1, "", "median"], [1109, 0, 1, "", "min"], [1110, 0, 1, "", "mode"], [1111, 0, 1, "", "n_chunks"], [1112, 0, 1, "", "n_unique"], [1113, 1, 1, "", "name"], [1114, 0, 1, "", "nan_max"], [1115, 0, 1, "", "nan_min"], [1116, 0, 1, "", "new_from_index"], [1117, 0, 1, "", "not_"], [1118, 0, 1, "", "null_count"], [1119, 0, 1, "", "pct_change"], [1120, 0, 1, "", "peak_max"], [1121, 0, 1, "", "peak_min"], [1250, 1, 1, "", "plot"], [1122, 0, 1, "", "product"], [1123, 0, 1, "", "qcut"], [1124, 0, 1, "", "quantile"], [1125, 0, 1, "", "rank"], [1126, 0, 1, "", "rechunk"], [1127, 0, 1, "", "reinterpret"], [1128, 0, 1, "", "rename"], [1129, 0, 1, "", "replace"], [1130, 0, 1, "", "replace_strict"], [1131, 0, 1, "", "reshape"], [1132, 0, 1, "", "reverse"], [1133, 0, 1, "", "rle"], [1134, 0, 1, "", "rle_id"], [1135, 0, 1, "", "rolling_map"], [1136, 0, 1, "", "rolling_max"], [1137, 0, 1, "", "rolling_mean"], [1138, 0, 1, "", "rolling_median"], [1139, 0, 1, "", "rolling_min"], [1140, 0, 1, "", "rolling_quantile"], [1141, 0, 1, "", "rolling_skew"], [1142, 0, 1, "", "rolling_std"], [1143, 0, 1, "", "rolling_sum"], [1144, 0, 1, "", "rolling_var"], [1145, 0, 1, "", "round"], [1146, 0, 1, "", "round_sig_figs"], [1147, 0, 1, "", "sample"], [1148, 0, 1, "", "scatter"], [1149, 0, 1, "", "search_sorted"], [1150, 0, 1, "", "set"], [1151, 0, 1, "", "set_sorted"], [1152, 1, 1, "", "shape"], [1153, 0, 1, "", "shift"], [1154, 0, 1, "", "shrink_dtype"], [1155, 0, 1, "", "shrink_to_fit"], [1156, 0, 1, "", "shuffle"], [1157, 0, 1, "", "sign"], [1158, 0, 1, "", "sin"], [1159, 0, 1, "", "sinh"], [1160, 0, 1, "", "skew"], [1161, 0, 1, "", "slice"], [1162, 0, 1, "", "sort"], [1163, 0, 1, "", "sqrt"], [1164, 0, 1, "", "std"], [1217, 0, 1, "", "sum"], [1218, 0, 1, "", "tail"], [1219, 0, 1, "", "tan"], [1220, 0, 1, "", "tanh"], [1221, 0, 1, "", "to_arrow"], [1222, 0, 1, "", "to_dummies"], [1223, 0, 1, "", "to_frame"], [1224, 0, 1, "", "to_init_repr"], [1225, 0, 1, "", "to_jax"], [1226, 0, 1, "", "to_list"], [1227, 0, 1, "", "to_numpy"], [1228, 0, 1, "", "to_pandas"], [1229, 0, 1, "", "to_physical"], [1230, 0, 1, "", "to_torch"], [1231, 0, 1, "", "top_k"], [1232, 0, 1, "", "unique"], [1233, 0, 1, "", "unique_counts"], [1234, 0, 1, "", "upper_bound"], [1235, 0, 1, "", "value_counts"], [1236, 0, 1, "", "var"], [1237, 0, 1, "", "zip_with"]], "polars.Series.arr": [[910, 0, 1, "", "all"], [911, 0, 1, "", "any"], [912, 0, 1, "", "arg_max"], [913, 0, 1, "", "arg_min"], [914, 0, 1, "", "contains"], [915, 0, 1, "", "count_matches"], [916, 0, 1, "", "explode"], [917, 0, 1, "", "first"], [918, 0, 1, "", "get"], [919, 0, 1, "", "join"], [920, 0, 1, "", "last"], [921, 0, 1, "", "max"], [922, 0, 1, "", "median"], [923, 0, 1, "", "min"], [924, 0, 1, "", "n_unique"], [925, 0, 1, "", "reverse"], [926, 0, 1, "", "shift"], [927, 0, 1, "", "sort"], [928, 0, 1, "", "std"], [929, 0, 1, "", "sum"], [930, 0, 1, "", "to_list"], [931, 0, 1, "", "to_struct"], [932, 0, 1, "", "unique"], [933, 0, 1, "", "var"]], "polars.Series.bin": [[934, 0, 1, "", "contains"], [935, 0, 1, "", "decode"], [936, 0, 1, "", "encode"], [937, 0, 1, "", "ends_with"], [938, 0, 1, "", "size"], [939, 0, 1, "", "starts_with"]], "polars.Series.cat": [[942, 0, 1, "", "get_categories"], [943, 0, 1, "", "is_local"], [944, 0, 1, "", "to_local"], [945, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[967, 0, 1, "", "add_business_days"], [968, 0, 1, "", "base_utc_offset"], [969, 0, 1, "", "cast_time_unit"], [970, 0, 1, "", "century"], [971, 0, 1, "", "combine"], [972, 0, 1, "", "convert_time_zone"], [973, 0, 1, "", "date"], [974, 0, 1, "", "datetime"], [975, 0, 1, "", "day"], [976, 0, 1, "", "dst_offset"], [977, 0, 1, "", "epoch"], [978, 0, 1, "", "hour"], [979, 0, 1, "", "is_leap_year"], [980, 0, 1, "", "iso_year"], [981, 0, 1, "", "max"], [982, 0, 1, "", "mean"], [983, 0, 1, "", "median"], [984, 0, 1, "", "microsecond"], [985, 0, 1, "", "millennium"], [986, 0, 1, "", "millisecond"], [987, 0, 1, "", "min"], [988, 0, 1, "", "minute"], [989, 0, 1, "", "month"], [990, 0, 1, "", "month_end"], [991, 0, 1, "", "month_start"], [992, 0, 1, "", "nanosecond"], [993, 0, 1, "", "offset_by"], [994, 0, 1, "", "ordinal_day"], [995, 0, 1, "", "quarter"], [996, 0, 1, "", "replace_time_zone"], [997, 0, 1, "", "round"], [998, 0, 1, "", "second"], [999, 0, 1, "", "strftime"], [1000, 0, 1, "", "time"], [1001, 0, 1, "", "timestamp"], [1002, 0, 1, "", "to_string"], [1003, 0, 1, "", "total_days"], [1004, 0, 1, "", "total_hours"], [1005, 0, 1, "", "total_microseconds"], [1006, 0, 1, "", "total_milliseconds"], [1007, 0, 1, "", "total_minutes"], [1008, 0, 1, "", "total_nanoseconds"], [1009, 0, 1, "", "total_seconds"], [1010, 0, 1, "", "truncate"], [1011, 0, 1, "", "week"], [1012, 0, 1, "", "weekday"], [1013, 0, 1, "", "with_time_unit"], [1014, 0, 1, "", "year"]], "polars.Series.list": [[1061, 0, 1, "", "all"], [1062, 0, 1, "", "any"], [1063, 0, 1, "", "arg_max"], [1064, 0, 1, "", "arg_min"], [1065, 0, 1, "", "concat"], [1066, 0, 1, "", "contains"], [1067, 0, 1, "", "count_matches"], [1068, 0, 1, "", "diff"], [1069, 0, 1, "", "drop_nulls"], [1070, 0, 1, "", "eval"], [1071, 0, 1, "", "explode"], [1072, 0, 1, "", "first"], [1073, 0, 1, "", "gather"], [1074, 0, 1, "", "gather_every"], [1075, 0, 1, "", "get"], [1076, 0, 1, "", "head"], [1077, 0, 1, "", "join"], [1078, 0, 1, "", "last"], [1079, 0, 1, "", "len"], [1080, 0, 1, "", "max"], [1081, 0, 1, "", "mean"], [1082, 0, 1, "", "median"], [1083, 0, 1, "", "min"], [1084, 0, 1, "", "n_unique"], [1085, 0, 1, "", "reverse"], [1086, 0, 1, "", "sample"], [1087, 0, 1, "", "set_difference"], [1088, 0, 1, "", "set_intersection"], [1089, 0, 1, "", "set_symmetric_difference"], [1090, 0, 1, "", "set_union"], [1091, 0, 1, "", "shift"], [1092, 0, 1, "", "slice"], [1093, 0, 1, "", "sort"], [1094, 0, 1, "", "std"], [1095, 0, 1, "", "sum"], [1096, 0, 1, "", "tail"], [1097, 0, 1, "", "to_array"], [1098, 0, 1, "", "to_struct"], [1099, 0, 1, "", "unique"], [1100, 0, 1, "", "var"]], "polars.Series.str": [[1165, 0, 1, "", "concat"], [1166, 0, 1, "", "contains"], [1167, 0, 1, "", "contains_any"], [1168, 0, 1, "", "count_matches"], [1169, 0, 1, "", "decode"], [1170, 0, 1, "", "encode"], [1171, 0, 1, "", "ends_with"], [1172, 0, 1, "", "explode"], [1173, 0, 1, "", "extract"], [1174, 0, 1, "", "extract_all"], [1175, 0, 1, "", "extract_groups"], [1176, 0, 1, "", "extract_many"], [1177, 0, 1, "", "find"], [1178, 0, 1, "", "head"], [1179, 0, 1, "", "join"], [1180, 0, 1, "", "json_decode"], [1181, 0, 1, "", "json_path_match"], [1182, 0, 1, "", "len_bytes"], [1183, 0, 1, "", "len_chars"], [1184, 0, 1, "", "pad_end"], [1185, 0, 1, "", "pad_start"], [1186, 0, 1, "", "replace"], [1187, 0, 1, "", "replace_all"], [1188, 0, 1, "", "replace_many"], [1189, 0, 1, "", "reverse"], [1190, 0, 1, "", "slice"], [1191, 0, 1, "", "split"], [1192, 0, 1, "", "split_exact"], [1193, 0, 1, "", "splitn"], [1194, 0, 1, "", "starts_with"], [1195, 0, 1, "", "strip_chars"], [1196, 0, 1, "", "strip_chars_end"], [1197, 0, 1, "", "strip_chars_start"], [1198, 0, 1, "", "strip_prefix"], [1199, 0, 1, "", "strip_suffix"], [1200, 0, 1, "", "strptime"], [1201, 0, 1, "", "tail"], [1202, 0, 1, "", "to_date"], [1203, 0, 1, "", "to_datetime"], [1204, 0, 1, "", "to_decimal"], [1205, 0, 1, "", "to_integer"], [1206, 0, 1, "", "to_lowercase"], [1207, 0, 1, "", "to_time"], [1208, 0, 1, "", "to_titlecase"], [1209, 0, 1, "", "to_uppercase"], [1210, 0, 1, "", "zfill"]], "polars.Series.struct": [[1211, 0, 1, "", "field"], [1212, 3, 1, "", "fields"], [1213, 0, 1, "", "json_encode"], [1214, 0, 1, "", "rename_fields"], [1215, 3, 1, "", "schema"], [1216, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[288, 0, 1, "", "__iter__"], [289, 0, 1, "", "agg"], [290, 0, 1, "", "all"], [291, 0, 1, "", "count"], [292, 0, 1, "", "first"], [293, 0, 1, "", "head"], [294, 0, 1, "", "last"], [295, 0, 1, "", "len"], [296, 0, 1, "", "map_groups"], [297, 0, 1, "", "max"], [298, 0, 1, "", "mean"], [299, 0, 1, "", "median"], [300, 0, 1, "", "min"], [301, 0, 1, "", "n_unique"], [302, 0, 1, "", "quantile"], [303, 0, 1, "", "sum"], [304, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[862, 0, 1, "", "agg"], [863, 0, 1, "", "all"], [864, 0, 1, "", "count"], [865, 0, 1, "", "first"], [866, 0, 1, "", "head"], [867, 0, 1, "", "last"], [868, 0, 1, "", "len"], [869, 0, 1, "", "map_groups"], [870, 0, 1, "", "max"], [871, 0, 1, "", "mean"], [872, 0, 1, "", "median"], [873, 0, 1, "", "min"], [874, 0, 1, "", "n_unique"], [875, 0, 1, "", "quantile"], [876, 0, 1, "", "sum"], [877, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[878, 0, 1, "", "cancel"], [879, 0, 1, "", "fetch"], [880, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[889, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[891, 4, 1, "", "all"], [891, 4, 1, "", "alpha"], [891, 4, 1, "", "alphanumeric"], [891, 4, 1, "", "binary"], [891, 4, 1, "", "boolean"], [891, 4, 1, "", "by_dtype"], [891, 4, 1, "", "by_index"], [891, 4, 1, "", "by_name"], [891, 4, 1, "", "categorical"], [891, 4, 1, "", "contains"], [891, 4, 1, "", "date"], [891, 4, 1, "", "datetime"], [891, 4, 1, "", "decimal"], [891, 4, 1, "", "digit"], [891, 4, 1, "", "duration"], [891, 4, 1, "", "ends_with"], [891, 4, 1, "", "exclude"], [891, 4, 1, "", "expand_selector"], [891, 4, 1, "", "first"], [891, 4, 1, "", "float"], [891, 4, 1, "", "integer"], [891, 4, 1, "", "is_selector"], [891, 4, 1, "", "last"], [891, 4, 1, "", "matches"], [891, 4, 1, "", "numeric"], [891, 4, 1, "", "signed_integer"], [891, 4, 1, "", "starts_with"], [891, 4, 1, "", "string"], [891, 4, 1, "", "temporal"], [891, 4, 1, "", "time"], [891, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 173, 174, 185, 188, 193, 196, 201, 202, 207, 213, 216, 217, 226, 233, 235, 240, 242, 245, 248, 249, 256, 265, 268, 273, 275, 276, 277, 278, 279, 284, 285, 310, 347, 370, 371, 398, 403, 421, 424, 444, 450, 454, 482, 503, 532, 533, 543, 551, 563, 564, 571, 572, 583, 590, 624, 628, 635, 636, 637, 639, 640, 648, 649, 652, 653, 655, 662, 663, 664, 665, 669, 673, 675, 676, 684, 693, 694, 695, 696, 701, 707, 710, 713, 714, 723, 724, 726, 727, 733, 736, 737, 738, 739, 741, 743, 744, 746, 753, 755, 757, 758, 759, 765, 771, 775, 791, 793, 804, 813, 814, 819, 827, 838, 839, 845, 850, 851, 852, 853, 854, 857, 858, 869, 885, 891, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 975, 976, 977, 979, 981, 982, 983, 985, 986, 987, 990, 991, 994, 997, 998, 999, 1002, 1010, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1246, 1250, 1254, 1258, 1261, 1267, 1268], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 186, 187, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 207, 208, 212, 214, 215, 216, 218, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 235, 236, 237, 240, 242, 244, 245, 246, 247, 248, 255, 256, 257, 258, 260, 265, 266, 267, 268, 269, 270, 272, 274, 278, 280, 281, 284, 286, 287, 289, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 310, 314, 318, 320, 321, 323, 327, 328, 329, 330, 331, 332, 335, 336, 337, 340, 341, 343, 346, 356, 359, 361, 367, 371, 373, 374, 376, 377, 378, 385, 386, 387, 391, 392, 393, 399, 400, 404, 407, 409, 410, 414, 420, 422, 427, 428, 430, 431, 435, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 453, 454, 456, 458, 459, 461, 463, 465, 468, 469, 472, 475, 477, 478, 479, 480, 482, 484, 489, 490, 493, 496, 499, 500, 501, 507, 508, 520, 524, 526, 527, 528, 529, 531, 532, 534, 535, 536, 539, 543, 548, 549, 550, 552, 554, 563, 564, 565, 566, 567, 569, 570, 572, 575, 576, 578, 579, 580, 581, 585, 586, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 621, 625, 626, 627, 630, 634, 635, 636, 639, 676, 677, 678, 680, 681, 682, 685, 690, 691, 693, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 718, 722, 725, 731, 732, 734, 737, 740, 741, 742, 746, 748, 749, 754, 761, 762, 763, 764, 765, 766, 771, 775, 790, 793, 794, 795, 798, 800, 801, 803, 805, 806, 808, 809, 810, 812, 813, 814, 817, 818, 821, 823, 826, 827, 830, 832, 833, 837, 838, 843, 845, 846, 847, 855, 857, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 885, 891, 899, 900, 901, 902, 903, 904, 905, 907, 909, 912, 918, 928, 931, 933, 938, 941, 944, 946, 947, 949, 952, 953, 954, 960, 961, 962, 964, 965, 966, 967, 974, 978, 982, 983, 984, 986, 988, 992, 998, 1005, 1006, 1008, 1009, 1013, 1016, 1019, 1020, 1021, 1022, 1027, 1031, 1033, 1036, 1037, 1039, 1041, 1042, 1046, 1049, 1051, 1052, 1053, 1054, 1057, 1058, 1063, 1064, 1067, 1070, 1073, 1074, 1075, 1081, 1082, 1094, 1098, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1114, 1115, 1119, 1123, 1124, 1125, 1129, 1130, 1134, 1135, 1137, 1138, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1149, 1157, 1158, 1159, 1160, 1163, 1164, 1165, 1168, 1172, 1173, 1174, 1177, 1181, 1219, 1220, 1222, 1225, 1227, 1228, 1229, 1230, 1234, 1236, 1246, 1254, 1260, 1262, 1263, 1266, 1267, 1269, 1270, 1272, 1274, 1275], "00": [27, 36, 62, 174, 181, 202, 280, 310, 394, 395, 398, 402, 412, 413, 415, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 594, 596, 598, 600, 602, 605, 607, 609, 662, 665, 669, 718, 719, 720, 721, 761, 762, 763, 775, 793, 801, 814, 819, 885, 891, 968, 969, 972, 973, 974, 976, 977, 978, 983, 984, 988, 990, 991, 992, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1200, 1203, 1207, 1267], "000": [9, 10, 27, 36, 310, 1275], "0000": [272, 310, 1230, 1246, 1275], "000000": [364, 365, 631, 935, 936, 1169], "00000001": [11, 692, 775], "00000010": [692, 775], "00000011": [692, 775], "00000100": [692, 775], "00001000": [692, 775], "00001010": [692, 775], "00001011": [692, 775], "0000e": 11, "0000ff": [364, 365, 631, 935, 936, 1169], "0005": 891, "00050": 891, "001": [49, 672, 721, 1005, 1006, 1008, 1210], "002": [721, 1005, 1006, 1008], "005": [1016, 1246], "00prefix": 891, "00z": [662, 665, 1200, 1203], "01": [28, 47, 61, 62, 159, 174, 181, 200, 202, 217, 242, 280, 310, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 662, 664, 665, 669, 703, 715, 716, 717, 718, 719, 720, 721, 775, 793, 801, 814, 836, 885, 891, 967, 969, 971, 972, 973, 974, 977, 978, 983, 984, 988, 990, 991, 992, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1200, 1202, 1203, 1207, 1267, 1270], "010": [9, 667, 1205], "01000": 28, "01000010": [692, 775], "01000110": [692, 775], "012": [611, 775, 1146, 1246], "0123": [672, 1210], "01234": [611, 775, 1146, 1246], "015625": 1246, "02": [47, 174, 181, 200, 202, 242, 280, 310, 393, 395, 397, 403, 412, 413, 415, 418, 423, 426, 429, 431, 435, 591, 594, 596, 598, 600, 602, 605, 607, 609, 610, 662, 664, 665, 669, 703, 715, 716, 717, 718, 719, 720, 721, 775, 793, 801, 814, 836, 885, 891, 931, 969, 971, 973, 974, 977, 978, 983, 984, 988, 990, 991, 992, 996, 997, 1000, 1001, 1004, 1007, 1009, 1010, 1098, 1200, 1202, 1203, 1207, 1267, 1268], "03": [47, 123, 129, 174, 202, 217, 242, 280, 310, 395, 397, 398, 403, 412, 413, 415, 418, 419, 421, 423, 424, 425, 426, 429, 431, 432, 435, 441, 454, 591, 594, 596, 598, 600, 602, 605, 607, 609, 664, 669, 715, 716, 717, 718, 719, 720, 721, 775, 793, 814, 836, 885, 891, 969, 971, 972, 977, 978, 983, 984, 990, 991, 992, 996, 997, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1202, 1207], "037037": 1246, "04": [149, 174, 181, 202, 280, 310, 397, 398, 412, 413, 418, 419, 421, 424, 425, 426, 429, 431, 435, 594, 596, 598, 600, 602, 605, 607, 609, 662, 703, 715, 718, 719, 721, 775, 793, 801, 814, 885, 891, 972, 984, 988, 990, 991, 992, 996, 999, 1002, 1003, 1004, 1007, 1009, 1013, 1200, 1267], "047198": 1269, "05": [16, 149, 152, 153, 154, 155, 159, 174, 181, 280, 310, 393, 396, 397, 398, 399, 400, 404, 407, 408, 409, 410, 412, 413, 414, 418, 420, 421, 422, 424, 425, 703, 715, 716, 718, 719, 793, 801, 819, 885, 891, 971, 972, 973, 974, 996, 997, 999, 1000, 1002, 1003, 1010, 1267, 1268, 1270], "050545": 123, "0522623626787952": [1058, 1246], "0545": [973, 974, 1000], "06": [159, 174, 280, 310, 393, 397, 411, 417, 418, 419, 420, 432, 433, 715, 718, 793, 885, 891, 967, 996, 997, 1010], "060": [399, 400, 404, 407, 409, 410, 414, 420, 422], "0601749420166": [188, 310], "06293300616044681": [1016, 1246], "07": [16, 129, 159, 181, 310, 393, 396, 397, 408, 418, 419, 432, 662, 715, 716, 718, 719, 727, 801, 885, 891, 967, 971, 996, 1200, 1267, 1270], "071068": [181, 310, 801, 885], "08": [129, 152, 153, 154, 155, 181, 217, 242, 257, 310, 393, 397, 412, 413, 419, 591, 662, 719, 721, 775, 801, 836, 885, 891, 967, 997, 1010, 1200, 1267, 1268], "085537": [1023, 1246], "09": [47, 129, 181, 242, 310, 393, 397, 412, 413, 591, 666, 715, 716, 718, 763, 775, 801, 836, 885, 891, 967, 1204], "090909": [572, 775], "094395": 1269, "098612": [529, 775, 1101, 1103, 1246, 1266], "0999": [396, 408], "0_": [36, 310], "0m": [402, 976], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 648, 649, 654, 655, 656, 657, 658, 659, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 771, 775, 790, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 938, 940, 941, 944, 946, 947, 948, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1173, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1186, 1187, 1192, 1193, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 176, 181, 190, 199, 200, 202, 204, 206, 207, 208, 213, 217, 219, 230, 234, 236, 240, 242, 248, 257, 261, 284, 289, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 321, 325, 333, 334, 335, 337, 375, 381, 384, 389, 393, 394, 396, 397, 399, 400, 402, 404, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 422, 432, 435, 441, 462, 463, 464, 468, 474, 486, 494, 500, 502, 508, 518, 520, 522, 526, 528, 542, 544, 554, 569, 572, 575, 585, 586, 591, 622, 667, 676, 679, 692, 703, 704, 711, 716, 718, 719, 722, 725, 727, 729, 735, 736, 760, 763, 775, 796, 797, 801, 814, 815, 817, 822, 831, 832, 836, 838, 848, 849, 857, 862, 865, 867, 870, 871, 872, 873, 874, 875, 876, 885, 891, 950, 963, 967, 968, 970, 971, 976, 985, 996, 1010, 1013, 1016, 1020, 1038, 1048, 1060, 1068, 1076, 1082, 1092, 1094, 1096, 1100, 1102, 1105, 1119, 1130, 1148, 1150, 1205, 1218, 1225, 1227, 1230, 1246, 1254, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1275], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 235, 253, 310, 585, 586, 615, 629, 638, 642, 650, 666, 720, 775, 842, 885, 891, 1102, 1129, 1130, 1136, 1137, 1139, 1153, 1167, 1180, 1188, 1204, 1246, 1264, 1275], "1000": [131, 188, 266, 287, 310, 326, 775, 861, 885, 1005, 1102, 1224, 1246, 1275], "10000": [129, 215, 310], "100000": [10, 27], "1000000": [11, 1008], "1001": [287, 310, 861, 885], "1002": [287, 310, 861, 885], "10047419486152048166": [203, 310], "1005": [326, 775], "100_000": [823, 885], "101": [9, 27, 397, 667, 891, 1205, 1275], "101000": 397, "10101": [27, 1270], "1010101": 9, "101514": [181, 310, 801, 885], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 310, 367, 885, 938], "1040361802642726": [1058, 1246], "107149": 1269, "10734580197236529959": [1037, 1246], "1073741824": [616, 775], "10783150408545073287": [203, 310], "107_930_000": 1254, "10_000": [36, 310], "10i": [202, 310, 814, 885], "10m": [419, 432, 997, 1010], "11": [10, 16, 41, 45, 151, 159, 172, 181, 217, 242, 310, 321, 412, 413, 415, 419, 432, 456, 468, 500, 548, 572, 581, 591, 592, 606, 622, 692, 758, 763, 771, 775, 790, 796, 797, 801, 815, 822, 832, 836, 849, 885, 891, 993, 997, 1010, 1105, 1135, 1246, 1263], "110": [667, 1205], "1101441246220388612": [463, 775], "111": [10, 1264], "11111": 998, "111110": 998, "11111001": [692, 775], "11111010": [692, 775], "11111111": 10, "112": [616, 775, 1275], "11330": 158, "1152921504606846976": [1127, 1246], "116": 158, "11638928888656214026": [463, 775], "118034": [847, 885], "11aa": 1267, "11aabb": 1267, "11h": [394, 968], "12": [26, 36, 47, 123, 129, 151, 159, 181, 202, 213, 217, 242, 257, 280, 310, 321, 383, 394, 396, 397, 401, 408, 411, 412, 413, 415, 416, 417, 419, 432, 433, 434, 441, 468, 500, 532, 572, 580, 591, 606, 616, 630, 666, 712, 715, 718, 719, 720, 736, 761, 762, 763, 775, 801, 814, 815, 819, 822, 836, 843, 849, 885, 891, 968, 970, 971, 982, 983, 985, 989, 997, 1010, 1020, 1105, 1145, 1168, 1204, 1246, 1266, 1267, 1268, 1270, 1272, 1275], "120": [721, 1269], "1200": [611, 775, 1146, 1246], "120134": [666, 1204], "121": 1275, "123": [9, 630, 636, 649, 672, 765, 891, 1168, 1174, 1210, 1223, 1246], "123000": 891, "1232e": [952, 954, 1246], "1234": [27, 611, 775, 1146, 1246], "12345": [727, 947, 1031, 1145, 1246], "1234500": 891, "123456": [9, 891], "1234567": 27, "123456780": 123, "12346": 727, "123465": 891, "123a123": 649, "123abc": [648, 1186, 1187], "125": [1, 36, 51, 310, 319, 576, 754, 775, 846, 885, 1119, 1246], "127": [1234, 1246], "128": [49, 63, 1119, 1246], "129": [616, 775], "12th": [819, 885], "13": [175, 176, 181, 191, 192, 199, 207, 218, 230, 242, 284, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 321, 393, 399, 400, 404, 407, 409, 410, 414, 420, 422, 542, 544, 591, 666, 705, 711, 714, 718, 725, 759, 761, 764, 775, 794, 795, 801, 808, 809, 821, 836, 857, 865, 867, 870, 871, 872, 873, 874, 875, 876, 885, 967, 997, 1010, 1011, 1105, 1204, 1246], "130": 126, "13382926553367784577": [463, 775], "134821952": 1254, "134_821_952": 1254, "135": [700, 1269], "13614470193936745724": [463, 775], "13756996518000038261": [1037, 1246], "13h": [394, 968], "14": [35, 151, 181, 220, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 394, 399, 400, 404, 407, 409, 410, 414, 420, 422, 468, 581, 718, 761, 762, 775, 801, 865, 867, 870, 871, 872, 873, 874, 875, 876, 885, 891, 968, 997], "141592653589793": 10, "141593": [580, 775, 899, 1246, 1266, 1269], "142857": [1119, 1246], "143": [666, 1204, 1275], "1433": [34, 310], "1436e16": 159, "1438741209321515184": [203, 310], "1440": [429, 1007], "1443e235": 1275, "149": 1275, "14d": 891, "15": [10, 36, 151, 181, 202, 207, 220, 242, 310, 385, 389, 413, 419, 432, 441, 575, 591, 606, 712, 718, 761, 762, 775, 801, 814, 836, 885, 891, 960, 963, 997, 1010, 1020, 1246, 1267], "150": [1137, 1246], "1500": [151, 162], "15000": [215, 310], "153061": [482, 775], "15836": 159, "15_000": [215, 310], "16": [1, 36, 49, 68, 78, 151, 165, 181, 202, 242, 284, 310, 381, 384, 468, 552, 576, 591, 667, 676, 711, 721, 722, 725, 775, 801, 814, 836, 843, 857, 885, 891, 997, 1010, 1119, 1158, 1205, 1219, 1246, 1266, 1267, 1272], "165": [997, 1010], "1656e15": [954, 1246], "166667": [1119, 1246], "1666683077": 727, "1666683099": 727, "167": 47, "16996": 1275, "16h": 891, "17": [151, 159, 188, 217, 289, 310, 441, 592, 610, 727, 762, 775, 862, 952, 954, 997, 1020, 1135, 1246, 1275], "17293822569102704640": [1127, 1246], "174": 1275, "175201": [620, 775, 1159, 1246], "1755e": [156, 159], "1764": 51, "17888890": [188, 310], "179": 1275, "17_500": [215, 310], "18": [34, 123, 181, 227, 242, 310, 384, 419, 432, 435, 468, 554, 591, 676, 775, 801, 828, 832, 836, 885, 891, 1013, 1262, 1269, 1272], "180": [387, 580, 775, 1269], "1844": 159, "18446744073709551614": [1127, 1246], "185_000_000": 1254, "186": 1275, "1875": [608, 775, 855, 885], "1897": [396, 408, 970, 985], "18d": 891, "19": [134, 159, 217, 242, 310, 396, 419, 591, 596, 598, 600, 602, 666, 775, 819, 836, 885, 970, 997, 1010, 1204], "1920": 1267, "196": 1268, "1964": [832, 885], "1969": [1267, 1268], "1970": [61, 62, 149, 1254], "1972": 1254, "1976": [406, 436], "1977": [406, 436], "1978": [399, 400, 404, 406, 407, 409, 410, 414, 420, 422, 436, 1268], "1979": [406, 436], "1985": [716, 719], "1990": [129, 1254], "1993": 1254, "1994": 1254, "1995": 129, "1998": [415, 993], "1999": [257, 310, 415, 891, 993, 1270], "199992": [823, 885], "199994": [823, 885], "199996": [823, 885], "199998": [823, 885], "1_000_000": [188, 310, 1018, 1246], "1_234_500": 891, "1d": [202, 217, 242, 280, 310, 395, 415, 419, 426, 429, 432, 435, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 721, 735, 762, 763, 775, 814, 819, 836, 885, 891, 969, 977, 983, 993, 997, 1001, 1004, 1007, 1010, 1020, 1246], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [202, 217, 242, 280, 310, 402, 415, 419, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 762, 763, 775, 814, 819, 836, 885, 976, 978, 993, 997, 1010, 1020, 1246], "1i": [202, 242, 280, 310, 441, 591, 775, 814, 836, 885, 1020, 1246], "1m": [202, 217, 242, 280, 310, 415, 419, 431, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1005, 1006, 1008, 1009, 1010, 1020, 1246], "1mo": [202, 217, 242, 280, 310, 398, 412, 413, 415, 418, 419, 425, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 972, 989, 990, 991, 993, 994, 995, 996, 997, 1003, 1010, 1011, 1020, 1246], "1n": [202, 217, 242, 280, 310, 415, 419, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010, 1020, 1246], "1q": [202, 217, 242, 280, 310, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010], "1st": [819, 885], "1st_col": 891, "1u": [202, 217, 242, 280, 310, 415, 419, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010, 1020, 1246], "1w": [202, 217, 242, 280, 310, 415, 419, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010, 1020, 1246], "1w2d": [716, 717], "1y": [202, 217, 242, 280, 310, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010], "1y2mo": [415, 993], "1zy3": [630, 1168], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 323, 325, 326, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 369, 370, 371, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 408, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 749, 753, 754, 755, 756, 757, 758, 760, 763, 764, 765, 771, 775, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 890, 891, 894, 895, 898, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 938, 940, 944, 946, 947, 948, 949, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 967, 968, 971, 973, 974, 976, 978, 981, 982, 983, 985, 987, 988, 989, 990, 991, 995, 996, 997, 1000, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1173, 1175, 1177, 1178, 1180, 1181, 1183, 1186, 1187, 1192, 1193, 1195, 1196, 1197, 1200, 1201, 1203, 1204, 1205, 1206, 1209, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1254, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 172, 181, 190, 206, 207, 227, 234, 236, 240, 257, 267, 268, 272, 286, 291, 310, 333, 334, 335, 389, 396, 399, 400, 404, 407, 408, 409, 410, 414, 419, 420, 422, 432, 435, 456, 463, 468, 532, 539, 548, 575, 594, 596, 598, 600, 602, 605, 607, 609, 634, 676, 691, 718, 727, 735, 754, 762, 775, 790, 801, 806, 828, 831, 846, 860, 864, 885, 891, 963, 970, 974, 985, 997, 1010, 1013, 1023, 1036, 1129, 1172, 1225, 1227, 1230, 1246, 1261, 1262, 1264, 1270], "200": [427, 428, 430, 585, 586, 775, 891, 1129, 1130, 1136, 1137, 1139, 1246, 1264], "2000": [396, 405, 408, 412, 413, 415, 891, 970, 979, 985, 990, 991, 993, 998, 1254, 1267], "200000": [427, 823, 885], "200000000": 430, "2001": [16, 395, 396, 401, 403, 405, 408, 411, 415, 416, 417, 419, 423, 432, 433, 434, 435, 594, 596, 598, 600, 602, 605, 607, 609, 662, 775, 891, 969, 970, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 997, 1001, 1010, 1011, 1012, 1013, 1014, 1200], "2002": [129, 405, 415, 979, 993, 1014], "2003": [415, 727, 993], "2004": [415, 993], "2005": [415, 993], "2006": [415, 993], "2008": 1254, "200m": [427, 428, 430], "2010": [257, 310, 891], "2011": [394, 968], "2012": [394, 968, 1270], "2016": [217, 310, 819, 885], "2017": [217, 310, 819, 885], "2018": [217, 310, 418, 819, 885, 996], "2019": [217, 310, 819, 885], "202": 1268, "2020": [133, 144, 174, 181, 200, 217, 242, 310, 313, 393, 398, 402, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 441, 591, 662, 664, 665, 703, 775, 793, 801, 836, 885, 891, 967, 972, 976, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1020, 1200, 1202, 1203, 1246, 1268], "2021": [133, 144, 174, 181, 200, 202, 280, 310, 662, 735, 793, 801, 814, 885, 891, 973, 974, 980, 1000, 1200, 1267], "2022": [47, 174, 181, 200, 310, 397, 419, 432, 662, 716, 717, 719, 720, 721, 727, 793, 801, 885, 891, 971, 980, 997, 1010, 1200], "2023": [16, 36, 123, 151, 215, 310, 397, 721, 735, 891, 971], "2024": [151, 393, 399, 400, 404, 407, 409, 410, 414, 420, 422, 703, 715, 718, 721, 891, 967, 1267, 1270], "2025": [393, 703, 891, 967], "2026": 1268, "2030": 1267, "2031": 891, "2047317070637311557": [203, 310], "2055938745": 123, "2065": [399, 400, 404, 407, 409, 410, 414, 420, 422], "2068": 159, "207": 1268, "2077": [257, 310, 891, 1267, 1268], "2095": 159, "20_000": [36, 310], "20word": 132, "21": [151, 181, 227, 259, 310, 396, 594, 596, 598, 600, 602, 605, 607, 609, 718, 727, 775, 801, 828, 885, 891, 970, 1262], "213": 1275, "2147483647": 1275, "2147483648": [1104, 1246], "21d": 891, "22": [41, 45, 151, 159, 310, 401, 416, 419, 432, 434, 435, 592, 594, 596, 598, 600, 602, 605, 607, 609, 662, 718, 771, 775, 885, 891, 997, 1010, 1013, 1135, 1200, 1246, 1267, 1268, 1275], "221": 1275, "2246e": [1158, 1219, 1246], "225": [419, 432, 1269], "22_000_000": 1254, "23": [10, 159, 181, 202, 242, 272, 310, 397, 401, 404, 416, 419, 434, 591, 594, 596, 598, 600, 602, 605, 607, 609, 718, 721, 761, 762, 763, 775, 801, 814, 836, 846, 885, 891, 971, 978, 1230, 1246, 1274, 1275], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1254, "2337": [36, 310], "234": 27, "2345": 891, "23456789": 10, "235": 1275, "23h": 891, "24": [49, 151, 202, 217, 220, 242, 257, 280, 310, 383, 385, 401, 415, 416, 419, 426, 432, 434, 552, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 960, 993, 997, 1004, 1010, 1057, 1246, 1267, 1274], "24030": 158, "249": [692, 775], "25": [1, 27, 36, 51, 123, 181, 202, 217, 242, 267, 272, 280, 284, 310, 367, 389, 401, 402, 416, 419, 432, 434, 441, 576, 578, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 685, 718, 719, 720, 721, 727, 737, 762, 763, 775, 801, 814, 819, 825, 836, 855, 857, 885, 891, 938, 962, 963, 976, 997, 1010, 1016, 1020, 1039, 1119, 1123, 1246, 1262, 1266, 1272, 1273], "250": [692, 775, 1137, 1246, 1264, 1275], "2500": [215, 272, 310], "254508": [441, 775, 1020, 1246], "255": 1275, "256": [220, 310, 367, 938, 1119, 1246, 1266], "2560": [367, 938], "259921": [373, 775, 946, 1246, 1266], "25_000_000": 1254, "26": [34, 36, 151, 156, 157, 158, 159, 163, 181, 310, 402, 433, 801, 885, 976], "266667": [181, 310, 801, 885], "27": [1, 51, 267, 303, 310, 384, 411, 417, 433, 676, 775, 876, 891, 1225, 1246, 1274, 1275], "270": 1269, "28": [263, 268, 310, 319, 418, 435, 775, 996, 1013, 1227, 1246, 1267, 1269, 1274, 1275], "283185": [580, 775], "2846": 310, "285714": [469, 775, 1042, 1246], "289962": 1269, "28_341_469": 1254, "29": [16, 151, 394, 412, 968, 990], "29096": 1275, "290994": [847, 885], "292432": [900, 1246], "292893": [441, 775, 1020, 1246], "2_color_scal": [36, 310], "2d": [242, 267, 268, 310, 415, 591, 735, 775, 836, 885, 968, 975], "2h": [594, 596, 598, 600, 602, 605, 607, 609, 775], "2i": [202, 310, 814, 885], "2m": [891, 988], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 319, 320, 321, 322, 324, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 550, 551, 552, 553, 554, 555, 557, 559, 561, 562, 565, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 623, 624, 625, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 663, 664, 669, 670, 673, 674, 675, 676, 677, 679, 683, 684, 687, 688, 689, 691, 692, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 894, 895, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 972, 975, 977, 978, 979, 981, 982, 983, 985, 987, 988, 989, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1167, 1169, 1170, 1171, 1173, 1174, 1175, 1178, 1179, 1180, 1182, 1183, 1186, 1187, 1188, 1189, 1190, 1194, 1201, 1202, 1207, 1208, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1254, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275], "30": [36, 181, 190, 202, 206, 234, 240, 263, 284, 310, 333, 334, 335, 389, 397, 399, 400, 404, 407, 409, 410, 411, 412, 414, 417, 418, 419, 420, 422, 425, 432, 433, 463, 539, 616, 718, 735, 761, 762, 775, 801, 806, 814, 831, 857, 885, 891, 963, 971, 990, 996, 997, 1003, 1010, 1036, 1246, 1261, 1262, 1264, 1266, 1267, 1269, 1270, 1273, 1275], "300": [263, 310, 462, 569, 586, 775, 891, 1130, 1136, 1137, 1139, 1246, 1264], "3000": 891, "3002": [396, 408, 970, 985], "30103": [528, 775, 1266], "3022416320763508302": [1037, 1246], "30_000": [36, 310], "30m": [202, 310, 419, 432, 814, 885, 997, 1010], "31": [51, 181, 257, 310, 396, 397, 401, 408, 412, 415, 425, 634, 662, 715, 718, 727, 735, 754, 801, 885, 891, 968, 970, 971, 975, 985, 990, 1003, 1129, 1172, 1200, 1246, 1268, 1270, 1275], "32": [49, 61, 66, 69, 79, 212, 217, 242, 310, 552, 591, 616, 775, 836, 885, 964, 994, 1119, 1140, 1246, 1262, 1267], "321": [27, 1275], "3212": [666, 1204], "321cba": 1267, "3265500": 891, "32971": [435, 1013], "32974": [435, 1013], "32976": [435, 1013], "32bit": [267, 310], "33": [181, 227, 310, 610, 775, 801, 828, 885, 1140, 1246, 1268], "333": [16, 611, 775, 1146, 1246], "33333": 1270, "333333": [208, 310, 554, 817, 885, 1119, 1144, 1246, 1262], "34": [181, 310, 662, 801, 885, 1200], "3420": [666, 1204], "343622": [621, 775], "345": [644, 645, 1182, 1183], "3456": 891, "34776706224699483": [1160, 1246], "35": [36, 310, 389, 718, 775, 963, 1246], "350": [462, 569, 775, 1137, 1246], "356": [401, 416, 434], "356194": [699, 700, 1269], "357": [401, 416, 434], "358": [401, 416, 434], "359": [401, 416, 434], "36": [181, 310, 801, 885, 1272], "360": [387, 580, 775, 1269], "361": 1275, "363961": [520, 1094], "366": [416, 994], "37": [12, 891], "370h": [441, 775, 1020, 1246], "37338": 1275, "38": [36, 123, 156, 159, 310], "38180177416060584": [603, 775, 1141, 1246], "381802": [603, 775, 1141, 1246], "386294": [529, 775, 1103, 1246, 1266], "389056": [445, 775, 1023, 1246, 1266], "39": [607, 727, 775], "39m": 891, "3_color_scal": [36, 310], "3d12h4m25": [202, 217, 242, 280, 310, 419, 432, 441, 591, 719, 720, 762, 763, 775, 814, 819, 836, 885, 997, 1010, 1020, 1246], "3f": [132, 662, 665, 1200, 1203], "3i": [202, 242, 310, 814, 885], "3rd": [1178, 1201], "3xy": [630, 1168], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 171, 172, 173, 174, 175, 176, 180, 182, 185, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 227, 229, 230, 231, 233, 234, 235, 236, 242, 244, 245, 252, 253, 256, 260, 261, 262, 263, 264, 265, 268, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 323, 325, 337, 344, 345, 346, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 367, 369, 370, 371, 373, 374, 375, 379, 380, 383, 384, 385, 387, 390, 397, 400, 401, 408, 416, 417, 418, 419, 420, 421, 424, 426, 429, 431, 432, 434, 438, 439, 441, 445, 446, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 479, 480, 484, 485, 486, 493, 494, 495, 496, 497, 499, 500, 502, 510, 512, 513, 514, 515, 516, 517, 518, 522, 523, 528, 531, 532, 533, 550, 552, 554, 555, 557, 559, 561, 562, 565, 566, 567, 570, 571, 573, 574, 575, 576, 579, 581, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 615, 618, 622, 623, 624, 625, 628, 630, 636, 639, 640, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 660, 661, 662, 663, 667, 672, 673, 675, 676, 677, 679, 682, 683, 684, 685, 691, 692, 694, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 718, 719, 720, 722, 724, 725, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 771, 775, 790, 791, 793, 794, 795, 796, 797, 800, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 836, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 898, 900, 907, 914, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 932, 933, 938, 940, 947, 948, 950, 955, 960, 962, 964, 974, 978, 984, 985, 986, 988, 989, 990, 991, 992, 995, 996, 997, 999, 1002, 1004, 1007, 1009, 1010, 1011, 1012, 1017, 1020, 1024, 1025, 1027, 1028, 1032, 1033, 1034, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1051, 1052, 1053, 1054, 1056, 1060, 1067, 1068, 1069, 1070, 1071, 1076, 1080, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1096, 1097, 1111, 1114, 1115, 1116, 1119, 1120, 1121, 1125, 1126, 1129, 1130, 1131, 1134, 1138, 1140, 1141, 1142, 1143, 1144, 1147, 1149, 1153, 1154, 1157, 1160, 1161, 1162, 1166, 1168, 1174, 1177, 1178, 1182, 1183, 1184, 1185, 1190, 1192, 1193, 1198, 1199, 1200, 1201, 1205, 1210, 1211, 1214, 1216, 1218, 1224, 1227, 1229, 1231, 1237, 1246, 1250, 1254, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1275], "40": [36, 181, 190, 217, 234, 310, 419, 432, 463, 526, 666, 676, 775, 801, 831, 885, 891, 980, 1010, 1100, 1204, 1261, 1262, 1264, 1267], "400": [279, 310, 427, 428, 430, 854, 885, 1136, 1137, 1139, 1246, 1264], "4000000": [1018, 1246], "404": [635, 637, 1173, 1175], "4096": 1266, "41": [181, 310, 607, 775, 801, 885, 1262, 1275], "412277": 159, "414214": [625, 775, 1163, 1246, 1266], "4160": 51, "416147": 1269, "4164": [217, 310, 819, 885], "42": [51, 181, 203, 227, 242, 310, 591, 775, 801, 828, 836, 885, 1037, 1246, 1261, 1274], "424778": [580, 775], "428571": [440, 775, 1019, 1246], "429101": 1262, "4294967296": [41, 310], "43": [181, 242, 310, 384, 591, 607, 775, 801, 836, 885], "4321": 891, "433013": [604, 775, 847, 885], "434949": 1269, "44": [10, 227, 310, 390, 775, 828, 885], "4411": [217, 310, 819, 885], "44225": [946, 1246], "444": 10, "44444444444": 10, "45": [36, 181, 242, 310, 397, 419, 432, 591, 607, 630, 636, 674, 700, 718, 735, 761, 762, 775, 801, 836, 885, 891, 971, 997, 1010, 1168, 1174, 1213, 1266, 1267, 1269, 1273, 1275], "450": [1137, 1246], "4500000": 891, "456": [9, 10, 397, 891, 971, 1223, 1246], "456000": [397, 971], "456001\u00b5": 891, "4566": [217, 310, 819, 885], "456789": [891, 998], "456789\u00b5": 891, "456m": 891, "457658": 1269, "459148": [437, 775], "46": 891, "4696": [217, 310, 819, 885], "47": [47, 181, 310, 607, 775, 801, 885, 891], "470": [832, 885], "47033": [603, 775, 1141, 1246], "47033046033698594": [603, 775, 1141, 1246], "475": [832, 885], "48": [12, 159, 242, 310, 591, 676, 775, 836, 885, 891], "4827": [217, 310], "485": 1275, "49": [181, 310, 801, 885, 891], "492474": [441, 775, 1020, 1246], "4_500_000": 891, "4ab4a": 1267, "4d": [441, 775, 1020, 1246], "4f6228": [36, 310], "4f71": [36, 310], "4x": [214, 310], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 174, 175, 176, 181, 182, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 204, 205, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 229, 230, 231, 233, 235, 236, 237, 242, 245, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 271, 272, 274, 277, 278, 279, 280, 283, 284, 286, 287, 289, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 319, 320, 323, 338, 339, 344, 345, 346, 348, 350, 354, 359, 361, 367, 369, 370, 371, 374, 375, 385, 386, 387, 389, 390, 393, 396, 397, 398, 399, 400, 404, 407, 408, 409, 410, 414, 418, 420, 421, 422, 424, 425, 431, 435, 439, 441, 443, 444, 447, 449, 453, 454, 458, 459, 461, 464, 466, 468, 470, 473, 476, 477, 478, 479, 480, 484, 486, 493, 496, 497, 499, 500, 502, 505, 507, 508, 512, 513, 514, 515, 516, 517, 521, 522, 526, 532, 550, 552, 554, 566, 570, 571, 572, 573, 574, 575, 576, 578, 579, 581, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 604, 606, 607, 608, 609, 610, 613, 618, 624, 630, 639, 640, 643, 644, 645, 663, 667, 677, 679, 683, 684, 685, 697, 699, 700, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 715, 716, 718, 721, 722, 723, 724, 725, 729, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 754, 756, 758, 759, 760, 764, 771, 775, 793, 794, 795, 796, 797, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 825, 826, 832, 836, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 856, 857, 860, 861, 862, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 898, 900, 904, 907, 910, 911, 914, 916, 917, 918, 920, 922, 926, 931, 932, 933, 938, 940, 948, 950, 956, 960, 961, 962, 963, 964, 967, 970, 971, 972, 973, 974, 975, 985, 996, 998, 999, 1000, 1002, 1003, 1009, 1011, 1012, 1013, 1017, 1020, 1022, 1024, 1025, 1026, 1034, 1038, 1039, 1041, 1043, 1047, 1050, 1060, 1067, 1070, 1071, 1076, 1079, 1082, 1086, 1087, 1088, 1089, 1090, 1091, 1095, 1096, 1100, 1104, 1111, 1116, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1130, 1131, 1134, 1135, 1136, 1137, 1139, 1140, 1143, 1147, 1149, 1154, 1157, 1160, 1163, 1168, 1177, 1178, 1181, 1182, 1201, 1205, 1218, 1225, 1227, 1230, 1231, 1234, 1237, 1246, 1255, 1258, 1260, 1262, 1263, 1266, 1267, 1268, 1269, 1272, 1274, 1275], "50": [12, 27, 36, 181, 190, 200, 310, 375, 419, 432, 717, 775, 801, 885, 891, 950, 962, 1010, 1246, 1261], "500": [36, 279, 310, 399, 400, 404, 407, 409, 410, 414, 420, 422, 854, 885, 984, 986, 992, 1136, 1137, 1139, 1246], "5000": [272, 310, 1230, 1246], "50000": 130, "500000": [407, 984], "500000000": [414, 992], "5000555": 891, "500_000": [399, 400, 404, 407, 409, 410, 414, 420, 422], "500m": [984, 986, 992], "51": 891, "512": [41, 131, 214, 310, 367, 576, 775, 938, 1119, 1246], "51966": [667, 1205], "52": [284, 310, 433, 610, 775, 819, 857, 885], "523599": 1269, "527525": [1142, 1246], "53": [433, 1011, 1272], "533316061": 1254, "533_316_061": 1254, "54": [445, 775, 1058, 1246, 1266, 1275], "540": [387, 580, 775], "540302": 1269, "543": 9, "543081": [377, 775, 953, 1246], "5432": 131, "54321": 9, "544": 1275, "544705": 707, "549306": [904, 1246], "55": [36, 49, 310, 1267, 1268], "5555": 891, "55550": 891, "56": [123, 680, 775], "566371": [580, 775], "567": 27, "56789": [947, 1031, 1145, 1246], "57": [607, 775, 1145, 1246, 1269, 1275], "570796": [327, 329, 775, 899, 901, 1246, 1269], "575050513": [156, 159], "58": [235, 310], "581139": [962, 1246], "584963": [527, 775], "587401": [373, 775, 1266], "59": [123, 181, 310, 397, 410, 420, 454, 718, 761, 762, 763, 775, 801, 885, 891, 971, 988, 998], "59815": [445, 775, 1266], "5_000_555": 891, "5th": [36, 310], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 174, 177, 178, 182, 183, 184, 185, 186, 187, 189, 190, 193, 196, 197, 198, 199, 200, 202, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 232, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 253, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 274, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 293, 303, 304, 310, 313, 314, 319, 323, 344, 345, 346, 348, 354, 362, 370, 371, 383, 384, 390, 393, 397, 401, 411, 415, 416, 417, 427, 428, 430, 433, 434, 437, 439, 448, 449, 454, 455, 458, 464, 466, 468, 486, 487, 488, 497, 500, 513, 514, 515, 516, 520, 532, 533, 566, 570, 577, 580, 581, 582, 587, 589, 591, 593, 595, 597, 599, 601, 604, 606, 607, 608, 613, 624, 630, 634, 644, 645, 667, 677, 679, 684, 692, 694, 696, 703, 711, 712, 713, 715, 718, 722, 725, 731, 736, 737, 741, 754, 758, 771, 775, 793, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 810, 811, 812, 814, 815, 817, 818, 820, 822, 823, 830, 832, 834, 836, 837, 838, 840, 842, 843, 844, 845, 846, 849, 852, 853, 856, 857, 860, 861, 866, 876, 877, 885, 891, 914, 916, 917, 918, 920, 926, 948, 952, 954, 958, 959, 964, 967, 993, 1012, 1017, 1024, 1034, 1039, 1061, 1062, 1071, 1074, 1087, 1088, 1089, 1090, 1094, 1111, 1122, 1125, 1126, 1131, 1133, 1138, 1140, 1142, 1144, 1149, 1154, 1168, 1172, 1182, 1205, 1217, 1227, 1246, 1255, 1258, 1260, 1262, 1263, 1266, 1272, 1273, 1275], "60": [36, 126, 190, 235, 310, 404, 409, 410, 420, 431, 454, 607, 662, 775, 994, 998, 1009, 1127, 1200, 1246, 1269], "600": [279, 310, 427, 428, 430, 854, 885, 891], "60000": 407, "600000": 891, "60000000": 414, "60206": [528, 775, 1266], "605551": 756, "605551275463989": 756, "609438": 1266, "60_000": [399, 400, 404, 407, 409, 410, 414, 420, 422], "61": [235, 310], "625": [601, 775], "626172": [632, 1170], "63": [607, 775], "63204": 1275, "6331e16": [1219, 1246, 1269], "636253": 1269, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 171, 272, 310, 378, 552, 576, 775, 1119, 1246, 1266], "64030": [667, 1205], "642093": 1269, "647961": 159, "64bit": [151, 583, 775, 1127, 1246], "65": [1016, 1246], "650": [462, 569, 775], "65280": [667, 1205], "654": [27, 754, 846, 885], "65432": 1270, "65536": 1266, "66": [217, 279, 310, 607, 692, 775, 819, 854, 885, 1058, 1140, 1246], "663053": 123, "666": 891, "666000": 891, "666667": [181, 208, 281, 298, 310, 440, 740, 775, 801, 817, 855, 871, 885, 1019, 1246], "666f6f": [632, 1170], "678": [630, 636, 1168, 1174], "6789": [28, 891], "67890": 28, "686241": 1262, "69": [607, 775, 1058, 1246], "693147": [529, 775, 1101, 1103, 1246, 1266], "6_000_000": 1254, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 174, 177, 178, 179, 181, 183, 184, 186, 187, 189, 193, 196, 198, 202, 204, 206, 208, 216, 219, 221, 223, 225, 227, 228, 232, 235, 237, 239, 240, 242, 243, 245, 246, 247, 248, 250, 253, 255, 258, 259, 260, 261, 266, 268, 269, 270, 278, 280, 281, 282, 310, 314, 319, 323, 345, 346, 348, 357, 384, 396, 397, 401, 408, 416, 418, 419, 432, 434, 445, 458, 464, 468, 469, 486, 500, 513, 514, 515, 516, 570, 581, 587, 591, 606, 607, 624, 639, 666, 679, 703, 711, 712, 715, 718, 719, 725, 730, 736, 737, 754, 758, 775, 793, 798, 799, 801, 803, 805, 807, 810, 812, 814, 815, 817, 818, 822, 828, 830, 833, 834, 836, 837, 838, 842, 846, 849, 885, 891, 904, 917, 918, 920, 929, 970, 971, 975, 980, 985, 996, 997, 1010, 1012, 1023, 1042, 1057, 1074, 1087, 1088, 1089, 1090, 1130, 1131, 1143, 1149, 1177, 1204, 1246, 1255, 1260, 1262, 1263, 1266, 1268, 1272, 1275], "70": [181, 310, 692, 775, 801, 885, 1058, 1246], "700": [279, 310, 854, 885], "702963": [36, 310], "707107": [356, 442, 604, 605, 699, 775, 928, 1021, 1246, 1269], "712389": 1269, "714": 1275, "714286": [469, 775, 1042, 1246], "718281828459045": [10, 437, 527, 775, 1016, 1101, 1246], "718282": [445, 775, 1023, 1246, 1266], "720": [387, 580, 775], "7264": 1275, "732051": [1163, 1246], "7415e16": 159, "75": [36, 181, 310, 323, 570, 578, 593, 595, 597, 599, 604, 606, 608, 737, 775, 801, 885, 891, 962, 1039, 1058, 1123, 1246, 1269, 1275], "7500": [215, 310], "7508": 1275, "754": [685, 775], "754888": [437, 775], "761594": [681, 775, 1220, 1246], "7654": 891, "765431": 998, "7654321": 27, "76933c": [36, 310], "78": 9, "780": 9, "784": [217, 310], "785398": [331, 699, 700, 775, 903, 1246, 1269], "789": [10, 891], "79": [1058, 1246], "7d": 891, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 174, 177, 178, 179, 181, 183, 184, 185, 186, 187, 189, 193, 196, 198, 200, 204, 206, 213, 216, 217, 219, 220, 221, 223, 225, 228, 237, 239, 240, 242, 243, 245, 246, 247, 248, 250, 253, 255, 257, 258, 259, 261, 266, 268, 269, 270, 278, 281, 282, 284, 310, 323, 325, 337, 345, 346, 348, 381, 384, 385, 397, 458, 465, 468, 469, 494, 496, 500, 513, 514, 515, 516, 552, 570, 576, 587, 588, 592, 616, 622, 624, 646, 647, 662, 692, 697, 703, 707, 709, 712, 714, 722, 724, 729, 730, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 754, 756, 759, 760, 764, 775, 793, 798, 799, 801, 803, 804, 805, 807, 810, 812, 815, 818, 822, 823, 832, 834, 837, 838, 842, 846, 849, 857, 885, 891, 917, 918, 920, 954, 960, 980, 1039, 1042, 1057, 1068, 1070, 1074, 1087, 1088, 1089, 1090, 1119, 1131, 1134, 1135, 1138, 1140, 1142, 1144, 1184, 1185, 1200, 1246, 1254, 1255, 1260, 1262, 1263, 1266, 1267, 1268, 1272, 1275], "80": [36, 310], "800": [427, 428, 430], "8000": 131, "803065983": 123, "81": 1266, "814697265625": [1018, 1246], "816497": [258, 310], "8192": 129, "82": [217, 310, 819, 885], "8257e14": 1275, "83": [217, 310, 819, 885], "833": [217, 310], "833333": [298, 871], "848062": 1269, "848808": 159, "85": [36, 310, 1058, 1246, 1275], "850": [462, 569, 775], "8568409950394724": [1016, 1246], "8589934592": [616, 775], "86": 1275, "8601": 1267, "87": 1275, "876": 9, "88": [181, 310, 801, 885], "881374": [330, 775, 902, 1246], "888": [754, 846, 885], "8_000_000": 1254, "8a": [935, 936], "8nin": 1275, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 151, 179, 181, 193, 195, 204, 208, 219, 220, 235, 242, 244, 245, 248, 260, 261, 278, 282, 284, 303, 310, 319, 323, 325, 337, 345, 346, 348, 353, 355, 381, 384, 387, 397, 450, 458, 468, 474, 494, 500, 511, 519, 554, 570, 580, 587, 591, 592, 603, 606, 607, 618, 622, 636, 666, 674, 676, 705, 711, 712, 715, 718, 730, 763, 775, 801, 810, 815, 817, 822, 836, 838, 849, 857, 876, 885, 891, 912, 913, 917, 918, 920, 925, 927, 962, 975, 984, 986, 992, 997, 1010, 1011, 1048, 1057, 1068, 1074, 1085, 1093, 1131, 1135, 1141, 1143, 1145, 1157, 1174, 1204, 1213, 1246, 1254, 1255, 1260, 1263, 1272], "90": [181, 310, 666, 801, 885, 1204, 1269], "901234": [947, 1031, 1145, 1246], "909": [217, 310], "910": [217, 310, 636, 1174], "910t": [630, 636, 1168, 1174], "914": [217, 310], "9223372036854775807": [688, 775], "9223372036854775808": [530, 775], "927295": 1269, "928571": [443, 775, 1022, 1246], "93": [1058, 1246], "94": [320, 775], "9477376373212048": [1058, 1246], "95": [17, 320, 775, 891], "95b3d7": [36, 310], "96": [17, 181, 310, 320, 775, 801, 885, 1058, 1246], "961": 51, "963624": [442, 775, 1021, 1246], "963757": 1269, "964028": [235, 310], "96_067_179": 1254, "97": [17, 207, 310, 320, 775, 1058, 1246], "9774092659964970114": [463, 775], "978307200": [403, 977], "978307200000": 423, "978307200000000": [403, 423, 977, 1001], "978307200000000000": 1001, "978393600": [403, 977], "978393600000": 423, "978393600000000": [403, 423, 977, 1001], "978393600000000000": 1001, "978480000": [403, 977], "978480000000": 423, "978480000000000": [403, 423, 977, 1001], "978480000000000000": 1001, "98": [17, 207, 235, 310, 369, 457, 460, 623, 666, 683, 775, 1204], "987": 27, "987000": 891, "9876": 9, "987654": [27, 891], "987654321": 10, "9876543210": 123, "987m": 891, "988": 10, "99": [17, 36, 191, 192, 207, 210, 235, 279, 310, 320, 369, 447, 449, 457, 460, 623, 683, 765, 775, 808, 809, 854, 885, 1016, 1026, 1246, 1266], "9914e218": 159, "998347": [235, 310], "999": [396, 408, 891, 970, 985, 1264, 1275], "999000": 891, "999954": [235, 310], "999999": [672, 718, 761, 762, 763, 891, 1210], "999999\u00b5": 891, "9bbb59": [36, 310], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 178, 186, 195, 202, 216, 217, 222, 224, 229, 235, 260, 263, 278, 279, 280, 284, 285, 310, 318, 391, 392, 397, 421, 424, 438, 439, 447, 459, 461, 472, 475, 477, 478, 484, 524, 531, 532, 543, 556, 565, 566, 588, 593, 595, 597, 599, 601, 604, 606, 608, 628, 629, 630, 635, 636, 637, 638, 639, 640, 643, 645, 648, 649, 650, 652, 663, 672, 705, 721, 722, 726, 775, 799, 805, 814, 818, 819, 834, 854, 857, 858, 885, 891, 965, 966, 971, 999, 1002, 1026, 1136, 1137, 1139, 1142, 1143, 1144, 1166, 1167, 1168, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1183, 1186, 1187, 1188, 1190, 1201, 1210, 1246, 1254, 1255, 1258, 1270, 1272], "AND": [693, 694, 754, 891], "AS": [257, 310, 754, 755, 846, 885, 1254, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1274], "And": [670, 1208], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 193, 267, 272, 310, 524, 765, 810, 885], "At": [41, 235, 310], "BY": [754, 846, 885, 1254, 1257, 1263, 1271, 1272], "Be": 885, "By": [5, 12, 14, 30, 47, 129, 130, 143, 202, 216, 217, 242, 244, 253, 258, 280, 281, 310, 354, 415, 419, 432, 517, 520, 526, 586, 591, 594, 596, 598, 600, 602, 605, 607, 609, 615, 626, 690, 707, 709, 716, 717, 719, 720, 721, 735, 756, 762, 763, 764, 775, 796, 814, 818, 819, 836, 842, 847, 855, 885, 926, 993, 997, 1010, 1091, 1130, 1153, 1164, 1236, 1246], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 185, 190, 216, 217, 235, 242, 267, 296, 310, 313, 412, 413, 440, 442, 443, 454, 524, 533, 543, 583, 621, 628, 635, 636, 637, 639, 640, 663, 711, 721, 725, 726, 771, 775, 804, 819, 836, 869, 885, 889, 1019, 1021, 1022, 1025, 1105, 1127, 1160, 1166, 1173, 1174, 1175, 1177, 1178, 1201, 1225, 1246, 1250], "IF": 1265, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 171, 185, 190, 193, 200, 202, 204, 212, 213, 214, 217, 219, 220, 224, 231, 235, 242, 244, 245, 246, 250, 253, 255, 257, 260, 261, 264, 265, 267, 268, 274, 275, 277, 278, 279, 310, 322, 324, 347, 354, 359, 371, 393, 397, 398, 412, 413, 421, 424, 450, 465, 470, 482, 503, 512, 517, 518, 524, 532, 533, 539, 545, 546, 571, 576, 578, 581, 583, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 617, 621, 622, 627, 636, 637, 639, 640, 641, 642, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 669, 672, 689, 693, 695, 698, 702, 703, 706, 707, 710, 711, 716, 717, 719, 720, 721, 724, 725, 731, 732, 733, 735, 737, 747, 750, 751, 752, 757, 762, 763, 765, 766, 775, 796, 797, 804, 806, 810, 814, 818, 819, 823, 827, 834, 836, 840, 842, 844, 846, 851, 853, 854, 869, 879, 885, 889, 891, 896, 897, 919, 926, 931, 941, 950, 967, 971, 972, 990, 991, 999, 1002, 1025, 1038, 1039, 1043, 1057, 1058, 1060, 1077, 1086, 1091, 1092, 1098, 1105, 1123, 1125, 1127, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1149, 1151, 1153, 1156, 1160, 1161, 1165, 1174, 1175, 1177, 1178, 1179, 1180, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1207, 1210, 1218, 1221, 1225, 1227, 1235, 1246, 1254, 1255, 1257, 1264, 1272], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 188, 190, 193, 202, 217, 220, 231, 235, 242, 268, 277, 310, 532, 533, 591, 775, 797, 810, 814, 836, 853, 885, 1018, 1025, 1126, 1246], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 181, 227, 234, 257, 267, 272, 278, 279, 287, 296, 310, 313, 314, 385, 386, 419, 465, 533, 542, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 751, 752, 771, 775, 792, 796, 797, 801, 806, 823, 828, 846, 854, 861, 869, 885, 945, 960, 961, 997, 1039, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1150, 1225, 1230, 1246, 1250], "Its": [203, 310, 463, 775, 1037, 1246], "NO": 891, "NOT": [119, 213, 251, 310, 524, 541, 614, 775, 841, 885, 1272], "No": 20, "Not": [191, 310, 448, 477, 478, 775, 796, 808, 885, 1027, 1246], "ON": 1272, "OR": [695, 696, 810, 885, 891], "On": [685, 775, 821, 885], "One": [47, 181, 231, 267, 272, 310, 323, 570, 697, 708, 724, 730, 733, 740, 742, 745, 746, 755, 775, 801, 885, 891, 962, 1246], "Or": [201, 202, 217, 242, 256, 280, 289, 310, 441, 571, 591, 624, 716, 717, 719, 720, 762, 763, 765, 771, 775, 813, 814, 819, 836, 845, 862, 885, 1020, 1246], "That": [135, 823, 885], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 173, 181, 182, 184, 185, 186, 189, 190, 193, 200, 201, 202, 203, 208, 214, 217, 220, 227, 233, 235, 242, 243, 244, 245, 248, 249, 250, 257, 267, 268, 273, 276, 280, 284, 285, 287, 288, 289, 296, 310, 321, 362, 363, 364, 365, 369, 370, 386, 388, 391, 392, 393, 401, 411, 415, 416, 419, 421, 432, 433, 444, 447, 450, 454, 455, 463, 495, 499, 532, 533, 545, 571, 578, 581, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 618, 621, 627, 631, 632, 635, 640, 641, 642, 646, 647, 648, 649, 657, 658, 659, 660, 661, 662, 663, 673, 676, 683, 684, 703, 705, 723, 727, 735, 737, 751, 752, 753, 754, 757, 765, 767, 768, 770, 771, 775, 776, 777, 780, 782, 783, 784, 791, 796, 801, 802, 804, 806, 807, 810, 813, 814, 815, 817, 819, 822, 823, 828, 832, 836, 838, 839, 840, 846, 850, 852, 857, 858, 861, 862, 869, 885, 889, 890, 891, 895, 898, 934, 935, 936, 940, 949, 961, 962, 965, 966, 967, 975, 989, 993, 994, 997, 999, 1010, 1011, 1025, 1026, 1029, 1037, 1069, 1073, 1105, 1123, 1125, 1129, 1130, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1157, 1160, 1165, 1169, 1170, 1178, 1179, 1180, 1184, 1185, 1186, 1187, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1227, 1231, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1254, 1259, 1272, 1273, 1275], "Then": 148, "There": 1272, "These": [1, 36, 125, 131, 132, 168, 274, 310, 432, 774, 775, 889, 997, 1010], "To": [35, 54, 191, 310, 375, 391, 392, 448, 449, 628, 634, 635, 636, 639, 648, 649, 658, 659, 660, 661, 670, 775, 808, 885, 950, 965, 966, 1027, 1166, 1172, 1173, 1174, 1177, 1186, 1187, 1208, 1227, 1246, 1272], "Will": [53, 54, 796, 797, 806, 832, 843, 885, 1246], "With": [138, 212, 253, 310, 354, 517, 615, 775, 796, 842, 885, 926, 1057, 1091, 1153, 1246], "_": [1, 47, 51, 235, 265, 269, 310, 347, 503, 629, 636, 638, 644, 645, 650, 653, 654, 843, 885, 944, 1167, 1174, 1182, 1183, 1188, 1192, 1222, 1246], "__call__": 771, "__dataframe__": 117, "__enter__": 1272, "__exit__": 1272, "__getattr__": 771, "__getitem__": 673, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1272], "__name__": [215, 310], "_bar_": 726, "_btm_by_a": [370, 775], "_btm_by_b": [370, 775], "_by_ca": [370, 684, 775], "_by_cb": [370, 684, 775], "_df": [1, 48], "_diff": [284, 310, 857, 885], "_eager": [796, 885], "_expr": [1, 49], "_foo": 538, "_geventdataframeresult": [54, 797, 885], "_is_not_nan": [478, 775], "_is_odd": [248, 310, 838, 885], "_isnan": [477, 775], "_isnul": [480, 775], "_kwarg": [796, 885], "_ldf": 1, "_lf": 50, "_lower_boundari": [202, 310, 814, 885], "_max": [571, 775], "_mean_squar": [289, 862], "_min": [571, 775], "_not_nul": [479, 775], "_o": [644, 645, 1182, 1183], "_revers": [555, 559, 588, 775], "_right": [216, 217, 310, 818, 819, 885], "_suffix": 560, "_sum": [289, 862], "_top_by_a": [684, 775], "_top_by_b": [684, 775], "_train": [859, 885], "_upper_boundari": [202, 310, 814, 885], "_world": 726, "a1": [36, 48, 50, 310], "a101": 1275, "a123": [36, 310], "a2": [36, 48, 50, 310], "a_1": [654, 1192, 1222, 1246], "a_2": [1222, 1246], "a_3": [1222, 1246], "a_a": 755, "a_agg_list": [202, 310, 814, 885], "a_b_doubl": 722, "a_btm_by_a": [370, 775], "a_btm_by_b": [370, 775], "a_by_ca": [370, 684, 775], "a_by_cb": [370, 684, 775], "a_div_2": 1266, "a_div_5": 1266, "a_interpol": [469, 775], "a_is_even": [257, 310, 754, 846, 885], "a_isnul": [480, 775], "a_lag_": 705, "a_log2": 1266, "a_mod_2": 1266, "a_not_nul": [479, 775], "a_revers": [555, 559, 588, 775], "a_rol": 705, "a_suffix": 560, "a_times_2": [533, 775], "a_times_b": [532, 775], "a_top_by_a": [684, 775], "a_top_by_b": [684, 775], "a_txt": 755, "aa": [444, 628, 639, 723, 775, 891, 962, 1166, 1177, 1246, 1267], "aaa": [1, 36, 310, 628, 639, 673, 675, 891, 1166, 1177], "aaaa": [935, 936], "aabcdef": 659, "aad": [935, 936], "aag": 26, "aazz": 1267, "ab": [204, 219, 261, 284, 310, 673, 675, 775, 857, 885, 891, 1038, 1060, 1218, 1246, 1265, 1267], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 319, 636, 648, 658, 775, 891, 1174, 1186, 1187], "abc123": 1267, "abc456": [648, 1186, 1187, 1267], "abcabc": 649, "abcd": 1267, "abcdeff": 658, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 621, 628, 635, 636, 639, 648, 649, 775, 889, 1160, 1166, 1173, 1174, 1177, 1186, 1187, 1246, 1275], "abov": [36, 152, 217, 235, 310, 765], "abs_a": 1266, "absolut": [133, 144, 145, 152, 153, 154, 155, 318, 440, 442, 443, 775, 894, 1019, 1021, 1022, 1246, 1266], "acc": [711, 712, 725, 749], "accent": 891, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 173, 183, 201, 248, 249, 253, 256, 273, 284, 285, 289, 310, 319, 370, 375, 444, 470, 571, 585, 586, 624, 676, 684, 692, 694, 696, 701, 704, 705, 706, 714, 723, 739, 741, 744, 753, 757, 759, 765, 771, 775, 791, 803, 813, 838, 839, 842, 845, 850, 857, 858, 862, 885, 889, 890, 950, 1043, 1129, 1130, 1153, 1246], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 171, 177, 214, 243, 244, 257, 310, 637, 673, 798, 846, 859, 885, 890, 1175, 1275], "accord": [243, 310, 578, 716, 717, 719, 720, 762, 763, 775, 980, 1123, 1246], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 310, 415, 440, 442, 443, 775, 993, 1019, 1021, 1022, 1246], "accumul": [711, 712, 725, 749], "acg": 26, "achiev": [220, 235, 296, 310, 533, 645, 775, 1105, 1183, 1246], "aco": 1265, "acosd": 1265, "across": [36, 47, 132, 182, 203, 222, 224, 229, 250, 260, 310, 388, 463, 545, 694, 696, 711, 712, 714, 739, 741, 744, 759, 775, 802, 840, 885, 1037, 1246], "action": [35, 310], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 496, 636, 1070, 1174], "actual": [36, 119, 159, 163, 245, 310, 1155, 1246, 1267, 1274], "ad": [34, 36, 119, 134, 202, 257, 267, 272, 274, 279, 284, 285, 310, 325, 447, 539, 676, 711, 712, 754, 775, 814, 846, 854, 857, 858, 885, 891, 1026, 1225, 1230, 1246], "adbc": [34, 131, 132, 310], "adbc_driver_manag": 151, "adbc_ingest": [34, 310], "add": [35, 36, 130, 190, 202, 220, 284, 285, 286, 287, 310, 386, 557, 558, 559, 560, 578, 676, 721, 725, 765, 775, 814, 818, 857, 858, 859, 860, 861, 885, 1025, 1246], "add_calendar_dai": 721, "add_calendar_month": 721, "add_calendar_year": 721, "add_chart": [36, 310], "add_dai": 721, "add_format": [36, 310], "add_hour": 721, "add_milli": 721, "add_second": 721, "add_seri": [36, 310], "add_week": 721, "add_worksheet": [36, 310], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 185, 189, 201, 218, 233, 248, 249, 256, 269, 276, 284, 285, 289, 310, 319, 402, 444, 447, 571, 624, 628, 635, 636, 639, 648, 649, 673, 676, 701, 704, 705, 706, 723, 753, 754, 757, 771, 775, 807, 813, 838, 839, 845, 852, 857, 858, 862, 885, 891, 968, 976, 1026, 1166, 1173, 1174, 1177, 1186, 1187, 1228, 1246, 1250, 1255, 1272], "addition": [55, 243, 310, 891], "address": 636, "adjac": [36, 310], "adjust": [440, 442, 443, 621, 775, 1019, 1021, 1022, 1160, 1246], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 235, 310, 359, 524, 554, 557, 559, 561, 562, 931, 1098, 1275], "advantag": [36, 168, 234, 310], "advis": [36, 46, 85, 310], "aedt": 718, "aeiuo": [639, 1177], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 310], "afm": 145, "afoo": [859, 885], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 173, 190, 273, 276, 310, 369, 370, 444, 571, 581, 672, 683, 684, 775, 791, 850, 852, 885, 940, 1025, 1125, 1210, 1231, 1246, 1260], "afterward": [46, 765], "ag": [227, 310, 828, 885, 1273], "again": [533, 775], "against": [34, 93, 129, 131, 193, 257, 310, 496, 639, 754, 810, 846, 885, 1070, 1177, 1254, 1272, 1274, 1275], "agg": [201, 202, 235, 242, 310, 320, 370, 450, 452, 457, 460, 532, 533, 571, 623, 624, 684, 691, 737, 775, 796, 797, 806, 813, 814, 832, 836, 843, 885, 891], "agg_group": [728, 775], "agg_list": [532, 775], "aggreg": [129, 130, 133, 141, 195, 201, 202, 221, 223, 225, 228, 231, 235, 236, 237, 242, 258, 259, 278, 281, 289, 290, 292, 294, 310, 320, 450, 466, 532, 533, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 693, 694, 695, 696, 711, 712, 713, 714, 725, 730, 738, 739, 741, 743, 744, 749, 758, 759, 775, 814, 823, 824, 825, 826, 829, 830, 833, 836, 847, 848, 855, 862, 863, 865, 867, 885, 889, 1040, 1135, 1136, 1137, 1139, 1142, 1143, 1144, 1246, 1261, 1263, 1265, 1271], "aggregate_funct": [235, 310, 891], "aho": [629, 638, 650, 1167, 1176, 1188], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [172, 310, 326, 629, 638, 650, 697, 775, 790, 885, 1167, 1176, 1188], "alia": [1, 12, 47, 49, 51, 83, 177, 202, 219, 235, 242, 276, 284, 287, 310, 319, 323, 363, 364, 365, 366, 368, 369, 380, 381, 382, 383, 384, 386, 389, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 431, 432, 433, 434, 435, 438, 439, 452, 454, 459, 461, 467, 470, 473, 476, 484, 486, 508, 520, 526, 531, 533, 537, 539, 541, 543, 547, 550, 552, 554, 565, 566, 570, 572, 576, 578, 581, 583, 611, 613, 628, 629, 630, 631, 633, 635, 636, 638, 639, 640, 644, 645, 650, 651, 652, 653, 654, 655, 656, 660, 661, 663, 673, 674, 675, 677, 682, 683, 685, 691, 692, 698, 699, 700, 704, 705, 706, 716, 719, 721, 722, 725, 726, 731, 734, 736, 737, 749, 757, 762, 765, 775, 814, 816, 822, 836, 852, 857, 861, 885, 961, 968, 969, 972, 975, 976, 977, 978, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1060, 1123, 1128, 1173, 1174, 1192, 1193, 1246], "alias": [257, 310, 539, 846, 885], "alic": [129, 1273], "align": [10, 15, 16, 36, 47, 55, 310, 1273], "align_fram": 55, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 172, 174, 181, 183, 185, 192, 204, 209, 211, 213, 214, 215, 216, 218, 219, 224, 226, 230, 231, 235, 238, 243, 244, 245, 249, 255, 256, 260, 261, 265, 267, 268, 272, 275, 277, 278, 279, 280, 285, 287, 310, 323, 325, 347, 362, 370, 379, 385, 391, 392, 393, 394, 444, 449, 455, 462, 463, 466, 468, 472, 475, 479, 480, 485, 495, 496, 503, 521, 524, 532, 551, 554, 555, 557, 558, 559, 560, 561, 562, 569, 581, 586, 588, 592, 616, 622, 624, 630, 636, 637, 640, 643, 649, 657, 658, 659, 663, 684, 694, 703, 711, 712, 713, 714, 723, 725, 730, 731, 734, 741, 749, 757, 758, 759, 765, 771, 775, 781, 787, 790, 793, 796, 797, 801, 803, 804, 806, 809, 818, 823, 827, 832, 839, 843, 844, 845, 851, 853, 854, 858, 859, 861, 885, 891, 919, 960, 962, 965, 966, 967, 968, 1038, 1044, 1056, 1060, 1069, 1070, 1077, 1095, 1098, 1125, 1130, 1135, 1161, 1168, 1174, 1175, 1178, 1181, 1187, 1195, 1196, 1197, 1201, 1218, 1227, 1246, 1255, 1257, 1262, 1263, 1267, 1271, 1272, 1274, 1275], "all_compat": 1257, "all_data": 1272, "all_horizont": [185, 310, 693, 804, 885], "all_stat": 30, "alloc": [129, 130, 188, 238, 310, 775, 889, 1018, 1246], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 171, 214, 217, 218, 243, 244, 246, 268, 269, 272, 275, 288, 310, 415, 421, 424, 512, 532, 533, 539, 583, 612, 662, 664, 665, 775, 818, 819, 823, 827, 851, 859, 885, 889, 891, 993, 999, 1002, 1086, 1105, 1127, 1147, 1200, 1202, 1203, 1227, 1228, 1246, 1267, 1275], "allow_alias": 539, "allow_chunk": [159, 163], "allow_copi": [117, 171, 268, 310, 1227, 1246], "allow_dupl": [578, 775, 1123, 1246], "allow_infin": [159, 163], "allow_nul": [156, 159, 163, 1275], "allow_object": 735, "allow_parallel": [217, 310, 818, 819, 885], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1275], "almost": [54, 220, 296, 310, 662, 664, 665, 797, 885, 1105, 1200, 1202, 1203, 1246], "alpha": [440, 442, 443, 775, 806, 832, 843, 885, 891, 1019, 1021, 1022, 1246], "alpha_i": [441, 775, 1020, 1246], "alphabet": [891, 1275], "alphanumer": [670, 891, 1208], "alreadi": [34, 35, 92, 267, 310, 385, 496, 689, 775, 843, 885, 960, 1070, 1235, 1246], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 186, 201, 202, 227, 231, 235, 242, 244, 248, 256, 267, 279, 284, 287, 310, 381, 384, 393, 415, 418, 450, 470, 533, 539, 581, 585, 586, 624, 648, 649, 657, 658, 673, 703, 711, 712, 715, 718, 725, 727, 749, 765, 774, 775, 781, 813, 814, 828, 836, 838, 845, 854, 857, 859, 861, 885, 891, 967, 996, 1043, 1125, 1129, 1130, 1168, 1186, 1187, 1195, 1246, 1250, 1255, 1257, 1260, 1267, 1270, 1272, 1273], "altern": [36, 310, 771, 1264], "although": [257, 310, 846, 885], "alwai": [13, 33, 35, 42, 63, 65, 129, 173, 193, 201, 216, 217, 220, 273, 296, 310, 369, 370, 532, 542, 662, 683, 684, 765, 775, 791, 810, 818, 819, 823, 850, 885, 891, 940, 1105, 1200, 1231, 1246, 1254, 1255, 1272, 1275], "am": [651, 1189], "amarillo": 1267, "ambigu": [418, 419, 432, 662, 665, 718, 996, 997, 1010, 1200, 1203], "america": 719, "amount": [46, 64, 85, 139, 143, 146, 147, 533, 721, 775, 1262], "amsterdam": [418, 996], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 174, 175, 176, 177, 183, 188, 191, 195, 197, 202, 213, 214, 215, 217, 220, 231, 235, 240, 242, 243, 247, 257, 262, 268, 272, 274, 278, 279, 284, 287, 296, 310, 321, 343, 346, 358, 364, 381, 382, 383, 384, 385, 386, 393, 397, 398, 415, 418, 421, 435, 441, 449, 450, 456, 457, 460, 493, 496, 499, 501, 523, 524, 532, 533, 543, 545, 554, 555, 576, 577, 578, 586, 587, 591, 592, 593, 595, 597, 599, 601, 604, 606, 608, 627, 628, 631, 636, 639, 642, 662, 664, 665, 667, 669, 685, 693, 698, 702, 716, 717, 719, 720, 722, 724, 727, 731, 732, 733, 734, 735, 747, 749, 750, 753, 757, 762, 763, 765, 766, 771, 775, 793, 794, 795, 797, 801, 803, 806, 810, 814, 819, 823, 832, 836, 837, 843, 846, 854, 857, 859, 861, 869, 885, 889, 890, 891, 915, 918, 930, 935, 949, 951, 956, 957, 958, 959, 960, 967, 971, 999, 1013, 1018, 1020, 1057, 1067, 1070, 1073, 1075, 1097, 1105, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1148, 1150, 1165, 1166, 1169, 1174, 1177, 1180, 1200, 1202, 1203, 1205, 1207, 1227, 1246, 1263, 1264, 1267, 1271, 1272, 1274], "ana": [651, 1189], "anan": [651, 1189], "ananab": 1267, "and_": 775, "ang": 1267, "angl": [699, 700], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 173, 179, 185, 190, 192, 193, 195, 197, 212, 214, 215, 216, 217, 220, 224, 234, 243, 244, 245, 257, 260, 263, 264, 267, 268, 269, 272, 273, 275, 278, 279, 287, 310, 313, 314, 319, 322, 323, 347, 369, 370, 371, 385, 386, 419, 420, 438, 439, 449, 450, 454, 457, 459, 461, 465, 474, 484, 491, 496, 503, 531, 532, 533, 539, 547, 550, 552, 554, 555, 557, 559, 561, 562, 565, 566, 570, 575, 578, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 627, 629, 641, 658, 659, 660, 661, 662, 664, 665, 667, 669, 677, 683, 684, 685, 692, 693, 694, 696, 706, 707, 708, 735, 737, 751, 752, 765, 775, 791, 796, 797, 804, 806, 809, 810, 818, 819, 831, 846, 850, 851, 854, 861, 885, 889, 891, 896, 919, 940, 945, 960, 961, 997, 998, 1025, 1028, 1032, 1039, 1048, 1057, 1065, 1070, 1077, 1105, 1123, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1165, 1167, 1179, 1200, 1202, 1203, 1205, 1207, 1225, 1226, 1227, 1228, 1230, 1231, 1246, 1250, 1272, 1275], "anna": [227, 310, 828, 885], "anoth": [86, 158, 174, 182, 187, 201, 217, 250, 310, 385, 388, 395, 469, 499, 537, 541, 545, 585, 594, 596, 598, 600, 602, 605, 607, 609, 639, 775, 793, 802, 813, 840, 859, 885, 960, 969, 1017, 1025, 1042, 1073, 1129, 1130, 1177, 1246, 1266, 1267], "anti": [216, 310, 818, 869, 885, 1148, 1150, 1246, 1261], "any_horizont": 695, "anyth": [35, 243, 310], "anywher": [366, 368, 662, 664, 665, 1200, 1202, 1203], "ap": 1267, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 170, 310, 893], "apaya": [663, 1201], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 171, 220, 296, 310, 533, 737, 775, 869, 1105, 1246, 1271], "apia": [394, 968], "app": [656, 1194], "appear": [36, 59, 119, 154, 155, 310, 687, 775, 891, 1233, 1246, 1273], "append": [34, 35, 159, 190, 216, 217, 310, 582, 765, 775, 818, 819, 885, 1025, 1246], "appl": [178, 206, 216, 239, 240, 263, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 310, 370, 588, 633, 656, 684, 775, 818, 834, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 885, 1171, 1194, 1261, 1267], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 181, 195, 220, 234, 256, 257, 267, 296, 310, 335, 396, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 414, 416, 417, 420, 422, 433, 434, 436, 442, 443, 532, 533, 575, 593, 594, 595, 596, 599, 600, 606, 607, 624, 648, 649, 662, 664, 665, 669, 701, 711, 712, 725, 736, 737, 749, 754, 765, 775, 801, 815, 822, 823, 831, 845, 846, 869, 885, 950, 970, 973, 974, 975, 978, 979, 980, 984, 985, 986, 988, 989, 992, 994, 995, 998, 1000, 1011, 1012, 1014, 1021, 1022, 1105, 1136, 1137, 1139, 1143, 1186, 1187, 1200, 1202, 1203, 1207, 1246, 1254], "applic": [268, 310, 533, 775], "appropri": [36, 149, 193, 268, 310, 581, 775, 810, 885, 1125, 1246], "approx": [326, 775], "approx_n_uniqu": [310, 775, 885], "approxim": [41, 172, 310, 326, 441, 697, 775, 790, 885, 1020, 1246, 1266, 1275], "april": [421, 424, 999, 1002, 1267, 1268], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 171, 173, 179, 181, 185, 188, 191, 193, 194, 195, 200, 201, 202, 214, 216, 217, 218, 220, 226, 227, 233, 235, 242, 243, 244, 245, 248, 249, 251, 253, 256, 263, 267, 268, 269, 272, 273, 277, 279, 280, 284, 285, 288, 289, 310, 322, 324, 338, 354, 359, 369, 370, 375, 381, 383, 384, 393, 419, 432, 437, 439, 440, 441, 442, 443, 448, 450, 470, 472, 474, 475, 477, 478, 479, 480, 482, 487, 517, 524, 532, 566, 571, 578, 581, 584, 585, 586, 587, 591, 594, 596, 598, 600, 602, 603, 605, 607, 609, 615, 618, 621, 623, 624, 637, 640, 642, 643, 646, 647, 648, 649, 652, 663, 665, 667, 672, 676, 678, 683, 684, 693, 694, 696, 701, 704, 705, 706, 707, 710, 714, 716, 717, 719, 720, 739, 741, 744, 753, 757, 759, 762, 763, 765, 767, 768, 770, 774, 775, 776, 777, 780, 781, 782, 783, 784, 787, 791, 796, 797, 801, 804, 808, 810, 813, 814, 815, 818, 819, 822, 823, 827, 828, 832, 834, 836, 838, 839, 841, 842, 845, 850, 853, 854, 857, 858, 859, 862, 885, 889, 891, 896, 897, 910, 926, 931, 940, 943, 950, 958, 959, 967, 997, 1010, 1016, 1018, 1019, 1020, 1021, 1022, 1027, 1029, 1030, 1043, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1058, 1061, 1091, 1098, 1123, 1125, 1129, 1130, 1131, 1141, 1153, 1157, 1160, 1175, 1178, 1180, 1184, 1185, 1186, 1187, 1190, 1201, 1203, 1205, 1210, 1217, 1225, 1227, 1228, 1231, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1255, 1257, 1260, 1264, 1272, 1275], "arbitrari": [74, 197, 310, 388, 775, 802, 885, 891], "arbitrarili": [220, 310], "arcco": [775, 1246], "arccosh": [775, 1246], "arcsin": [775, 1246], "arcsinh": [775, 1246], "arctan": [699, 700, 775, 1246], "arctan2": 700, "arctanh": [775, 1246], "aren": [33, 42, 310, 885], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 193, 234, 310, 335, 575, 701, 726, 775, 810, 831, 885, 889, 1105, 1246, 1258], "arg_max": [775, 1246], "arg_min": [775, 1246], "arg_sort": [775, 1246], "arg_tru": [702, 775, 1246], "arg_uniqu": [775, 1246], "arg_wher": [336, 775], "argmax": [532, 775], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 179, 183, 189, 201, 202, 217, 233, 234, 242, 248, 249, 256, 269, 276, 280, 284, 285, 289, 310, 419, 432, 444, 450, 470, 532, 571, 575, 591, 624, 657, 658, 659, 676, 693, 699, 700, 701, 704, 705, 706, 708, 710, 723, 753, 757, 765, 771, 775, 803, 807, 813, 814, 831, 836, 838, 839, 845, 852, 857, 858, 862, 885, 889, 891, 997, 1010, 1043, 1195, 1196, 1197, 1228, 1246, 1266, 1267], "aris": 131, "arithmet": [195, 310], "arm": 151, "arm64": 151, "around": [33, 42, 310, 885], "arr": [268, 310, 767, 1227, 1238, 1246], "arr_bar": 1263, "arr_foo": 1263, "arrai": [116, 120, 129, 130, 133, 141, 188, 189, 262, 267, 268, 269, 310, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 381, 382, 383, 384, 491, 506, 507, 508, 509, 511, 520, 521, 523, 526, 528, 532, 587, 593, 595, 597, 599, 601, 604, 606, 608, 614, 722, 754, 775, 807, 885, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 956, 957, 958, 959, 964, 1018, 1065, 1080, 1081, 1082, 1083, 1085, 1093, 1094, 1095, 1097, 1100, 1102, 1103, 1131, 1136, 1137, 1139, 1142, 1143, 1144, 1151, 1155, 1221, 1225, 1227, 1228, 1246, 1265, 1271, 1274], "array_agg": 1265, "array_contain": 1265, "array_get": 1265, "array_length": 1265, "array_low": 1265, "array_mean": 1265, "array_revers": 1265, "array_sum": 1265, "array_to_str": 1265, "array_uniqu": 1265, "array_upp": 1265, "arraylik": [964, 1246], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 170, 214, 244, 245, 262, 264, 268, 310, 885, 893, 1221, 1227, 1246], "arrowinvaliderror": [35, 310], "as_dict": [130, 233, 310], "as_expr": 891, "as_seri": [174, 263, 310, 793, 885, 891], "ascend": [202, 242, 310, 591, 775, 814, 836, 885], "ascii": [7, 20, 629, 638, 640, 644, 645, 650, 652, 663, 672, 891, 1167, 1176, 1178, 1182, 1183, 1188, 1190, 1201, 1210], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [629, 638, 650, 1167, 1176, 1188], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1275, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 891, "ascii_uppercas": [278, 310], "asd": [630, 636, 1168, 1174], "asia": [123, 891, 973, 974, 1000], "asin": 1265, "asind": 1265, "asof": [217, 310, 819, 885], "asof_join": [217, 310], "asofjoinstrategi": [217, 310, 819, 885], "assert": [152, 153, 154, 155, 159, 163, 242, 310, 787, 891], "assert_frame_equ": [153, 154, 187, 310, 1275], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1017, 1246, 1275], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 202, 295, 310, 359, 524, 571, 581, 654, 655, 775, 814, 868, 885, 931, 1098, 1125, 1192, 1193, 1246], "associ": [34, 36, 47, 132, 134, 158, 161, 245, 310, 890, 1256, 1258], "assum": [245, 310, 823, 869, 885, 1267], "assumpt": [532, 775], "async": [131, 797, 885], "async_engin": 131, "asynchron": [54, 131, 797, 885], "asyncio": [54, 131, 797, 885], "asyncresult": [54, 797, 885], "ata": 26, "atan": 1265, "atan2": [699, 700, 1265], "atan2_ab": 1269, "atan2d": [700, 1265], "atan2d_ab": 1269, "atand": 1265, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [624, 775], "attempt": [1, 388, 775, 802, 885], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 310, 767, 768, 770, 771, 776, 777, 780, 782, 783, 784, 885, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253], "attributeerror": 1, "audi": [263, 310, 588, 775], "australia": 718, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 310], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 274, 310, 885, 1275], "auto_structifi": [248, 284, 310, 838, 857, 885], "autofilt": [36, 310], "autofit": [36, 310], "autogener": [129, 130, 134, 140, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 248, 257, 284, 310, 532, 586, 657, 658, 659, 754, 775, 838, 846, 857, 885, 889, 1129, 1130, 1195, 1196, 1197, 1230, 1246, 1255, 1257, 1260, 1272], "autumn": [648, 649], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 235, 257, 309, 310, 581, 754, 767, 768, 770, 774, 775, 776, 777, 780, 781, 782, 783, 784, 787, 846, 883, 884, 885, 889, 891, 962, 1125, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253], "available_timezon": [62, 891], "averag": [36, 310, 440, 441, 442, 443, 581, 775, 1019, 1020, 1021, 1022, 1125, 1246, 1262], "avg": 1265, "avocado": 1267, "avoid": [133, 159, 163, 193, 244, 310, 321, 775, 810, 885], "avro": [31, 127, 310, 787], "avrocompress": [31, 310], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1266, "await": [54, 131, 797, 880, 885], "awar": [10, 131, 214, 244, 245, 264, 310, 441, 629, 638, 650, 665, 775, 885, 1020, 1167, 1176, 1188, 1203, 1246], "aws_access_key_id": [35, 133, 144, 148, 310], "aws_region": [35, 144, 148, 310], "aws_secret_access_kei": [35, 133, 144, 148, 310], "axi": [226, 277, 310, 699, 700, 827, 853, 885], "aya": [652, 1190, 1201], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 310], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 171, 172, 173, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 253, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 310, 319, 321, 322, 324, 325, 335, 337, 342, 347, 362, 363, 364, 365, 366, 367, 368, 370, 371, 379, 386, 390, 421, 424, 444, 446, 448, 449, 450, 452, 455, 462, 463, 466, 468, 469, 470, 472, 475, 477, 478, 479, 480, 485, 491, 496, 503, 513, 514, 515, 516, 532, 533, 538, 545, 551, 554, 555, 556, 557, 558, 559, 560, 568, 569, 571, 575, 578, 581, 585, 586, 588, 590, 616, 622, 624, 631, 634, 639, 642, 648, 649, 673, 674, 684, 687, 691, 693, 694, 695, 696, 697, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 722, 723, 724, 725, 726, 729, 730, 731, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 751, 752, 754, 756, 757, 758, 759, 760, 764, 771, 775, 790, 791, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 895, 898, 919, 934, 935, 936, 937, 938, 939, 943, 944, 945, 961, 964, 999, 1002, 1016, 1017, 1018, 1025, 1028, 1043, 1048, 1065, 1087, 1088, 1089, 1090, 1123, 1128, 1169, 1172, 1177, 1180, 1186, 1187, 1211, 1213, 1214, 1216, 1228, 1233, 1246, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1267, 1268, 1269, 1272], "b1": [48, 50], "b2": [48, 50], "b345": [36, 310], "b4": [36, 310], "b_b": [257, 310], "b_btm_by_a": [370, 775], "b_btm_by_b": [370, 775], "b_by_ca": [370, 684, 775], "b_by_cb": [370, 684, 775], "b_is_not_nan": [478, 775], "b_isnan": [477, 775], "b_isnul": [480, 775], "b_not_nul": [479, 775], "b_revers": [555, 559, 588, 775], "b_suffix": 560, "b_sum": [289, 862], "b_top_by_a": [684, 775], "b_top_by_b": [684, 775], "ba": [388, 444, 545, 656, 723, 775, 891], "back": [4, 47, 148, 190, 202, 250, 268, 269, 310, 545, 571, 775, 796, 814, 840, 885, 1025, 1228, 1246], "backend": [35, 131, 132, 133, 144, 145, 310], "background": [310, 314, 796, 884, 885], "backward": [41, 45, 192, 217, 310, 362, 393, 413, 449, 775, 809, 819, 885, 967, 991, 1028, 1246], "backward_fil": [455, 615, 775], "bad": [648, 649, 1186, 1187], "balanc": [162, 164, 1275], "ballon_dor": [635, 637, 1173, 1175], "banana": [178, 263, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 370, 588, 633, 656, 684, 775, 865, 867, 870, 871, 872, 873, 874, 875, 876, 1267], "banded_column": [36, 310], "banded_row": [36, 310], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 174, 177, 178, 179, 183, 184, 185, 186, 187, 190, 193, 195, 197, 198, 199, 204, 206, 207, 208, 210, 216, 219, 220, 221, 222, 223, 224, 225, 228, 229, 232, 235, 237, 239, 240, 243, 246, 247, 248, 250, 255, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 275, 276, 281, 282, 283, 288, 310, 372, 388, 467, 537, 539, 541, 542, 543, 544, 545, 546, 547, 621, 630, 632, 634, 636, 637, 651, 653, 655, 660, 661, 697, 707, 708, 709, 724, 729, 730, 733, 734, 738, 740, 742, 743, 745, 746, 753, 756, 760, 764, 765, 771, 775, 793, 798, 799, 803, 804, 805, 810, 816, 817, 818, 830, 834, 837, 838, 851, 852, 856, 885, 890, 891, 942, 1077, 1160, 1168, 1170, 1172, 1174, 1175, 1189, 1193, 1198, 1199, 1246, 1259, 1261, 1262, 1263, 1264, 1267, 1270], "bar2": 1267, "bar22": [195, 310], "bar_": 653, "bar_3": [265, 310], "bar_4": [265, 310], "bar_a": [235, 310], "bar_at_2": 1263, "bar_avg": 1262, "bar_b": [235, 310], "bar_color": [36, 310], "bar_max": 1262, "bar_median": 1262, "bar_min": 1262, "bar_negative_border_color_sam": [36, 310], "bar_negative_color_sam": [36, 310], "bar_std": 1262, "bar_sum": 1262, "bar_var": 1262, "bare": [539, 891], "base": [36, 60, 102, 104, 161, 185, 193, 202, 242, 310, 394, 402, 437, 440, 441, 442, 443, 450, 465, 469, 527, 528, 532, 533, 576, 578, 586, 591, 594, 596, 598, 600, 602, 605, 607, 609, 667, 775, 804, 810, 814, 836, 885, 891, 968, 976, 1016, 1019, 1020, 1021, 1022, 1039, 1042, 1101, 1102, 1105, 1123, 1129, 1130, 1205, 1237, 1246, 1261, 1266, 1275], "base64": [364, 365, 631, 632, 935, 936, 1169, 1170], "base_nam": [274, 310], "base_utc_offset": [402, 976], "baseexcept": 1272, "basi": [36, 134, 159, 310], "basic": [36, 310, 1275], "basic_chart": [36, 310], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 244, 272, 310, 796, 797, 823, 885], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 272, 310, 885], "batchedcsvread": 130, "baz": [197, 207, 208, 276, 310, 637, 653, 655, 724, 733, 746, 771, 817, 852, 885, 891, 1175, 1193, 1259, 1264, 1267], "bb": [891, 962, 1246, 1267, 1272], "bbb": [1, 36, 310, 673, 675, 891], "bc": [639, 649, 758, 1177], "bcbc45": 1267, "bea": 12, "bear": 891, "beauti": 12, "becaus": [139, 147, 188, 202, 218, 220, 278, 296, 310, 454, 496, 775, 814, 869, 885, 1018, 1070, 1105, 1246], "becom": [161, 309, 883, 884], "bed3": [36, 310], "been": [5, 30, 36, 166, 171, 291, 310, 456, 533, 548, 581, 775, 864, 1125, 1246], "beetl": [263, 310, 588, 775], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 190, 202, 217, 257, 267, 272, 276, 310, 383, 384, 385, 532, 571, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 634, 672, 678, 705, 751, 752, 775, 814, 816, 819, 852, 885, 889, 958, 959, 960, 1025, 1119, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1172, 1210, 1217, 1246, 1261], "beforehand": [662, 664, 665, 1200, 1202, 1203], "begin": [12, 36, 310, 440, 442, 443, 635, 663, 775, 1019, 1021, 1022, 1173, 1201, 1246], "behav": [193, 310, 450, 533, 658, 659, 775, 810, 885], "behavior": [41, 45, 185, 193, 216, 217, 310, 346, 456, 499, 501, 634, 724, 733, 775, 804, 810, 818, 819, 885, 918, 1073, 1075, 1172], "behaviour": [10, 47, 55, 185, 257, 310, 628, 635, 636, 639, 648, 649, 685, 754, 775, 804, 846, 885, 1166, 1173, 1174, 1177, 1186, 1187], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 134, 140, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 174, 189, 257, 265, 267, 272, 278, 279, 310, 313, 314, 385, 386, 419, 465, 533, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 634, 703, 722, 751, 752, 775, 793, 796, 797, 806, 807, 846, 854, 885, 945, 960, 961, 997, 1039, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1172, 1222, 1225, 1230, 1246, 1250, 1275], "belong": [1, 202, 310, 814, 885], "below": [19, 35, 133, 134, 144, 145, 185, 193, 235, 310, 449, 640, 663, 716, 717, 719, 720, 762, 763, 765, 771, 775, 804, 810, 885, 1178, 1201], "benchmark": 129, "best": [220, 296, 310, 533, 775, 1105, 1246], "better": [220, 267, 268, 296, 310, 533, 645, 775, 792, 869, 885, 1148, 1150, 1183, 1246], "between": [24, 55, 87, 156, 157, 159, 163, 179, 237, 244, 302, 310, 347, 371, 389, 390, 470, 494, 503, 513, 514, 515, 516, 572, 578, 579, 601, 602, 627, 641, 699, 700, 703, 707, 709, 748, 751, 752, 775, 833, 875, 885, 919, 941, 944, 963, 964, 1043, 1068, 1077, 1087, 1088, 1089, 1090, 1119, 1123, 1124, 1140, 1165, 1179, 1246, 1269], "between_ab": [470, 775], "beyond": [670, 1208], "bia": [442, 443, 482, 603, 621, 775, 1021, 1022, 1058, 1141, 1160, 1246], "bias": [482, 621, 775, 1058, 1160, 1246], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [386, 465, 578, 667, 692, 768, 775, 961, 1039, 1123, 1205, 1240, 1246], "bin_count": [465, 775, 1039, 1246], "bin_i": [692, 775], "bin_x": [692, 775], "bin_xor_xi": [692, 775], "binari": [37, 131, 182, 250, 310, 363, 364, 365, 366, 367, 368, 388, 545, 631, 775, 802, 840, 885, 891, 934, 935, 937, 938, 939, 1169], "binary_str": [692, 775], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 583, 628, 775, 1127, 1166, 1246, 1267], "bit_length": 1265, "bitmap": [188, 310, 1018, 1246], "bitwis": [323, 570, 692, 693, 694, 695, 696, 775], "bla": [630, 636, 1168, 1174], "black": [220, 310, 363, 364, 365, 366, 368], "blindli": [496, 1070], "block": [20, 54, 201, 275, 310, 765, 797, 813, 834, 851, 860, 861, 869, 885, 1148, 1150, 1246], "blue": [46, 84, 85, 363, 364, 365, 366, 368, 689, 775, 1235, 1246], "bob": [129, 227, 310, 828, 885, 1273], "bodi": [36, 310, 314], "bold": [36, 310], "bom": [33, 42, 310, 885], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 171, 173, 174, 175, 176, 181, 183, 187, 192, 193, 194, 195, 199, 200, 201, 202, 206, 207, 209, 210, 211, 214, 216, 217, 224, 233, 235, 243, 244, 245, 246, 251, 254, 256, 257, 260, 263, 265, 268, 269, 273, 274, 275, 276, 279, 280, 282, 284, 292, 294, 297, 300, 310, 321, 322, 323, 324, 325, 335, 338, 339, 342, 346, 347, 355, 360, 363, 364, 366, 368, 370, 371, 380, 381, 382, 383, 384, 385, 386, 393, 405, 420, 437, 438, 439, 440, 442, 443, 459, 461, 462, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 492, 496, 499, 501, 503, 512, 519, 525, 531, 532, 533, 537, 538, 539, 540, 541, 542, 546, 565, 566, 568, 570, 573, 574, 578, 581, 583, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 612, 614, 616, 621, 623, 624, 627, 628, 629, 630, 631, 633, 638, 639, 641, 648, 649, 650, 653, 654, 656, 662, 664, 665, 667, 669, 673, 675, 684, 686, 689, 692, 693, 694, 695, 696, 698, 701, 702, 703, 706, 707, 710, 711, 716, 717, 719, 720, 731, 732, 735, 737, 747, 750, 754, 757, 762, 763, 765, 766, 775, 791, 793, 794, 796, 797, 801, 803, 806, 809, 810, 813, 814, 818, 819, 823, 827, 832, 841, 843, 845, 846, 850, 851, 852, 853, 854, 857, 865, 867, 870, 873, 885, 889, 891, 896, 897, 907, 910, 911, 914, 918, 919, 927, 932, 934, 935, 937, 939, 941, 943, 945, 949, 955, 956, 957, 958, 959, 960, 961, 967, 979, 998, 1016, 1017, 1019, 1021, 1022, 1029, 1030, 1035, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1066, 1070, 1073, 1075, 1077, 1086, 1093, 1099, 1105, 1117, 1120, 1121, 1123, 1125, 1126, 1127, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1150, 1151, 1155, 1160, 1162, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1179, 1186, 1187, 1188, 1191, 1192, 1194, 1200, 1202, 1203, 1205, 1207, 1222, 1227, 1228, 1232, 1235, 1246, 1254, 1255, 1257, 1263, 1267, 1272], "boolean": [47, 159, 173, 193, 195, 256, 273, 310, 322, 323, 324, 338, 339, 342, 363, 366, 368, 370, 405, 450, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 488, 492, 568, 570, 573, 574, 624, 642, 684, 691, 692, 701, 702, 757, 765, 775, 791, 810, 845, 850, 885, 891, 896, 897, 908, 910, 911, 914, 934, 979, 1029, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1061, 1062, 1066, 1117, 1120, 1121, 1150, 1166, 1237, 1246, 1264], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 148, 177, 202, 216, 217, 227, 242, 243, 269, 279, 310, 325, 375, 386, 444, 470, 578, 591, 594, 596, 598, 600, 602, 605, 607, 609, 652, 716, 717, 719, 720, 762, 763, 771, 775, 786, 814, 818, 819, 828, 836, 854, 885, 891, 950, 1043, 1190, 1228, 1246, 1272, 1273], "bottom": [173, 310, 370, 775, 791, 885], "bottom_k": [273, 310, 370, 683, 684, 775, 850, 885, 1231, 1246], "bottom_k_bi": [369, 683, 684, 775], "bound": [98, 129, 130, 188, 202, 310, 346, 375, 470, 499, 501, 524, 530, 688, 698, 716, 717, 719, 720, 762, 763, 775, 814, 885, 918, 950, 1018, 1043, 1073, 1075, 1104, 1234, 1246, 1263], "boundari": [202, 310, 375, 465, 670, 775, 814, 885, 950, 1039, 1208, 1246], "box": [20, 220, 310], "box_draw": 20, "branch": [53, 54, 796, 797, 806, 832, 843, 885], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 257, 267, 272, 278, 279, 310, 313, 314, 385, 386, 419, 465, 533, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 751, 752, 775, 796, 797, 806, 846, 854, 885, 945, 960, 961, 997, 1039, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1225, 1230, 1246, 1250], "breakpoint": [386, 465, 578, 775, 961, 1039, 1123, 1246], "breezah": 143, "breviti": 168, "broadcast": [650, 891, 1188], "broader": 891, "brotli": [41, 45, 310, 885], "brussel": [418, 996], "bst": [398, 402, 418, 972, 976, 996], "bucket": [35, 133, 144, 145, 148, 310, 419, 432, 465, 775, 997, 1010, 1039, 1246], "bud": [648, 649, 1186, 1187], "budget": 1254, "buffer": [129, 130, 131, 188, 214, 310, 1018, 1246], "buffer_s": [214, 310], "bug": [532, 533, 775, 823, 869, 885, 1105, 1246], "build": [52, 117, 891, 1275], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 182, 310, 388, 775, 802, 885], "busi": [393, 703, 967], "business_day_count": [393, 967], "by_alternate_row": 1, "by_dtyp": 891, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 891, "by_left": [217, 310, 819, 885], "by_nam": 891, "by_pred": [243, 310], "by_right": [217, 310, 819, 885], "bye": 1, "byi": 1267, "bys": [202, 310, 814, 885], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 182, 188, 250, 310, 388, 545, 640, 644, 645, 652, 663, 775, 802, 840, 885, 1018, 1178, 1182, 1183, 1190, 1201, 1246, 1267], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 182, 250, 310, 388, 545, 775, 802, 840, 885], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 171, 173, 174, 175, 176, 177, 178, 180, 183, 184, 185, 186, 187, 189, 193, 195, 198, 199, 200, 201, 202, 204, 206, 207, 215, 216, 218, 219, 221, 223, 225, 228, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 243, 246, 247, 248, 255, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 273, 277, 278, 279, 281, 282, 284, 289, 292, 293, 294, 297, 298, 300, 303, 304, 310, 314, 319, 321, 322, 324, 342, 362, 370, 386, 450, 462, 470, 491, 503, 533, 539, 554, 555, 569, 571, 575, 578, 616, 654, 662, 684, 687, 694, 696, 697, 699, 700, 701, 704, 706, 707, 708, 709, 711, 712, 714, 724, 725, 726, 729, 730, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 754, 756, 758, 759, 760, 764, 771, 775, 791, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 810, 813, 814, 818, 821, 830, 832, 834, 835, 837, 838, 843, 844, 845, 846, 850, 853, 854, 857, 859, 862, 865, 866, 867, 870, 871, 873, 876, 877, 885, 889, 891, 944, 961, 1043, 1065, 1123, 1192, 1200, 1214, 1233, 1246, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1267, 1272], "c00": 891, "c01": 891, "c02": 891, "c03": 891, "c05": 891, "c1": 359, "c123": 1267, "c2": 359, "c20": 891, "c25": 891, "c3": 359, "c40": 891, "c45": 1267, "c4d79b": [36, 310], "c50": 891, "c567": [36, 310], "c60": 891, "c75": 891, "c80": 891, "c8ae6d2b276": [36, 310], "c93": 891, "c95": 891, "c96": 891, "c97": 891, "c98": 891, "c99": 891, "c_btm_by_a": [370, 775], "c_btm_by_b": [370, 775], "c_by_ca": [370, 684, 775], "c_by_cb": [370, 684, 775], "c_c_c": [754, 846, 885], "c_contigu": [268, 310], "c_max": [571, 775], "c_mean_squar": [289, 862], "c_min": [571, 775], "c_top_by_a": [684, 775], "c_top_by_b": [684, 775], "c_total": 1272, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 662, 664, 665, 669, 775, 786, 796, 797, 806, 832, 843, 885, 943, 1129, 1130, 1200, 1202, 1203, 1207, 1246], "cadi": [235, 310], "cafe": [667, 1205], "caf\u00e9": [644, 645, 891, 1182, 1183], "calamin": 134, "calcul": [36, 41, 45, 47, 181, 202, 258, 281, 310, 389, 440, 441, 442, 443, 482, 494, 513, 520, 526, 530, 603, 621, 626, 688, 690, 707, 709, 751, 752, 756, 764, 775, 801, 814, 847, 855, 885, 962, 963, 1019, 1020, 1021, 1022, 1058, 1068, 1087, 1141, 1160, 1164, 1236, 1246], "calendar": [61, 62, 202, 217, 242, 280, 310, 396, 406, 408, 415, 419, 432, 436, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 970, 980, 985, 993, 997, 1010, 1014, 1020, 1246], "calendar_year": [406, 436], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 173, 201, 202, 218, 220, 242, 257, 268, 273, 309, 310, 369, 370, 381, 384, 393, 532, 533, 554, 555, 557, 559, 561, 562, 585, 586, 617, 683, 684, 703, 708, 771, 775, 791, 796, 797, 806, 813, 814, 832, 836, 843, 846, 850, 883, 884, 885, 889, 891, 940, 967, 1105, 1130, 1156, 1227, 1231, 1246, 1255, 1259, 1272], "callabl": [48, 49, 50, 51, 143, 195, 220, 234, 239, 296, 310, 359, 524, 532, 533, 555, 556, 575, 592, 711, 712, 725, 736, 737, 749, 775, 823, 831, 834, 869, 885, 931, 1098, 1105, 1135, 1246], "caller": [132, 227, 310, 524, 823, 828, 869, 885], "cam": [239, 310, 834, 885], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 173, 175, 185, 186, 195, 197, 201, 202, 209, 211, 213, 220, 231, 235, 242, 244, 245, 248, 250, 251, 256, 267, 268, 272, 273, 274, 278, 284, 287, 296, 310, 313, 322, 359, 370, 381, 384, 385, 388, 393, 412, 413, 415, 418, 421, 424, 432, 441, 447, 450, 470, 496, 524, 532, 533, 539, 542, 545, 551, 554, 555, 557, 559, 561, 562, 571, 576, 578, 583, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 614, 616, 618, 621, 624, 629, 637, 643, 648, 649, 650, 657, 658, 659, 662, 673, 684, 701, 703, 715, 718, 725, 727, 731, 732, 737, 754, 765, 771, 774, 775, 786, 791, 792, 796, 797, 802, 804, 806, 814, 836, 838, 840, 841, 843, 845, 846, 850, 857, 860, 861, 885, 891, 931, 960, 967, 990, 991, 993, 996, 997, 999, 1002, 1010, 1020, 1026, 1043, 1070, 1098, 1105, 1110, 1123, 1127, 1130, 1148, 1150, 1151, 1154, 1157, 1160, 1167, 1168, 1175, 1181, 1186, 1187, 1188, 1195, 1196, 1197, 1200, 1225, 1227, 1246, 1250, 1260, 1272], "cancel": [796, 885], "candid": [635, 637, 1173, 1175], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 220, 245, 246, 268, 287, 296, 310, 364, 444, 512, 533, 612, 631, 654, 675, 737, 775, 843, 861, 869, 885, 891, 935, 1086, 1105, 1147, 1169, 1192, 1227, 1246], "capabl": [1, 36, 310], "capac": [188, 254, 310, 1018, 1155, 1246], "capit": [670, 1208, 1267], "captur": [635, 637, 648, 649, 1173, 1175, 1186, 1187], "car": [239, 263, 310, 588, 775, 834, 885], "cardin": [172, 310, 326, 697, 775, 790, 885], "care": [36, 251, 310, 533, 614, 775, 841, 885, 1151, 1246], "cars_revers": [588, 775], "cartesian": [216, 310, 818, 885], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 190, 202, 214, 220, 235, 242, 244, 245, 264, 267, 268, 310, 394, 441, 532, 542, 543, 555, 591, 628, 629, 636, 638, 639, 648, 649, 650, 670, 775, 797, 814, 836, 885, 889, 891, 968, 1020, 1025, 1166, 1167, 1174, 1176, 1177, 1186, 1187, 1188, 1208, 1225, 1246], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 195, 202, 234, 242, 267, 268, 272, 284, 310, 325, 383, 384, 395, 421, 424, 435, 570, 575, 576, 583, 585, 591, 642, 643, 672, 678, 682, 705, 706, 755, 775, 814, 831, 836, 857, 885, 889, 891, 945, 958, 959, 969, 999, 1002, 1013, 1127, 1180, 1181, 1210, 1217, 1223, 1227, 1229, 1230, 1246, 1265], "cast_str_to_int": [234, 310, 831, 885], "cast_to_supertyp": [775, 889], "cat": [26, 46, 84, 85, 386, 578, 628, 630, 668, 671, 682, 706, 770, 775, 891, 961, 1039, 1123, 1166, 1168, 1206, 1209, 1242, 1246], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 216, 265, 310, 372, 386, 578, 585, 586, 682, 775, 891, 942, 943, 944, 945, 961, 1123, 1129, 1130, 1229, 1246], "categori": [36, 46, 65, 85, 265, 310, 372, 386, 465, 578, 775, 942, 961, 1039, 1123, 1222, 1246], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [262, 310], "caus": [99, 108, 117, 129, 130, 131, 143, 152, 171, 190, 268, 310, 532, 775, 1025, 1227, 1246], "cba": 659, "cbrt": [775, 1246, 1265], "cbrt_a": 1266, "cc": [444, 723, 775, 891, 962, 1246, 1267], "ccc": [1, 36, 310, 673, 675, 891, 1267], "ccy": 1275, "cd": [673, 675, 891], "cdatainterfac": [170, 893], "cde": [891, 1267], "cdt": [419, 432, 997, 1010], "ceil": [49, 775, 1246, 1265], "ceil_a": 1266, "cell": [15, 16, 36, 235, 310], "cent": 396, "center": [15, 16, 36, 310, 440, 442, 443, 592, 593, 595, 597, 599, 601, 604, 606, 608, 775, 1019, 1021, 1022, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1246], "central": [144, 145, 482, 621, 775, 1058, 1160, 1246], "centuri": 1268, "certain": [42, 43, 44, 45, 54, 133, 144, 207, 280, 310, 658, 659, 771, 796, 797, 832, 885, 1246], "certainli": [662, 664, 665, 1200, 1202, 1203], "cest": [418, 996], "cet": [418, 996], "cfg": [2, 4, 17, 168], "cfoo": [859, 885], "chain": [554, 555, 557, 559, 561, 562, 765], "chanc": [156, 159, 163, 1275], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 257, 267, 272, 278, 279, 286, 310, 313, 314, 385, 386, 389, 419, 465, 533, 571, 572, 578, 585, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 751, 752, 775, 796, 797, 806, 846, 854, 860, 885, 889, 891, 944, 945, 960, 961, 997, 1039, 1119, 1123, 1129, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1155, 1225, 1230, 1246, 1250], "changes_length": [775, 889], "char": [27, 636, 1174], "char_length": 1267, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 310, 415, 634, 636, 640, 644, 645, 646, 647, 648, 649, 652, 653, 654, 657, 658, 659, 660, 661, 663, 670, 672, 832, 885, 891, 993, 1172, 1174, 1178, 1182, 1183, 1184, 1185, 1186, 1187, 1190, 1191, 1192, 1195, 1196, 1197, 1201, 1208, 1210, 1267], "character_length": 1267, "characterist": [159, 163], "charli": [129, 1273], "chart": [36, 310, 832, 885], "cheap": [175, 176, 249, 285, 310, 794, 795, 839, 858, 885, 949, 951, 1246], "cheaper": [499, 1073], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 187, 212, 216, 310, 342, 363, 366, 368, 462, 470, 474, 492, 628, 633, 639, 656, 775, 818, 823, 885, 914, 934, 937, 939, 1017, 1035, 1036, 1045, 1048, 1055, 1057, 1066, 1166, 1171, 1177, 1194, 1246], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1017, 1246], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1017, 1246], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 202, 235, 310, 814, 885], "chrono": [33, 42, 87, 310, 421, 424, 662, 664, 665, 669, 885, 999, 1002, 1200, 1202, 1203, 1207, 1267, 1268], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 190, 215, 230, 268, 310, 325, 582, 775, 885, 898, 948, 1025, 1034, 1111, 1126, 1221, 1227, 1246], "chunk_length": 1246, "chunkedarrai": [116, 230, 310], "citi": [648, 649], "clang": 151, "clariti": [243, 310], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 245, 310, 762, 771, 775, 781, 787, 799, 805, 837, 856, 885, 890, 1226, 1246, 1257, 1272], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 182, 310, 388, 456, 775, 802, 885, 1255, 1272], "claus": [787, 1263, 1271], "clean": [662, 664, 665, 1200, 1202, 1203], "cleaner": 168, "cleanli": [10, 200, 310, 1272], "clear": [46, 84, 176, 310, 795, 885, 951, 1246], "clearer": 119, "clickhous": 132, "client": 131, "clip": [775, 1246], "clipboard": [32, 128, 310, 787], "clone": [118, 119, 120, 121, 122, 175, 268, 310, 794, 885, 949, 1246], "close": [36, 131, 202, 242, 257, 310, 386, 470, 529, 578, 591, 594, 596, 598, 600, 602, 605, 607, 609, 621, 716, 717, 719, 720, 762, 763, 775, 814, 836, 846, 885, 961, 1043, 1123, 1160, 1246], "closedinterv": [202, 242, 310, 470, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 836, 885, 1043, 1246], "closest": [116, 217, 310, 1266], "closur": [594, 596, 605, 607, 609, 775], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 310], "cloudi": [648, 649], "cloudpickl": 151, "cluster": 148, "cluster_with_column": [53, 54, 796, 797, 806, 832, 843, 885], "co": [636, 775, 1174, 1246, 1265], "coalesc": [216, 217, 279, 310, 468, 638, 662, 775, 818, 819, 854, 885, 1200, 1261, 1265], "code": [177, 310, 363, 364, 365, 366, 368, 388, 533, 614, 775, 802, 821, 885, 1151, 1246, 1255], "coeffici": [179, 310, 621, 775, 1160, 1246], "coerc": [55, 584, 775], "coercion": [42, 43, 44, 45, 53, 54, 584, 775, 796, 797, 806, 832, 843, 885], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 193, 201, 202, 210, 212, 216, 217, 220, 231, 234, 235, 242, 243, 248, 256, 267, 272, 276, 278, 284, 289, 310, 314, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 556, 558, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 701, 702, 704, 705, 706, 708, 710, 713, 715, 718, 721, 725, 726, 727, 728, 729, 730, 738, 740, 742, 743, 745, 748, 749, 754, 756, 758, 760, 761, 764, 765, 775, 810, 813, 814, 816, 818, 819, 831, 836, 838, 845, 846, 852, 857, 859, 862, 885, 891, 993, 996, 1070, 1148, 1150, 1181, 1200, 1246, 1275], "col0": [159, 1275], "col1": [159, 235, 310, 885, 1275], "col2": [159, 235, 310, 885, 1275], "col3": [235, 310, 1275], "col4": 1275, "col_nam": [234, 310, 533, 765, 775, 831, 885], "cole": 126, "coli": [36, 310, 561, 562, 891, 1275], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 185, 218, 235, 257, 262, 275, 276, 310, 444, 474, 533, 705, 723, 727, 754, 757, 775, 790, 791, 793, 794, 797, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 885, 891, 1048, 1246, 1255, 1256, 1257, 1260, 1261, 1272, 1273, 1275], "collect_al": [50, 54, 796, 797, 885], "collect_all_async": [797, 885], "collect_async": [54, 885], "collect_schema": [50, 218, 310, 799, 805, 831, 837, 856, 885], "collis": 55, "colnam": [36, 143, 310], "color": [46, 84, 85, 296, 363, 364, 365, 366, 368, 631, 689, 775, 869, 934, 935, 936, 937, 939, 1169, 1235, 1246, 1267], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 173, 174, 177, 179, 180, 183, 184, 185, 186, 189, 193, 194, 197, 198, 200, 201, 202, 206, 207, 212, 213, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 251, 256, 258, 259, 260, 263, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 295, 310, 314, 321, 322, 324, 335, 344, 353, 355, 358, 370, 375, 379, 380, 386, 396, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 414, 416, 417, 420, 421, 422, 424, 433, 434, 436, 444, 446, 450, 452, 465, 469, 470, 485, 491, 497, 499, 519, 523, 524, 533, 539, 540, 542, 544, 554, 557, 559, 561, 562, 571, 578, 582, 584, 585, 586, 587, 589, 590, 591, 594, 596, 598, 600, 602, 605, 607, 609, 616, 623, 624, 627, 634, 639, 640, 641, 654, 655, 662, 663, 664, 665, 666, 667, 669, 674, 676, 684, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 791, 793, 800, 803, 804, 805, 807, 810, 813, 814, 818, 819, 823, 824, 825, 826, 827, 829, 830, 833, 834, 836, 837, 838, 839, 841, 845, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 868, 869, 885, 890, 891, 896, 897, 916, 925, 927, 930, 943, 944, 950, 955, 961, 970, 973, 974, 975, 978, 979, 980, 984, 985, 986, 988, 989, 992, 994, 995, 998, 999, 1000, 1002, 1011, 1012, 1014, 1024, 1039, 1042, 1065, 1071, 1073, 1093, 1097, 1123, 1130, 1131, 1134, 1154, 1165, 1172, 1177, 1179, 1192, 1193, 1200, 1202, 1203, 1204, 1205, 1207, 1213, 1216, 1222, 1223, 1235, 1246, 1261, 1263, 1264, 1266, 1267, 1269, 1270, 1273, 1274, 1275], "column_0": [1, 220, 274, 310], "column_1": [220, 274, 310, 1269], "column_2": [274, 310, 1269], "column_abc": 15, "column_format": [36, 310], "column_nam": [239, 274, 310, 834, 885], "column_tot": [36, 310], "column_width": [36, 310], "column_x": [129, 130, 134, 140, 143], "column_xyz": 15, "columnar": [120, 122, 214, 244, 310], "columnformatdict": [36, 310], "columnnameorselector": [174, 183, 185, 226, 233, 235, 245, 265, 275, 276, 277, 278, 310, 793, 803, 804, 827, 851, 852, 853, 885], "columnnotfounderror": [197, 198, 310], "columntotalsdefinit": [36, 310], "columnwidthsdefinit": [36, 310], "colx": [36, 310, 561, 562, 891, 1260, 1275], "colz": [891, 1275], "com": [36, 132, 310, 440, 442, 443, 635, 636, 637, 775, 1019, 1021, 1022, 1173, 1174, 1175, 1246], "combin": [41, 45, 53, 54, 55, 193, 202, 203, 217, 235, 242, 280, 310, 323, 336, 432, 441, 454, 570, 586, 591, 657, 658, 659, 716, 717, 719, 720, 762, 763, 765, 775, 796, 797, 806, 814, 819, 832, 836, 843, 885, 997, 1010, 1020, 1130, 1195, 1196, 1197, 1246, 1261, 1273], "come": [111, 132, 202, 275, 277, 310, 393, 412, 413, 482, 524, 703, 775, 814, 851, 853, 885, 967, 990, 991, 1058, 1246], "comm_subexpr_elim": [53, 54, 796, 797, 806, 832, 843, 885], "comm_subplan_elim": [53, 54, 796, 797, 806, 832, 843, 885], "comma": [32, 33, 129, 130, 143, 310], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 279, 310, 555, 781, 796, 797, 806, 832, 843, 854, 885], "compact": 1270, "compani": 132, "compar": [148, 152, 153, 154, 155, 187, 193, 310, 438, 439, 459, 461, 470, 484, 531, 565, 566, 775, 810, 885, 944, 1017, 1246], "comparison": [149, 193, 310, 810, 885], "compat": [20, 36, 37, 38, 41, 45, 86, 262, 310, 628, 630, 635, 636, 637, 639, 648, 649, 885, 891, 1166, 1168, 1173, 1174, 1175, 1177, 1186, 1187, 1221, 1246, 1255, 1267, 1268, 1272], "compat_level": [37, 38, 262, 310, 1221, 1246], "compatibleframetyp": [1256, 1258, 1272], "compatlevel": [37, 38, 262, 310, 1221, 1246], "competit": [581, 775, 1125, 1246], "compil": [52, 340, 341, 489, 490, 912, 913, 1063, 1064], "complement": 891, "complet": [129, 131, 143, 1273], "complex": [160, 369, 370, 385, 683, 684, 775, 940, 960, 1231, 1246], "compliant": [36, 310], "compon": [397, 420, 662, 665, 721, 971, 998, 1200, 1203], "compos": 1273, "composit": [76, 1275], "compound": [123, 245, 310, 891], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 310, 589, 775, 885, 1133, 1246], "compression_level": [41, 45, 310, 885], "comput": [53, 55, 89, 188, 201, 217, 235, 269, 275, 289, 302, 310, 318, 327, 328, 329, 330, 331, 332, 349, 350, 351, 356, 357, 361, 373, 376, 377, 378, 381, 382, 383, 384, 390, 437, 445, 482, 506, 507, 508, 509, 513, 514, 515, 516, 520, 526, 527, 528, 529, 551, 571, 572, 577, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 618, 619, 620, 621, 625, 680, 681, 689, 694, 696, 699, 700, 701, 707, 709, 722, 741, 751, 752, 765, 775, 796, 813, 816, 818, 819, 851, 859, 862, 875, 885, 894, 899, 900, 901, 902, 903, 904, 921, 922, 923, 928, 929, 933, 946, 952, 953, 954, 956, 957, 958, 959, 964, 1016, 1018, 1023, 1058, 1080, 1081, 1082, 1083, 1087, 1088, 1089, 1090, 1094, 1100, 1101, 1102, 1103, 1110, 1119, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1157, 1158, 1159, 1160, 1163, 1219, 1220, 1228, 1235, 1246, 1266, 1269], "computeerror": [542, 667, 1205], "concat": [46, 84, 85, 92, 130, 217, 310, 859, 885, 948, 1034, 1111, 1126, 1246, 1265], "concat_list": [496, 722], "concat_w": [257, 310, 754, 846, 885, 1265, 1272], "concaten": [46, 55, 84, 85, 195, 234, 310, 575, 627, 641, 705, 706, 775, 831, 885, 948, 1111, 1165, 1179, 1246, 1267], "concatmethod": 55, "conclus": [120, 122, 310, 885], "concret": [159, 163], "condit": [36, 185, 193, 243, 310, 450, 470, 633, 656, 702, 725, 765, 775, 804, 810, 885, 1043, 1246, 1261, 1265, 1271], "conditional_format": [36, 310], "conditionalformatdict": [36, 310], "config": [0, 47, 181, 248, 267, 284, 310, 629, 638, 650, 717, 720, 721, 787, 796, 801, 838, 857, 885, 1167, 1188], "configur": [5, 35, 133, 144, 145, 168, 310, 796, 885], "conflat": [470, 775], "conform": 1275, "confus": [91, 322, 477, 478, 650, 775], "conjunct": [36, 84, 131, 134, 140, 157, 310, 731, 734, 885], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 310, 788], "connectionorcursor": [34, 131, 310], "connector": 132, "connectorx": [131, 132, 151], "consecut": [192, 310, 362, 449, 455, 627, 641, 775, 809, 885, 1028, 1165, 1179, 1246], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 173, 185, 187, 213, 220, 226, 244, 257, 267, 272, 273, 275, 277, 278, 279, 310, 313, 314, 370, 375, 385, 386, 419, 454, 465, 532, 533, 539, 553, 554, 557, 559, 561, 562, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 684, 711, 725, 751, 752, 771, 775, 791, 796, 797, 804, 806, 815, 822, 827, 846, 850, 851, 853, 854, 869, 885, 891, 943, 945, 950, 960, 961, 997, 1017, 1039, 1105, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1150, 1225, 1230, 1246, 1250, 1255], "consider": 126, "consist": [201, 233, 268, 310, 662, 716, 717, 813, 885, 891, 898, 1025, 1200, 1227, 1246], "consola": [36, 310], "const": 10, "constant": [188, 242, 310, 394, 441, 447, 775, 836, 885, 968, 1018, 1020, 1026, 1246], "constrain": [47, 143, 185, 310, 804, 885, 891], "constraint": [193, 310, 450, 554, 555, 557, 559, 561, 562, 765, 775, 810, 885, 891], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 310, 456, 747, 750, 766, 771, 775, 802, 885, 943, 1246, 1260], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 173, 178, 185, 186, 202, 210, 215, 231, 267, 268, 272, 273, 279, 291, 310, 322, 324, 347, 366, 368, 388, 462, 474, 503, 533, 627, 633, 635, 637, 639, 641, 643, 655, 656, 672, 693, 694, 695, 696, 706, 710, 737, 775, 791, 799, 802, 804, 805, 814, 832, 850, 854, 864, 885, 889, 891, 896, 897, 919, 1035, 1036, 1077, 1111, 1165, 1171, 1173, 1175, 1177, 1179, 1181, 1193, 1194, 1210, 1221, 1227, 1246, 1263], "contains_with_expr": 363, "contains_with_lit": 363, "content": [13, 617, 775, 1156, 1246], "context": [46, 84, 85, 165, 231, 257, 310, 320, 450, 496, 532, 533, 542, 623, 624, 689, 708, 710, 724, 727, 733, 734, 737, 746, 750, 753, 774, 775, 786, 787, 846, 859, 885, 1070, 1235, 1246, 1260, 1272, 1274], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 238, 268, 310], "continu": [129, 386, 578, 621, 775, 961, 1123, 1160, 1246], "contrast": 721, "control": [10, 11, 36, 54, 55, 134, 157, 159, 256, 257, 267, 310, 586, 624, 754, 775, 796, 797, 806, 845, 846, 885, 1130, 1225, 1246, 1257, 1260, 1272], "conveni": [190, 272, 310, 878, 898, 1025, 1246, 1255], "convers": [117, 134, 171, 214, 215, 244, 245, 264, 268, 269, 310, 398, 662, 664, 665, 669, 787, 972, 1200, 1202, 1203, 1207, 1227, 1228, 1246, 1270, 1272], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 171, 263, 264, 265, 266, 267, 268, 269, 271, 272, 310, 358, 359, 387, 398, 421, 424, 523, 524, 532, 555, 580, 637, 662, 664, 665, 666, 667, 669, 674, 775, 885, 889, 930, 931, 944, 972, 999, 1002, 1097, 1098, 1175, 1200, 1202, 1203, 1204, 1205, 1207, 1213, 1216, 1224, 1225, 1226, 1227, 1228, 1230, 1246, 1267, 1269, 1270, 1272], "convert_time_zon": [418, 996], "coo": [239, 310, 834, 885], "coord": 676, "coordin": [36, 310], "copi": [32, 116, 117, 128, 171, 175, 176, 215, 262, 268, 269, 284, 310, 447, 775, 794, 795, 857, 885, 949, 951, 1026, 1221, 1226, 1227, 1228, 1246, 1272], "corasick": [629, 638, 650, 1167, 1176, 1188], "core": [1, 310, 1272, 1275], "corner": [20, 36, 123, 310], "corr": 310, "corrcoef": [179, 310], "correct": [134, 140, 442, 443, 482, 603, 621, 775, 823, 885, 889, 1021, 1022, 1058, 1141, 1160, 1246], "correctli": [36, 310, 532, 775], "correl": [179, 310, 707, 751], "correlationmethod": 707, "correspond": [202, 217, 242, 268, 280, 310, 370, 406, 415, 419, 432, 533, 581, 591, 594, 596, 598, 600, 602, 605, 607, 609, 684, 716, 717, 719, 720, 762, 763, 775, 796, 814, 819, 836, 885, 980, 993, 997, 1010, 1125, 1246], "cosd": 1265, "cosh": [775, 1246], "cosin": [327, 328, 376, 377, 532, 775, 899, 900, 952, 953, 1246, 1269], "cost": [245, 310], "cot": [775, 1246, 1265], "cotang": [378, 775, 954, 1246, 1269], "cotd": 1265, "could": [35, 82, 89, 174, 310, 711, 721, 725, 793, 801, 804, 885], "count": [36, 149, 172, 181, 202, 231, 232, 242, 274, 280, 286, 301, 310, 326, 343, 352, 380, 393, 441, 465, 485, 493, 505, 510, 533, 553, 569, 591, 630, 687, 689, 697, 703, 710, 734, 745, 775, 790, 801, 814, 830, 836, 860, 874, 885, 891, 915, 924, 955, 962, 967, 1020, 1039, 1059, 1067, 1079, 1084, 1112, 1118, 1168, 1233, 1235, 1246, 1254, 1265], "count_digit": 630, "count_num": [36, 310], "counterpart": 126, "countri": [217, 310, 394, 968], "country_holidai": [393, 703, 967], "covari": [709, 752, 775, 889], "cover": 10, "cow": [646, 647, 1184, 1185], "cpu": [129, 130, 267, 310, 796, 885, 1225, 1246], "crab": [628, 639, 1166, 1177], "crate": [33, 42, 87, 310, 628, 630, 635, 636, 637, 639, 648, 649, 662, 664, 665, 669, 885, 891, 1166, 1168, 1173, 1174, 1175, 1177, 1186, 1187, 1200, 1202, 1203, 1207], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 175, 176, 202, 232, 235, 242, 267, 268, 280, 284, 287, 310, 313, 314, 397, 419, 432, 441, 524, 532, 582, 591, 594, 596, 598, 600, 602, 605, 607, 609, 705, 715, 716, 717, 718, 719, 720, 721, 761, 762, 763, 771, 775, 794, 795, 801, 806, 814, 836, 857, 861, 885, 949, 951, 961, 971, 997, 1010, 1020, 1116, 1123, 1126, 1225, 1227, 1246, 1250, 1271, 1272, 1275], "create_async_engin": 131, "create_engin": [34, 310], "creation": 130, "cross": [216, 310, 818, 885, 1261], "crustacean": [639, 1177], "cst": [419, 432, 997, 1010], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 310, 787, 885], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 310, 885], "ctx": [1254, 1256, 1257, 1258, 1259, 1260, 1272], "cube": [1, 51, 373, 576, 775, 946, 1246, 1266], "cum_count": [775, 1246], "cum_count_revers": [380, 775], "cum_max": [775, 1246], "cum_max_all_fil": [381, 775], "cum_max_revers": [381, 775], "cum_min": [775, 1246], "cum_min_revers": [382, 775], "cum_prod": [319, 775, 1246], "cum_prod_revers": [383, 775], "cum_reduc": 711, "cum_sum": [467, 677, 714, 775, 816, 885, 1057, 1246], "cum_sum_revers": [384, 775], "cumsum_horizont": 713, "cumul": [380, 381, 382, 383, 384, 710, 711, 712, 713, 714, 775, 955, 956, 957, 958, 959, 1246], "cumulative_ev": [775, 1246], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 175, 176, 216, 217, 257, 267, 272, 310, 313, 314, 402, 524, 572, 775, 794, 795, 818, 819, 846, 885, 891, 949, 951, 968, 976, 1119, 1225, 1230, 1246, 1250, 1257, 1272], "cursor": [34, 131, 310], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 181, 220, 235, 296, 310, 359, 393, 421, 424, 524, 532, 533, 592, 689, 703, 736, 737, 775, 801, 823, 869, 885, 931, 967, 999, 1002, 1098, 1105, 1135, 1235, 1246, 1275], "customis": [36, 310], "cut": [578, 775, 1123, 1246], "cxx": 1267, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 193, 200, 202, 203, 204, 207, 216, 219, 261, 262, 272, 278, 282, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 319, 321, 380, 403, 421, 424, 470, 575, 616, 630, 636, 648, 649, 654, 662, 664, 665, 704, 721, 727, 754, 775, 810, 814, 818, 846, 865, 867, 870, 871, 872, 873, 874, 875, 876, 885, 891, 944, 955, 977, 999, 1002, 1043, 1065, 1168, 1174, 1186, 1187, 1192, 1200, 1202, 1203, 1214, 1246, 1261, 1263, 1264, 1267, 1268], "d1": [36, 310, 397], "d2": 397, "d3": 397, "d789": [36, 310], "d_4": [654, 1192], "dai": [61, 62, 77, 202, 215, 217, 242, 280, 310, 393, 412, 413, 415, 416, 419, 421, 424, 425, 432, 434, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 703, 715, 716, 717, 718, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 891, 967, 990, 991, 993, 994, 997, 999, 1002, 1003, 1010, 1012, 1020, 1246, 1268], "dark": 1254, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 171, 176, 177, 186, 189, 190, 200, 201, 202, 214, 215, 216, 218, 220, 233, 234, 238, 243, 244, 245, 247, 251, 254, 262, 267, 268, 269, 272, 274, 284, 288, 308, 310, 314, 322, 323, 324, 327, 328, 329, 330, 331, 332, 335, 338, 339, 340, 341, 342, 344, 347, 349, 350, 351, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 371, 372, 375, 376, 377, 378, 379, 386, 387, 388, 393, 394, 395, 396, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 446, 457, 459, 460, 461, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 489, 490, 492, 497, 503, 505, 512, 523, 525, 531, 533, 565, 566, 570, 571, 578, 580, 581, 584, 585, 586, 587, 589, 590, 610, 612, 614, 619, 620, 621, 627, 630, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 662, 663, 664, 665, 667, 669, 672, 680, 681, 682, 685, 686, 689, 692, 698, 705, 708, 715, 716, 717, 718, 719, 720, 721, 731, 732, 734, 735, 736, 737, 747, 750, 761, 762, 763, 766, 771, 775, 787, 794, 795, 796, 797, 802, 805, 807, 813, 814, 837, 841, 857, 885, 890, 896, 897, 908, 910, 911, 912, 913, 914, 916, 918, 919, 930, 932, 934, 935, 936, 938, 941, 942, 949, 950, 951, 961, 962, 967, 968, 969, 970, 973, 974, 975, 976, 978, 979, 980, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1024, 1025, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1061, 1062, 1063, 1064, 1066, 1071, 1077, 1079, 1086, 1097, 1099, 1105, 1117, 1123, 1125, 1129, 1130, 1131, 1133, 1134, 1145, 1147, 1155, 1160, 1165, 1166, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1190, 1191, 1192, 1193, 1200, 1201, 1202, 1203, 1205, 1207, 1210, 1221, 1226, 1227, 1228, 1229, 1232, 1245, 1246, 1254, 1261, 1267, 1272, 1274], "data_bar": [36, 310], "data_bar_2010": [36, 310], "data_label": [36, 310], "data_page_s": [41, 45, 310, 885], "databas": [34, 115, 131, 132, 310, 787], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 308, 309, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 771, 775, 787, 796, 797, 799, 801, 803, 805, 807, 811, 814, 818, 819, 820, 821, 823, 827, 828, 832, 835, 837, 844, 846, 851, 852, 853, 854, 856, 859, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 885, 891, 961, 962, 996, 1020, 1039, 1105, 1123, 1181, 1192, 1193, 1216, 1222, 1223, 1235, 1246, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1275], "dataload": [272, 310], "datapoint": [202, 310, 814, 885], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 216, 272, 310, 482, 775, 787, 818, 823, 885, 1058, 1246, 1273], "datat": [36, 310], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 142, 147, 160, 161, 163, 186, 195, 310, 371, 444, 616, 682, 723, 735, 771, 775, 787, 805, 885, 890, 891, 941, 962, 1015, 1105, 1154, 1229, 1246, 1270], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 174, 181, 200, 202, 215, 217, 242, 257, 310, 313, 342, 393, 395, 396, 397, 398, 401, 403, 405, 406, 408, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 492, 591, 594, 596, 598, 600, 602, 605, 607, 609, 662, 664, 682, 703, 716, 717, 719, 720, 727, 735, 761, 775, 793, 801, 814, 819, 836, 885, 891, 914, 967, 969, 970, 971, 972, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1020, 1066, 1114, 1115, 1200, 1202, 1229, 1246, 1265, 1268, 1270], "date32": [215, 310], "date_format": [33, 42, 310, 885], "date_min": 415, "date_minus_1y_2mon": 993, "date_part": 1265, "date_plus_1i": [415, 993], "date_rang": [217, 280, 310, 401, 403, 416, 423, 434, 719, 720, 975, 989, 994, 995, 1011, 1012], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 174, 181, 200, 202, 215, 217, 242, 257, 280, 310, 313, 342, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 492, 591, 594, 596, 598, 600, 602, 605, 607, 609, 662, 665, 682, 703, 715, 716, 717, 719, 720, 721, 727, 735, 762, 763, 775, 793, 801, 814, 819, 836, 885, 891, 914, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1020, 1066, 1114, 1115, 1200, 1203, 1227, 1229, 1246, 1267, 1268], "datetime_format": [33, 42, 310, 885], "datetime_rang": [202, 310, 395, 398, 412, 413, 415, 418, 419, 425, 426, 427, 428, 429, 430, 431, 432, 435, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 775, 814, 885, 968, 969, 972, 976, 977, 978, 983, 984, 986, 988, 990, 991, 992, 993, 996, 997, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "datetime_str": [421, 424], "datetimeindex": 121, "david": 1273, "day_nam": [421, 424], "day_of_month": [401, 416, 434], "day_of_year": [401, 416, 434], "daylight": [202, 217, 242, 280, 310, 394, 402, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 976, 993, 997, 1010], "dayofweek": 1268, "dayofyear": 1268, "days_diff": 425, "db": [34, 131, 132, 310], "dbapi2": 131, "dbc": [630, 1168], "dbreadengin": 132, "dbwriteengin": [34, 310], "dbwritemod": [34, 310], "dd": [36, 310, 1267], "ddd": [1, 36, 310, 673, 675], "dddd": 1267, "ddof": [258, 281, 310, 356, 361, 520, 526, 604, 605, 608, 609, 626, 690, 707, 709, 751, 752, 756, 764, 775, 847, 855, 885, 928, 933, 1094, 1100, 1142, 1144, 1164, 1236, 1246], "ddww": 1267, "de": 1267, "deal": [41, 45, 214, 310, 322, 324, 418, 581, 662, 665, 693, 694, 695, 696, 718, 775, 885, 896, 897, 996, 1125, 1200, 1203, 1246], "debug": [29, 796, 823, 885, 1275], "decad": [1254, 1268], "decai": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 310, 314, 610, 666, 775, 885, 891, 1145, 1204, 1246, 1266], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 267, 272, 310, 885, 891, 1254], "decod": [129, 130, 642], "decompos": [276, 310, 852, 885], "decompress": [41, 43, 45, 310, 885], "decor": [46, 48, 49, 50, 51, 159, 163, 220, 310, 533, 775, 786, 787, 1105, 1246], "dedic": [1, 117, 214, 244, 310, 891, 1272], "deem": [181, 310, 801, 885], "deepcopi": [175, 310, 794, 885, 949, 1246], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 234, 274, 310, 319, 575, 636, 659, 692, 736, 775, 797, 831, 885, 891, 1174, 1275], "default": [4, 5, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 181, 182, 185, 188, 197, 201, 202, 203, 214, 216, 217, 224, 226, 233, 235, 242, 243, 244, 245, 246, 250, 253, 257, 258, 260, 265, 267, 268, 272, 275, 277, 278, 279, 281, 286, 295, 310, 321, 322, 324, 347, 354, 359, 386, 388, 393, 418, 437, 439, 440, 442, 443, 463, 499, 503, 512, 517, 518, 520, 524, 526, 527, 532, 539, 542, 545, 563, 564, 566, 572, 578, 581, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 615, 617, 626, 627, 635, 641, 652, 657, 658, 659, 662, 664, 665, 667, 669, 689, 690, 693, 695, 698, 702, 703, 706, 707, 709, 716, 717, 718, 719, 720, 721, 724, 727, 731, 732, 733, 735, 747, 750, 756, 757, 762, 763, 764, 766, 775, 796, 797, 801, 802, 804, 806, 813, 814, 818, 819, 827, 836, 840, 842, 846, 847, 851, 853, 854, 855, 860, 868, 885, 891, 896, 897, 919, 926, 931, 950, 961, 962, 967, 996, 1016, 1018, 1019, 1021, 1022, 1037, 1073, 1077, 1086, 1091, 1092, 1098, 1114, 1115, 1119, 1123, 1125, 1129, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1147, 1153, 1156, 1164, 1165, 1166, 1173, 1177, 1179, 1190, 1195, 1196, 1197, 1200, 1202, 1203, 1205, 1207, 1225, 1227, 1235, 1236, 1246, 1266, 1275], "default_match": [628, 639], "defaultdict": [245, 310], "defer": [310, 313, 314, 1246, 1250], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 174, 185, 189, 202, 220, 231, 234, 242, 279, 296, 310, 470, 499, 533, 575, 578, 590, 591, 594, 596, 598, 600, 602, 605, 607, 609, 640, 645, 652, 663, 670, 716, 717, 719, 720, 737, 757, 762, 763, 775, 793, 804, 807, 814, 831, 836, 854, 869, 885, 890, 891, 1043, 1073, 1105, 1123, 1134, 1178, 1183, 1190, 1201, 1208, 1246], "definit": [36, 310, 482, 775, 890, 891, 1058, 1246], "deflat": [31, 310], "deg": 1269, "degre": [258, 281, 310, 520, 526, 580, 604, 605, 608, 609, 626, 690, 700, 707, 709, 751, 752, 756, 764, 775, 847, 855, 885, 1142, 1144, 1164, 1236, 1246, 1265], "delet": [1261, 1274], "delimit": [40, 42, 139, 147, 235, 265, 310, 627, 641, 885, 1165, 1179, 1222, 1246], "delta": [35, 133, 144, 258, 281, 310, 520, 526, 604, 605, 608, 609, 626, 690, 707, 709, 751, 752, 756, 764, 775, 787, 847, 855, 885, 1142, 1144, 1164, 1236, 1246], "delta_merge_opt": [35, 310], "delta_table_opt": [133, 144], "delta_write_opt": [35, 310], "deltalak": [35, 133, 144, 151, 310], "deltat": [35, 310], "demo": [36, 310], "demonstr": [129, 454, 775, 891], "dens": [20, 200, 310, 581, 775, 1125, 1246], "depend": [41, 46, 52, 85, 131, 151, 310, 340, 341, 489, 490, 533, 542, 578, 581, 721, 724, 727, 733, 775, 912, 913, 1063, 1064, 1123, 1125, 1246, 1275], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 172, 226, 268, 286, 291, 310, 400, 435, 456, 548, 585, 627, 634, 691, 700, 708, 775, 790, 806, 827, 853, 859, 860, 864, 885, 974, 982, 983, 1013, 1036, 1129, 1165, 1172, 1227, 1246], "depth": 126, "desc": [891, 1254, 1257, 1261, 1263], "descend": [47, 251, 256, 310, 335, 355, 519, 581, 614, 623, 624, 689, 701, 775, 841, 845, 885, 907, 927, 1055, 1093, 1125, 1151, 1162, 1235, 1246], "describ": [159, 200, 310, 885, 1246], "descript": [202, 310, 814, 885, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1273, 1274], "deseri": [126, 250, 310, 456, 545, 775, 840, 885], "deserializ": [182, 250, 310, 388, 545, 775, 802, 840, 885], "design": [267, 272, 310], "desir": [159, 359, 435, 524, 931, 1013, 1098], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 171, 202, 310, 814, 885, 1275], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 173, 177, 195, 202, 214, 215, 220, 242, 273, 274, 280, 310, 370, 405, 418, 465, 524, 542, 578, 584, 586, 621, 629, 640, 662, 663, 665, 666, 684, 718, 747, 750, 766, 775, 791, 798, 799, 805, 814, 836, 850, 856, 885, 979, 996, 1039, 1098, 1123, 1129, 1130, 1160, 1167, 1200, 1203, 1204, 1246], "dev": [170, 893, 1142, 1246], "develop": [132, 159, 163], "deviat": [258, 310, 442, 604, 605, 626, 756, 775, 847, 885, 1021, 1164, 1246, 1262], "devic": [267, 310, 796, 885, 1225, 1246], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 771, 775, 814, 836, 852, 854, 866, 869, 877, 885, 891, 996, 1020, 1181, 1192, 1193, 1223, 1246, 1254, 1255, 1256, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1275], "df0": [227, 310, 828, 885, 1260], "df1": [47, 55, 152, 153, 187, 190, 227, 257, 282, 310, 828, 885, 1257, 1259, 1260, 1261, 1272], "df2": [47, 55, 152, 153, 187, 190, 282, 310, 1257, 1259, 1260, 1261, 1272], "df3": [47, 310], "df4": 310, "df5": 310, "df6": 310, "df_a": 1272, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [231, 310], "df_b": 1272, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [266, 310], "df_h1": 55, "df_h2": 55, "df_new_grid": [468, 775], "df_nuniqu": [231, 310], "df_original_grid": [468, 775], "df_panda": 1255, "df_pd": 117, "df_tempor": [594, 596, 598, 600, 602, 605, 607, 609, 775], "dfi": [117, 171], "diagon": [55, 274, 310], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 194, 214, 233, 239, 243, 244, 245, 263, 264, 267, 272, 274, 310, 775, 834, 885, 889, 891, 1030, 1246, 1258], "dictat": [415, 775, 889, 993], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 214, 233, 243, 244, 245, 263, 264, 267, 272, 310, 885], "did": [394, 968], "diff": [284, 310, 425, 426, 427, 428, 429, 430, 431, 513, 775, 857, 885, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1087, 1246], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 190, 202, 203, 214, 235, 242, 244, 245, 264, 267, 268, 274, 310, 389, 401, 415, 416, 418, 433, 439, 454, 463, 494, 513, 515, 524, 533, 563, 564, 566, 585, 586, 662, 687, 724, 727, 733, 775, 806, 814, 836, 885, 891, 944, 963, 975, 993, 994, 996, 1011, 1025, 1037, 1068, 1087, 1089, 1105, 1114, 1115, 1129, 1130, 1200, 1246, 1268, 1270, 1272], "digit": [63, 575, 610, 611, 636, 775, 891, 1145, 1146, 1168, 1174, 1246, 1275], "dimens": [116, 118, 120, 122, 138, 139, 147, 310, 587, 775, 885, 1131, 1227, 1246], "dimension": [118, 120, 122, 268, 310, 885, 1246], "direct": [36, 132, 141, 145, 148, 152, 253, 267, 278, 310, 354, 517, 615, 775, 842, 885, 926, 1091, 1153, 1246], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 245, 267, 310, 440, 442, 443, 586, 750, 775, 797, 885, 1019, 1021, 1022, 1130, 1225, 1246, 1257, 1272, 1275], "directori": [36, 41, 141, 143, 146, 148, 310, 889], "dirpath": [31, 33, 37, 38, 41, 143, 310], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 214, 310, 796, 885], "disable_string_cach": 85, "disallow": 159, "discard": [193, 310, 450, 775, 810, 885, 1029, 1246], "disco": [638, 1176], "discont": [638, 1176], "discourag": [533, 775], "discoveri": [235, 310], "discret": [386, 389, 437, 465, 494, 513, 578, 775, 961, 963, 1016, 1039, 1068, 1087, 1123, 1246], "disk": [41, 42, 43, 44, 45, 135, 310, 843, 885], "dispatch": 891, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 181, 200, 310, 801, 806, 885], "distanc": [217, 310, 465, 775, 819, 885, 1039, 1246], "distinct": [36, 163, 233, 235, 288, 310, 360, 473, 476, 525, 581, 590, 721, 775, 932, 1047, 1050, 1099, 1125, 1134, 1246, 1262, 1271, 1273, 1275], "distinct_count": [41, 45, 310, 885], "distribut": [482, 621, 775, 1058, 1160, 1246], "div": 1265, "divid": [20, 386, 419, 432, 440, 442, 443, 454, 482, 578, 775, 961, 997, 1010, 1019, 1021, 1022, 1058, 1123, 1246, 1266], "divis": [454, 685, 775, 1266], "divisor": [258, 281, 310, 520, 526, 604, 605, 608, 609, 626, 690, 707, 709, 751, 752, 756, 764, 775, 847, 855, 885, 1142, 1144, 1164, 1236, 1246], "dl": [272, 310], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 148, 152, 153, 154, 155, 181, 190, 213, 217, 235, 262, 274, 278, 310, 385, 393, 496, 532, 657, 658, 659, 747, 750, 766, 775, 792, 796, 797, 801, 806, 819, 823, 832, 843, 885, 891, 960, 967, 1025, 1070, 1195, 1196, 1197, 1230, 1246], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 170, 179, 310, 893], "document": [87, 132, 310, 313, 314, 421, 424, 643, 662, 664, 665, 669, 771, 944, 999, 1002, 1181, 1200, 1202, 1203, 1207, 1246, 1250], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 176, 183, 190, 193, 197, 202, 203, 215, 216, 243, 244, 245, 275, 284, 287, 310, 313, 314, 435, 450, 454, 463, 524, 533, 658, 659, 687, 771, 775, 795, 796, 801, 803, 810, 814, 818, 823, 851, 857, 861, 885, 951, 1013, 1025, 1029, 1037, 1155, 1246, 1250, 1267], "doesn": [35, 129, 143, 202, 217, 310, 437, 775, 814, 885, 1016, 1246], "dog": [628, 668, 671, 706, 1166, 1206, 1209], "doi": 1268, "dollar": [648, 649, 1186, 1187], "domain": [1, 636, 1174], "don": [55, 202, 217, 220, 275, 278, 310, 385, 496, 533, 775, 814, 851, 885, 891, 960, 1070, 1105, 1246], "done": [130, 149, 168, 172, 174, 217, 310, 325, 326, 571, 775, 790, 793, 819, 885], "dot": [47, 771, 775, 843, 885, 1246], "doubl": [269, 310], "dow": 1268, "down": [143, 146, 147, 148, 149, 453, 775, 1031, 1246], "download": [139, 143, 146, 147, 843, 885], "downstream": [268, 310, 614, 775, 1151, 1246], "dr": 145, "drago": [640, 1178], "dragon": 640, "dragonfr": 1178, "dragonfruit": [640, 652, 663, 1178, 1190, 1201], "dramat": 134, "draw": [20, 25, 159, 163, 1275], "drawback": 771, "drawfn": 1275, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 310], "drop": [1, 119, 184, 185, 220, 275, 284, 310, 389, 391, 392, 494, 495, 578, 775, 804, 851, 857, 885, 963, 965, 966, 1068, 1069, 1123, 1246, 1271], "drop_dupl": [275, 310, 851, 885], "drop_first": [265, 310, 1222, 1246], "drop_in_plac": 310, "drop_nan": [392, 775, 966, 1246], "drop_nul": [310, 391, 775, 885, 965, 1246], "dset": 149, "dst": [419, 432, 997, 1010], "dst_offset": [394, 968], "dt": [1, 36, 47, 134, 140, 242, 310, 591, 721, 775, 784, 836, 885, 891, 1253, 1267, 1268], "dt1": 1267, "dt2": 1267, "dtm": [36, 310, 397, 891, 971, 1267], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 171, 174, 177, 202, 217, 242, 266, 267, 268, 269, 272, 278, 287, 310, 371, 372, 383, 384, 435, 444, 457, 491, 499, 530, 532, 533, 539, 576, 583, 584, 591, 594, 596, 598, 600, 602, 605, 607, 609, 616, 642, 662, 678, 682, 688, 698, 723, 727, 731, 732, 734, 735, 736, 737, 747, 750, 757, 766, 775, 793, 798, 814, 819, 836, 861, 885, 890, 891, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 941, 942, 943, 944, 949, 958, 959, 962, 963, 1013, 1018, 1045, 1061, 1062, 1065, 1073, 1097, 1104, 1105, 1132, 1154, 1180, 1200, 1217, 1224, 1225, 1227, 1228, 1229, 1230, 1234, 1246, 1272, 1275], "dtype_format": [36, 310], "dtypekind": 171, "dtypeoper": [1, 50], "dubiou": 87, "due": [174, 202, 217, 242, 245, 280, 310, 321, 402, 415, 419, 432, 554, 555, 557, 559, 561, 562, 591, 594, 596, 598, 600, 602, 605, 607, 609, 703, 716, 717, 719, 720, 762, 763, 775, 793, 814, 819, 836, 885, 976, 993, 997, 1010], "dummi": [265, 310, 1222, 1246], "duplic": [47, 92, 209, 216, 217, 275, 279, 310, 321, 471, 554, 578, 775, 818, 819, 851, 854, 885, 1044, 1123, 1246, 1273], "duplicateerror": [578, 775, 1123, 1246], "durat": [168, 217, 280, 310, 394, 402, 425, 426, 427, 428, 429, 430, 431, 435, 441, 682, 716, 717, 719, 720, 762, 763, 775, 819, 885, 891, 968, 976, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1020, 1227, 1229, 1246], "dure": [46, 91, 129, 130, 143, 168, 190, 310, 1025, 1246], "dutch": [393, 703, 967], "dynam": [202, 310, 359, 524, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 775, 814, 885, 889, 931, 1098], "dynamicgroupbi": [202, 310], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 148, 149, 161, 182, 193, 200, 204, 213, 219, 261, 262, 268, 278, 310, 319, 388, 437, 441, 444, 470, 527, 533, 538, 539, 540, 542, 543, 544, 546, 547, 616, 621, 639, 658, 659, 670, 723, 737, 754, 765, 775, 802, 810, 821, 834, 885, 891, 1016, 1020, 1043, 1160, 1177, 1208, 1246, 1263, 1267, 1275], "e101": [36, 310], "e_filt": [542, 544], "e_sum_ov": [542, 544], "e_sum_slic": [542, 544], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 178, 180, 186, 193, 200, 201, 202, 215, 217, 220, 233, 235, 242, 244, 246, 267, 272, 276, 279, 280, 288, 289, 291, 293, 295, 296, 304, 310, 335, 370, 386, 419, 432, 450, 473, 476, 502, 505, 512, 522, 529, 533, 571, 578, 581, 589, 590, 597, 601, 612, 617, 624, 636, 640, 644, 645, 652, 654, 655, 663, 670, 684, 698, 701, 706, 731, 732, 757, 765, 775, 796, 799, 800, 805, 810, 814, 819, 832, 836, 852, 854, 862, 864, 866, 868, 869, 877, 885, 907, 948, 961, 997, 1010, 1047, 1050, 1076, 1079, 1086, 1096, 1123, 1125, 1133, 1134, 1147, 1156, 1174, 1178, 1182, 1183, 1190, 1192, 1193, 1201, 1208, 1216, 1246, 1272, 1273, 1275], "eager": [202, 217, 235, 278, 310, 395, 398, 401, 403, 412, 413, 415, 416, 418, 419, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 594, 596, 598, 600, 602, 605, 607, 609, 698, 702, 716, 717, 719, 720, 727, 731, 732, 747, 750, 754, 757, 762, 763, 766, 774, 775, 814, 823, 885, 968, 969, 972, 975, 976, 977, 978, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1272], "eagerli": [524, 1254], "ear": [652, 663, 1190], "earlier": [217, 310], "earliest": [202, 310, 418, 662, 665, 718, 814, 878, 885, 996, 1200, 1203], "easi": 168, "easili": [47, 248, 272, 284, 289, 310, 757, 771, 838, 857, 862, 885], "east": 148, "ebf1d": [36, 310], "eee": [1, 36, 310, 891], "effect": [36, 195, 202, 310, 402, 454, 533, 556, 558, 560, 775, 814, 860, 861, 885, 968, 976], "effici": [117, 131, 213, 215, 310, 532, 775], "efgh": 1267, "eg": [17, 25, 36, 55, 132, 168, 267, 310, 419, 662, 665, 685, 775, 891, 1200, 1203], "egnaro": 1267, "either": [76, 159, 212, 216, 217, 233, 242, 243, 267, 268, 310, 441, 532, 576, 578, 591, 662, 693, 701, 757, 775, 796, 818, 819, 821, 836, 885, 889, 891, 1020, 1123, 1200, 1246, 1258, 1275], "element": [13, 14, 25, 154, 155, 158, 161, 173, 180, 212, 235, 243, 256, 258, 273, 281, 310, 327, 328, 329, 330, 331, 332, 343, 344, 369, 370, 373, 376, 377, 378, 379, 381, 382, 383, 384, 385, 391, 392, 445, 446, 450, 463, 474, 485, 493, 495, 496, 497, 500, 505, 513, 514, 515, 516, 520, 526, 528, 529, 532, 533, 571, 572, 581, 584, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 613, 618, 619, 620, 624, 625, 626, 654, 655, 666, 680, 681, 683, 684, 690, 701, 707, 709, 751, 752, 756, 764, 775, 791, 800, 845, 847, 850, 855, 885, 899, 900, 901, 902, 903, 904, 915, 916, 940, 946, 949, 952, 953, 954, 956, 957, 958, 959, 960, 965, 966, 1023, 1024, 1029, 1038, 1048, 1057, 1059, 1060, 1067, 1069, 1070, 1071, 1074, 1079, 1087, 1088, 1089, 1090, 1102, 1103, 1105, 1119, 1125, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1149, 1157, 1158, 1159, 1163, 1164, 1192, 1193, 1204, 1218, 1219, 1220, 1224, 1231, 1232, 1236, 1246, 1262, 1263], "elementwis": [532, 592, 593, 595, 597, 599, 601, 604, 606, 608, 775, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1246], "elif": 765, "elig": [823, 885], "elimin": [482, 775, 1058, 1246], "elis": [227, 310, 828, 885], "ellipsi": [200, 310], "elppa": 1267, "els": [130, 765], "email": [636, 1174], "email_part": [636, 1174], "emphas": [310, 314], "emploi": 891, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 175, 176, 202, 226, 277, 310, 627, 634, 735, 753, 794, 795, 814, 827, 853, 885, 891, 949, 951, 1045, 1165, 1172, 1246], "en": [20, 36, 310], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 152, 153, 154, 155, 167, 248, 269, 284, 310, 322, 324, 585, 586, 614, 629, 638, 650, 689, 771, 775, 796, 838, 857, 885, 896, 897, 1129, 1130, 1151, 1167, 1176, 1188, 1228, 1235, 1246], "enable_string_cach": 84, "enclos": [456, 775], "encod": [59, 65, 75, 126, 129, 130, 143, 265, 310, 364, 456, 589, 631, 674, 775, 935, 1133, 1169, 1222, 1246], "encount": [107, 129, 130, 143, 202, 310, 563, 564, 642, 643, 707, 711, 725, 775, 814, 885, 1114, 1115, 1180, 1181, 1246], "end": [33, 36, 42, 129, 130, 143, 202, 235, 310, 363, 366, 368, 394, 419, 444, 518, 628, 633, 636, 640, 646, 652, 656, 657, 658, 661, 698, 703, 715, 716, 717, 718, 719, 720, 723, 731, 732, 762, 763, 765, 771, 775, 814, 815, 822, 832, 885, 891, 937, 968, 997, 1055, 1092, 1171, 1174, 1178, 1184, 1190, 1194, 1195, 1196, 1201, 1246, 1267], "endpoint": [386, 578, 775, 961, 1123, 1246], "ends_a": 1267, "ends_in_digit": 1267, "ends_with": [363, 368, 628, 656, 891, 1194, 1265], "ends_with_expr": 366, "ends_with_lit": 366, "engin": [14, 34, 131, 132, 134, 165, 201, 216, 220, 268, 275, 296, 310, 532, 754, 775, 796, 813, 818, 823, 827, 851, 869, 885, 1105, 1227, 1246, 1257, 1272], "engine_opt": [34, 134, 310], "enginetyp": [796, 885], "enough": [496, 621, 775, 1070, 1160, 1246], "ensur": [10, 36, 132, 158, 161, 193, 201, 233, 243, 268, 310, 470, 532, 775, 810, 813, 823, 885, 889, 891, 1227, 1246], "enter": 168, "entir": [36, 53, 54, 134, 140, 310, 796, 797, 885], "entri": [310, 885, 1272], "entropi": [775, 1246], "enumer": [121, 129, 130, 134, 140, 143, 215, 310], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 267, 310], "eol_char": [129, 130, 143], "eparg": 1267, "epoch": [61, 62, 727, 1268], "epoch_": [403, 977], "epoch_n": [403, 977], "epochtimeunit": [403, 727, 977], "eq": [193, 310, 439, 450, 775, 810, 885, 1246], "eq_miss": [775, 1246], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 202, 217, 227, 256, 310, 386, 432, 438, 439, 441, 459, 484, 524, 566, 578, 584, 592, 593, 595, 597, 599, 601, 604, 606, 608, 624, 646, 647, 672, 701, 751, 752, 765, 771, 775, 814, 819, 828, 845, 885, 961, 997, 1020, 1098, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1184, 1185, 1210, 1246, 1264, 1275], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 202, 212, 231, 310, 319, 323, 438, 439, 441, 454, 459, 461, 484, 531, 550, 552, 565, 566, 567, 570, 576, 645, 668, 670, 671, 677, 685, 692, 775, 814, 885, 1020, 1057, 1183, 1206, 1208, 1209, 1246, 1255, 1263], "err": 637, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 174, 235, 243, 268, 310, 321, 346, 347, 364, 393, 499, 501, 503, 554, 586, 628, 631, 635, 637, 639, 642, 643, 662, 664, 665, 669, 775, 793, 797, 869, 885, 918, 919, 935, 967, 1073, 1075, 1077, 1130, 1166, 1169, 1173, 1175, 1177, 1180, 1181, 1200, 1202, 1203, 1207, 1227, 1246, 1270], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 590, 775, 885, 1134, 1246], "espresso": 891, "est": 719, "establish": 131, "estim": [129, 130, 172, 188, 310, 326, 442, 443, 482, 697, 775, 790, 885, 1018, 1021, 1022, 1058, 1246], "estimated_s": [310, 1246], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 310, 533, 775, 889, 891, 1148, 1150, 1246, 1268], "eu": [144, 145], "eur": [200, 310, 1275], "europ": [398, 402, 418, 972, 976, 996], "eval": [266, 310, 532, 533, 722, 775, 1105, 1224, 1246], "evalu": [42, 43, 44, 45, 148, 191, 193, 217, 310, 323, 336, 338, 339, 385, 450, 467, 487, 488, 524, 570, 693, 695, 698, 702, 716, 717, 719, 720, 722, 731, 732, 747, 750, 757, 762, 763, 765, 766, 775, 796, 810, 816, 818, 819, 885, 908, 910, 911, 960, 1029, 1061, 1062, 1237, 1246, 1264], "even": [33, 42, 129, 310, 441, 575, 578, 775, 885, 891, 1020, 1123, 1246], "evenli": [202, 310, 814, 885], "event": [54, 797, 885], "eventu": [34, 310], "everi": [14, 33, 42, 129, 130, 134, 140, 143, 196, 202, 264, 280, 310, 338, 339, 340, 341, 344, 346, 352, 381, 382, 383, 384, 385, 419, 432, 446, 458, 489, 490, 494, 497, 500, 501, 502, 510, 513, 518, 522, 590, 634, 711, 712, 775, 812, 814, 885, 910, 911, 912, 913, 916, 918, 924, 956, 957, 958, 959, 960, 997, 1010, 1024, 1033, 1063, 1064, 1068, 1071, 1074, 1075, 1076, 1084, 1087, 1092, 1096, 1134, 1172, 1246], "everybodi": [629, 650, 1167, 1188], "everyth": 891, "ew": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "ewm_mean": [775, 1246], "ewm_mean_bi": [775, 1246], "ewm_std": [775, 1246], "ewm_var": [775, 1246], "ewma": [441, 775, 1020, 1246], "exact": [157, 159, 163, 217, 254, 310, 326, 454, 634, 660, 661, 662, 664, 665, 685, 775, 1172, 1200, 1202, 1203], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 310, 654, 655, 660, 661, 721, 885, 1155, 1192, 1193, 1198, 1199, 1246], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 787, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 889, 890, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274], "exc_tb": 1272, "exc_typ": 1272, "exc_val": 1272, "exce": [200, 310], "excel": [32, 36, 128, 134, 310, 787], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 152, 183, 197, 204, 217, 219, 261, 310, 371, 586, 640, 663, 723, 775, 787, 803, 819, 885, 891, 941, 1038, 1060, 1130, 1178, 1201, 1218, 1227, 1246, 1271], "exclud": [159, 163, 202, 310, 370, 381, 384, 393, 470, 539, 684, 703, 771, 775, 814, 885, 891, 967, 1043, 1246], "excluded_dtyp": [159, 160, 163], "exclus": [243, 310, 692, 698, 731, 732, 775], "execut": [35, 46, 55, 131, 132, 218, 257, 310, 388, 496, 689, 754, 775, 792, 796, 802, 823, 832, 846, 885, 889, 1070, 1235, 1246, 1255, 1256, 1257, 1259, 1272, 1274], "execute_glob": 1272, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 183, 197, 235, 274, 279, 284, 285, 310, 321, 363, 366, 368, 397, 418, 705, 775, 799, 803, 805, 834, 837, 854, 856, 857, 858, 885, 891, 971, 996, 1274], "existing_t": 1274, "existing_table_path": [35, 310], "exit": [46, 84, 168, 1260, 1272], "exp": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246, 1265], "exp_a": 1266, "expand": [129, 141, 143, 148, 446, 538, 540, 584, 775, 889, 891, 1024, 1246], "expand_selector": 891, "expans": 673, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 524, 533, 735, 775, 821, 823, 885], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 214, 220, 243, 244, 245, 274, 275, 310, 533, 775, 799, 801, 805, 837, 851, 856, 885, 1025, 1105, 1246, 1275], "experiment": [272, 310, 857, 885], "explain": [53, 54, 218, 310, 796, 797, 885, 1271], "explainformat": [806, 885], "explicit": [36, 91, 131, 143, 157, 257, 279, 310, 749, 846, 854, 885], "explicitli": [91, 132, 157, 159, 168, 197, 310, 585, 757, 775, 786, 1272], "explod": [310, 370, 452, 571, 587, 684, 775, 885, 889, 1131, 1246, 1263], "explor": [181, 310, 801, 885], "expon": [576, 775, 1246, 1266], "exponenti": [440, 441, 442, 443, 445, 576, 775, 1019, 1020, 1021, 1022, 1023, 1246, 1266], "export": [36, 37, 38, 170, 214, 215, 244, 245, 262, 264, 267, 310, 771, 891, 893, 1221, 1246], "expos": 787, "expr": [1, 47, 48, 49, 50, 51, 189, 191, 192, 216, 217, 231, 235, 243, 248, 249, 267, 272, 284, 285, 310, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 770, 771, 775, 776, 777, 780, 781, 782, 783, 784, 807, 808, 809, 818, 819, 833, 838, 839, 857, 858, 885, 889, 891, 960, 967, 970, 971, 985, 993, 1020, 1027, 1028, 1032, 1070, 1076, 1092, 1096, 1166, 1171, 1177, 1194, 1246, 1270], "expr1": [1264, 1272], "expr2": [1264, 1272], "expr_unique_subset": [231, 310], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 173, 189, 191, 193, 201, 216, 217, 220, 231, 235, 243, 248, 249, 253, 256, 267, 272, 273, 284, 285, 287, 289, 296, 310, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 335, 336, 340, 341, 342, 343, 344, 347, 358, 363, 364, 365, 366, 367, 368, 370, 375, 376, 377, 378, 379, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 444, 446, 447, 449, 450, 454, 456, 457, 459, 460, 461, 462, 467, 470, 471, 472, 473, 474, 475, 476, 484, 485, 489, 490, 492, 493, 496, 497, 503, 505, 523, 524, 530, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 550, 552, 554, 555, 557, 559, 561, 562, 565, 566, 568, 570, 571, 575, 576, 577, 578, 580, 584, 585, 586, 587, 589, 590, 612, 613, 614, 617, 619, 620, 622, 624, 627, 628, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 648, 649, 652, 653, 654, 655, 663, 667, 676, 677, 680, 681, 684, 685, 686, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 741, 744, 747, 749, 750, 751, 752, 753, 755, 757, 759, 761, 762, 763, 765, 766, 771, 774, 787, 791, 796, 797, 806, 807, 810, 813, 818, 819, 832, 838, 839, 842, 843, 845, 850, 857, 858, 859, 861, 862, 869, 885, 889, 891, 915, 950, 960, 967, 970, 971, 985, 1020, 1026, 1043, 1067, 1070, 1105, 1129, 1130, 1149, 1153, 1166, 1168, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1186, 1187, 1201, 1205, 1246, 1263, 1264, 1266, 1267, 1271], "exprlistnamespac": [452, 775], "exprmetanamespac": [537, 541], "exprnamespac": 497, "ext": 131, "extend": [0, 119, 282, 310, 447, 775, 787, 889, 898, 1026, 1246], "extend_const": [775, 1246], "extens": [269, 310, 1228, 1246], "extern": [859, 885], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 190, 202, 310, 775, 814, 885, 889, 1025, 1246], "extract": [123, 257, 310, 396, 399, 401, 404, 406, 407, 408, 409, 410, 411, 414, 416, 417, 420, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 575, 636, 637, 638, 642, 643, 652, 654, 775, 970, 973, 974, 975, 978, 980, 984, 985, 986, 988, 989, 992, 994, 995, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1174, 1175, 1176, 1180, 1181, 1190, 1265], "extract_numb": [575, 775], "extracted_nr": 636, "extrem": [447, 592, 775, 1026, 1135, 1246], "extrema": [616, 775, 1154, 1246], "f": [48, 130, 131, 193, 200, 215, 262, 268, 274, 278, 310, 319, 359, 367, 524, 616, 634, 662, 665, 705, 775, 810, 885, 891, 931, 1098, 1172, 1200, 1203, 1263], "f32": [1, 50, 174, 257, 266, 272, 310, 616, 754, 775, 793, 846, 885, 891, 1104, 1246, 1270], "f4": [268, 310], "f5ed2452": [36, 310], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 174, 175, 176, 179, 181, 182, 183, 186, 191, 192, 195, 199, 200, 201, 202, 207, 208, 216, 217, 222, 223, 224, 225, 229, 235, 236, 237, 255, 256, 258, 260, 272, 281, 284, 289, 292, 294, 297, 298, 299, 300, 302, 303, 310, 318, 321, 327, 328, 329, 330, 331, 332, 350, 356, 361, 367, 371, 373, 374, 376, 377, 378, 386, 387, 391, 392, 420, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 453, 454, 459, 461, 468, 469, 477, 478, 479, 480, 482, 484, 496, 507, 508, 520, 526, 527, 528, 529, 531, 534, 535, 536, 549, 552, 554, 563, 564, 565, 566, 572, 576, 578, 579, 580, 581, 585, 586, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 619, 620, 621, 625, 626, 676, 680, 681, 685, 690, 699, 700, 704, 705, 707, 709, 722, 723, 737, 740, 741, 742, 754, 756, 764, 771, 775, 793, 794, 801, 803, 808, 809, 813, 814, 817, 818, 819, 825, 826, 833, 845, 847, 855, 857, 859, 862, 865, 867, 870, 871, 872, 873, 875, 876, 885, 891, 899, 900, 901, 902, 903, 904, 922, 928, 933, 938, 946, 947, 952, 953, 954, 961, 962, 965, 966, 998, 1019, 1020, 1021, 1022, 1023, 1027, 1031, 1039, 1041, 1042, 1070, 1081, 1082, 1094, 1100, 1101, 1102, 1103, 1119, 1123, 1125, 1130, 1135, 1137, 1138, 1140, 1141, 1142, 1144, 1145, 1146, 1158, 1159, 1163, 1219, 1220, 1234, 1246, 1254, 1262, 1263, 1266, 1269, 1272, 1275], "f_string": 726, "fa1e": [667, 1205], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [177, 310], "factor": [440, 442, 443, 682, 775, 1019, 1021, 1022, 1229, 1246], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 171, 268, 275, 310, 336, 422, 524, 662, 664, 665, 669, 775, 851, 885, 1105, 1200, 1202, 1203, 1207, 1227, 1246, 1270], "fall": [148, 386, 578, 775, 796, 885, 961, 1123, 1246], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 171, 173, 174, 175, 176, 181, 187, 195, 199, 200, 201, 202, 206, 207, 209, 210, 211, 214, 216, 217, 218, 223, 224, 230, 231, 233, 235, 236, 243, 244, 245, 246, 248, 251, 254, 256, 257, 260, 263, 265, 268, 269, 273, 274, 275, 279, 280, 282, 284, 292, 294, 297, 298, 300, 303, 310, 322, 323, 324, 335, 338, 339, 342, 346, 347, 355, 360, 363, 366, 368, 370, 371, 380, 381, 382, 383, 384, 385, 386, 393, 405, 420, 437, 438, 439, 440, 442, 443, 461, 462, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 492, 496, 499, 501, 503, 512, 519, 525, 531, 532, 533, 537, 539, 541, 543, 546, 565, 566, 568, 570, 573, 574, 578, 581, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 612, 614, 616, 621, 623, 624, 627, 628, 629, 630, 633, 638, 639, 641, 642, 648, 649, 650, 653, 654, 656, 662, 664, 665, 667, 684, 686, 689, 692, 693, 694, 695, 696, 698, 701, 702, 703, 706, 707, 710, 711, 716, 717, 719, 720, 731, 732, 735, 747, 750, 754, 757, 762, 763, 765, 766, 775, 791, 793, 794, 795, 796, 797, 801, 806, 813, 814, 818, 819, 821, 823, 832, 838, 841, 843, 845, 846, 850, 851, 854, 857, 865, 867, 870, 871, 873, 876, 885, 889, 891, 896, 897, 907, 910, 911, 914, 918, 919, 927, 932, 934, 935, 937, 939, 941, 943, 945, 948, 949, 955, 956, 957, 958, 959, 960, 961, 967, 979, 998, 1016, 1017, 1019, 1021, 1022, 1029, 1030, 1034, 1035, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1066, 1070, 1073, 1075, 1077, 1086, 1093, 1099, 1111, 1117, 1120, 1121, 1123, 1125, 1126, 1127, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1151, 1155, 1160, 1162, 1165, 1166, 1167, 1168, 1171, 1176, 1177, 1179, 1180, 1186, 1187, 1188, 1191, 1192, 1194, 1200, 1202, 1203, 1205, 1222, 1227, 1228, 1232, 1235, 1237, 1246, 1255, 1257, 1263, 1267, 1272], "far": [36, 310], "fashion": [216, 310, 806, 832, 843, 885], "fast": [41, 43, 45, 162, 164, 310, 447, 614, 775, 885, 889, 1026, 1151, 1246, 1275], "fast_executemani": [34, 310], "faster": [42, 43, 44, 45, 131, 134, 190, 268, 278, 310, 533, 687, 775, 885, 1025, 1105, 1246], "fastexcel": [134, 151], "favor": [34, 310], "fay": 126, "feat1": [267, 272, 310], "feat2": [267, 272, 310], "feather": [37, 135, 146, 310, 787], "featur": [1, 41, 52, 63, 65, 267, 272, 310], "feature_0": [859, 885], "feature_0_train": [859, 885], "feature_1": [859, 885], "feature_nam": [272, 310], "feb": [151, 1267], "februari": 1267, "fed": 658, "feel": [629, 650, 1167, 1188], "fetch": [125, 796, 815, 822, 885], "fetch_california_h": [272, 310], "few": [200, 310], "fewer": [640, 663, 885, 1178, 1201], "ff": 1262, "ff00": [667, 1205], "fff": 1, "ffff00": [364, 365, 631, 935, 936, 1169], "ffffff": [36, 310], "ffi": [188, 310, 1018, 1246], "fgg": 891, "fghi": 1267, "fh": 130, "fiction": 1254, "field": [32, 33, 35, 42, 76, 109, 112, 119, 276, 310, 359, 524, 532, 533, 556, 558, 560, 589, 636, 637, 642, 654, 655, 675, 676, 689, 711, 712, 736, 757, 775, 852, 885, 931, 1098, 1105, 1133, 1175, 1192, 1193, 1214, 1216, 1246, 1268], "field_0": [359, 524, 931, 1098], "field_1": [359, 524, 931, 1098], "field_2": [931, 1098], "field_n": [359, 524, 931, 1098], "field_nam": [533, 775, 1105, 1246], "figsiz": [832, 843, 885], "figur": [611, 775, 843, 885, 1146, 1246], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 190, 250, 310, 388, 456, 545, 548, 558, 560, 775, 802, 840, 885, 889, 1025, 1246], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 310], "fill": [47, 55, 175, 191, 192, 253, 278, 310, 314, 362, 381, 384, 448, 449, 455, 468, 469, 593, 595, 597, 599, 601, 604, 606, 608, 615, 726, 747, 750, 766, 775, 808, 809, 842, 859, 885, 1027, 1028, 1041, 1042, 1116, 1136, 1137, 1139, 1142, 1143, 1144, 1153, 1246], "fill_char": [646, 647, 1184, 1185], "fill_nan": [192, 310, 449, 775, 809, 885, 1028, 1246], "fill_nul": [47, 191, 310, 448, 775, 808, 859, 885, 1027, 1246], "fill_valu": [253, 278, 310, 615, 775, 842, 885, 1153, 1246], "fillnullstrategi": [192, 310, 449, 775, 809, 885, 1028, 1246], "film": 1254, "filter": [1, 48, 133, 143, 144, 148, 149, 185, 209, 210, 211, 235, 296, 310, 542, 544, 633, 656, 691, 715, 718, 725, 754, 765, 775, 804, 816, 846, 869, 885, 891, 1150, 1246, 1261], "final": [13, 36, 47, 148, 217, 218, 310, 440, 442, 443, 775, 801, 885, 889, 1019, 1021, 1022, 1246, 1273], "find": [55, 198, 310, 613, 628, 629, 775, 1149, 1167, 1246], "find_pat": 639, "fine": [796, 885], "finish": [190, 310, 1025, 1246], "finit": [472, 685, 707, 775, 1046, 1246], "first": [41, 47, 129, 130, 134, 135, 137, 140, 141, 143, 148, 152, 153, 154, 155, 200, 202, 204, 217, 219, 220, 230, 234, 235, 242, 261, 265, 266, 274, 275, 280, 287, 293, 310, 335, 337, 346, 385, 389, 413, 415, 419, 435, 454, 464, 473, 486, 494, 496, 501, 502, 524, 532, 533, 543, 575, 576, 591, 613, 624, 628, 634, 635, 639, 640, 642, 643, 648, 649, 663, 670, 704, 711, 725, 729, 765, 771, 775, 796, 814, 815, 819, 822, 831, 836, 851, 859, 861, 866, 885, 891, 907, 918, 960, 962, 963, 991, 993, 997, 1013, 1038, 1047, 1060, 1068, 1070, 1075, 1076, 1098, 1105, 1149, 1162, 1172, 1173, 1175, 1177, 1178, 1180, 1181, 1186, 1187, 1201, 1208, 1218, 1222, 1224, 1227, 1246, 1264, 1265, 1267, 1273, 1275], "first_column": [36, 310], "first_non_nul": [524, 1098], "first_part": [654, 655, 1192, 1193], "fisher": [482, 621, 775, 1058, 1160, 1246], "fit": [126, 214, 254, 278, 310, 616, 750, 775, 1154, 1155, 1246], "five": [271, 310, 1275], "fix": [10, 56, 65, 157, 435, 721, 1013], "flag": [52, 156, 268, 310, 614, 628, 635, 636, 639, 648, 649, 775, 806, 823, 885, 891, 1151, 1166, 1173, 1174, 1177, 1186, 1187, 1227, 1246, 1267], "flat": [126, 245, 310, 497, 587, 775, 1071, 1131, 1246], "flatten": 775, "flavour": [36, 131, 310], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 171, 181, 188, 191, 217, 237, 246, 267, 268, 302, 310, 342, 374, 386, 391, 392, 420, 437, 438, 439, 440, 442, 443, 448, 453, 454, 459, 461, 468, 472, 475, 477, 478, 479, 480, 484, 492, 512, 527, 531, 534, 549, 563, 564, 565, 566, 576, 578, 579, 592, 593, 595, 597, 599, 601, 602, 604, 606, 608, 610, 612, 685, 748, 750, 775, 801, 808, 819, 833, 843, 875, 885, 891, 914, 941, 947, 961, 962, 964, 965, 966, 998, 1016, 1018, 1019, 1021, 1022, 1027, 1031, 1039, 1058, 1066, 1086, 1101, 1114, 1115, 1122, 1123, 1124, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1150, 1160, 1164, 1217, 1227, 1236, 1246, 1272, 1275], "float16": [272, 310], "float32": [1, 10, 33, 42, 50, 174, 195, 266, 267, 268, 272, 310, 441, 735, 775, 793, 885, 891, 1020, 1045, 1104, 1225, 1227, 1230, 1246], "float4": [257, 310, 754, 846, 885, 1270], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 177, 186, 188, 195, 247, 272, 284, 310, 327, 328, 329, 330, 331, 332, 371, 376, 377, 378, 387, 420, 441, 444, 477, 478, 580, 619, 620, 680, 681, 723, 747, 750, 766, 771, 775, 798, 805, 837, 857, 885, 891, 998, 1020, 1228, 1234, 1246], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 310, 885], "float_scientif": [33, 42, 310, 885], "floatfmt": 11, "floor": [49, 454, 775, 1246, 1265], "floor_a": 1266, "floordiv": [685, 775], "fmt": [11, 217, 310, 467, 726, 775, 816, 885], "fmt_number": [310, 314], "fmt_str_length": [12, 717, 720], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 310], "fn": [711, 712, 725, 749], "foggi": [648, 649, 1186, 1187], "fold": [310, 543, 704, 711, 712, 749], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 134, 140, 143, 144, 145, 152, 202, 217, 220, 234, 242, 268, 280, 310, 415, 419, 432, 441, 532, 575, 576, 581, 591, 594, 596, 598, 600, 602, 603, 605, 607, 609, 675, 685, 700, 716, 717, 719, 720, 737, 762, 763, 765, 767, 768, 770, 775, 776, 777, 780, 782, 783, 784, 814, 819, 831, 836, 885, 891, 993, 997, 1010, 1020, 1125, 1148, 1150, 1227, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1270, 1275], "font": [36, 310], "font_color": [36, 310], "font_siz": [36, 310], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 174, 177, 178, 179, 183, 184, 185, 186, 187, 190, 193, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 216, 219, 220, 221, 222, 223, 224, 225, 228, 229, 232, 235, 237, 239, 240, 243, 246, 247, 248, 250, 252, 255, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 274, 275, 276, 281, 282, 283, 288, 310, 372, 386, 388, 415, 458, 464, 467, 486, 537, 539, 541, 542, 543, 544, 545, 546, 547, 578, 587, 627, 630, 632, 634, 636, 637, 641, 651, 653, 655, 657, 658, 659, 660, 661, 668, 671, 679, 697, 707, 708, 709, 724, 728, 729, 730, 733, 734, 738, 740, 742, 743, 745, 746, 748, 753, 756, 760, 764, 765, 771, 775, 793, 798, 799, 803, 804, 805, 810, 816, 817, 818, 830, 834, 837, 838, 851, 852, 856, 859, 885, 890, 891, 942, 961, 993, 1077, 1123, 1131, 1168, 1170, 1172, 1174, 1175, 1189, 1193, 1198, 1199, 1206, 1209, 1246, 1259, 1261, 1262, 1263, 1264, 1267, 1270], "foo1": 1267, "foo11": [195, 310], "foo_": [540, 653, 726], "foo_1": [265, 310], "foo_2": [265, 310], "foo_3_4": 1267, "foo_a": [235, 310], "foo_a_bar_1": 726, "foo_at_1": 1263, "foo_b": [235, 310], "foo_b_bar_2": 726, "foo_bar": [537, 541, 653, 735, 1259], "foo_bar2": [537, 541], "foo_bar_baz": 653, "foo_c_bar_3": 726, "foo_low": [668, 1267], "foo_mean": 1263, "foo_std": 1262, "foo_strip": 657, "foo_strip_end": 658, "foo_strip_start": 659, "foo_sum": [1262, 1263], "foo_uniqu": 1263, "foo_upp": [671, 1267], "foo_var": 1262, "foobar": [660, 661, 1198, 1199, 1267], "foobarbar": [661, 1199], "foofoobar": [660, 1198], "foral": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "forc": [217, 220, 268, 296, 310, 524, 818, 819, 869, 885, 1105, 1227, 1246], "force_parallel": [217, 310, 818, 819, 885], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 214, 244, 278, 310, 572, 670, 775, 885, 1119, 1208, 1246, 1267], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 134, 135, 137, 140, 143, 149, 170, 182, 189, 200, 214, 226, 235, 244, 245, 250, 264, 277, 308, 310, 314, 388, 419, 421, 424, 545, 546, 662, 664, 665, 669, 721, 775, 802, 806, 807, 827, 840, 853, 885, 893, 999, 1002, 1200, 1202, 1203, 1207, 1245, 1267, 1268], "formula": [36, 310, 437, 775, 1016, 1246], "fortran": [267, 268, 310], "forward": [192, 217, 253, 310, 354, 393, 412, 449, 455, 517, 615, 775, 809, 819, 842, 885, 926, 967, 990, 1028, 1091, 1153, 1246], "forward_fil": [280, 310, 362, 381, 384, 615, 775], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 186, 257, 310, 613, 639, 643, 660, 661, 662, 665, 775, 846, 885, 1149, 1177, 1181, 1198, 1199, 1200, 1203, 1246, 1257, 1272], "four": [271, 310, 1272], "fourth": [482, 775, 1058, 1246], "frac": [440, 442, 443, 621, 775, 1019, 1021, 1022, 1160, 1246], "fraction": [33, 42, 152, 153, 154, 155, 246, 310, 420, 512, 572, 612, 662, 665, 775, 885, 998, 1086, 1119, 1147, 1200, 1203, 1246], "fragment": 1272, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 174, 175, 181, 214, 215, 218, 220, 227, 231, 234, 243, 244, 245, 257, 272, 278, 279, 310, 754, 793, 794, 801, 828, 831, 846, 854, 885, 891, 949, 1246, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1271, 1275], "frame_data": [1256, 1259], "frameinittyp": [310, 885], "frametyp": [47, 1272], "framework": [235, 277, 310, 853, 885], "freedom": [258, 281, 310, 520, 526, 604, 605, 608, 609, 626, 690, 707, 709, 751, 752, 756, 764, 775, 847, 855, 885, 1142, 1144, 1164, 1236, 1246], "freeli": [754, 846, 885, 891], "freez": [36, 310], "freeze_pan": [36, 310], "frequenc": [280, 310, 689, 775, 1235, 1246], "frequent": [1148, 1150, 1246], "fridai": [202, 310, 393, 421, 424, 703, 814, 885, 967, 999, 1002], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 174, 181, 182, 183, 188, 190, 193, 194, 200, 202, 214, 215, 216, 217, 218, 226, 235, 239, 242, 243, 245, 246, 248, 249, 257, 265, 272, 274, 275, 277, 278, 279, 280, 286, 310, 313, 314, 359, 367, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 444, 454, 456, 468, 482, 500, 512, 524, 533, 563, 564, 566, 571, 572, 575, 578, 580, 591, 592, 594, 596, 598, 600, 602, 605, 607, 609, 612, 624, 635, 636, 640, 642, 652, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 687, 699, 700, 703, 704, 715, 716, 717, 718, 719, 720, 721, 735, 750, 754, 761, 762, 763, 771, 774, 775, 793, 801, 802, 803, 810, 814, 818, 819, 827, 834, 836, 838, 839, 846, 851, 853, 854, 859, 860, 885, 891, 931, 938, 961, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1025, 1058, 1074, 1086, 1098, 1114, 1115, 1116, 1119, 1123, 1135, 1147, 1173, 1174, 1178, 1180, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1207, 1222, 1237, 1246, 1254, 1255, 1256, 1257, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275], "from_arrai": 754, "from_arrow": 117, "from_json": 775, "from_panda": 117, "from_repr": [266, 310, 1224, 1246], "fromkei": [48, 50], "front": [202, 310, 814, 885], "fruit": [263, 310, 588, 633, 656, 663, 775, 1171, 1194, 1201], "fruits_revers": [588, 775], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 143, 144, 145, 147, 149, 216, 279, 310, 640, 642, 662, 663, 664, 665, 669, 716, 717, 818, 823, 854, 885, 891, 1178, 1180, 1200, 1201, 1202, 1203, 1207, 1246, 1261, 1275], "full_sent": 706, "fulli": [161, 234, 246, 268, 310], "funcnam": [36, 310], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 171, 173, 179, 182, 188, 195, 220, 226, 234, 235, 239, 257, 267, 268, 269, 272, 273, 274, 277, 278, 279, 296, 310, 313, 314, 322, 359, 369, 370, 385, 386, 388, 419, 440, 442, 443, 465, 524, 532, 533, 555, 556, 571, 575, 578, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 621, 682, 683, 684, 693, 697, 708, 710, 711, 712, 724, 725, 727, 729, 730, 733, 736, 737, 740, 742, 745, 747, 749, 751, 752, 756, 760, 764, 766, 771, 775, 787, 791, 797, 802, 823, 827, 831, 834, 846, 850, 853, 854, 861, 869, 885, 889, 931, 940, 945, 960, 961, 997, 1018, 1019, 1021, 1022, 1039, 1098, 1105, 1123, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1150, 1155, 1160, 1225, 1228, 1230, 1231, 1246, 1250, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275], "function_nam": 889, "further": 771, "futur": [54, 171, 181, 251, 310, 797, 801, 841, 885], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 171, 182, 213, 268, 278, 310, 319, 388, 441, 444, 533, 616, 723, 775, 802, 834, 885, 1020, 1246, 1275], "g1": [450, 691, 775], "g2": [450, 691, 775], "g_1": [621, 775, 1160, 1246], "gag": 26, "galleri": [310, 313, 1246, 1250], "gamma": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "gantt": [832, 885], "gather": [130, 196, 310, 335, 458, 500, 701, 775, 812, 885, 907, 1033, 1074, 1246], "gather_everi": [310, 775, 885, 1246], "gb": [188, 310, 1018, 1246], "gbp": 1275, "gc": [35, 133, 144, 145, 310], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [217, 310, 819, 885], "gdp2": [217, 310], "gdp_date": [217, 310], "ge": [775, 1246], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 171, 177, 179, 235, 246, 265, 268, 274, 310, 371, 512, 612, 617, 698, 716, 719, 731, 732, 734, 750, 762, 763, 775, 885, 941, 1086, 1147, 1156, 1222, 1246, 1275], "geq": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "germani": [217, 310], "get": [47, 54, 136, 142, 149, 173, 177, 178, 186, 194, 197, 199, 202, 204, 205, 209, 211, 212, 219, 222, 229, 230, 235, 242, 243, 247, 252, 255, 261, 269, 273, 283, 293, 304, 310, 320, 333, 334, 335, 337, 345, 348, 360, 367, 370, 372, 381, 382, 383, 384, 393, 403, 451, 457, 464, 481, 483, 486, 498, 504, 525, 534, 535, 536, 542, 544, 549, 563, 564, 573, 574, 579, 590, 591, 622, 626, 634, 678, 679, 683, 684, 686, 690, 701, 703, 724, 729, 733, 737, 738, 739, 740, 742, 743, 744, 746, 756, 760, 764, 775, 791, 796, 797, 799, 805, 811, 814, 815, 820, 822, 836, 837, 844, 849, 850, 856, 866, 877, 885, 889, 890, 905, 906, 907, 908, 909, 917, 920, 932, 938, 942, 948, 956, 957, 958, 959, 967, 977, 1015, 1030, 1034, 1038, 1043, 1044, 1056, 1060, 1072, 1078, 1099, 1106, 1108, 1109, 1111, 1113, 1114, 1115, 1120, 1121, 1124, 1134, 1161, 1164, 1172, 1218, 1222, 1228, 1232, 1236, 1246], "get_chunk": 1246, "get_column": [171, 270, 310], "get_column_index": 310, "get_worksheet_by_nam": [36, 310], "gevent": [54, 151, 797, 885], "ghi": [319, 636, 775, 891, 1174], "gil": [533, 775], "git": 52, "github": [132, 310], "give": [139, 146, 147, 217, 226, 275, 277, 310, 403, 454, 482, 584, 685, 689, 775, 787, 827, 851, 853, 885, 977, 1058, 1235, 1246, 1271], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 188, 189, 191, 202, 212, 220, 233, 234, 243, 244, 245, 253, 256, 272, 279, 310, 342, 354, 359, 367, 370, 375, 394, 398, 421, 423, 424, 437, 441, 465, 470, 492, 517, 524, 527, 533, 571, 575, 581, 584, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 615, 636, 637, 646, 647, 662, 665, 672, 675, 684, 723, 724, 733, 736, 737, 750, 751, 752, 775, 807, 814, 823, 831, 842, 845, 854, 869, 885, 890, 891, 914, 926, 931, 938, 950, 968, 972, 999, 1001, 1002, 1016, 1018, 1020, 1039, 1043, 1057, 1066, 1091, 1098, 1101, 1104, 1105, 1116, 1125, 1131, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1149, 1153, 1174, 1175, 1184, 1185, 1200, 1203, 1210, 1234, 1237, 1246, 1254, 1256, 1261, 1263, 1266, 1267, 1272, 1274, 1275], "glimps": [181, 204, 310], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 257, 310, 585, 586, 754, 775, 846, 885, 943, 944, 1129, 1130, 1246, 1255, 1257, 1271], "gmt": [398, 402, 418, 972, 976, 996], "go": [12, 129, 130, 143, 633, 1171], "godfath": 1254, "goe": 12, "gonfruit": 1201, "good": [41, 43, 45, 214, 310, 885, 1266], "goodby": 1, "googl": [133, 144, 145], "gpu": [267, 310, 796, 885, 1225, 1246], "gpu_devic": [267, 310], "gpudevic": [267, 310], "gpuengin": [796, 885], "grade": [1058, 1246], "grain": [796, 885], "granular": 1272, "grape": 1267, "graph": [53, 131, 218, 310, 796, 816, 859, 885], "graphviz": [218, 310, 843, 885], "great": [310, 314], "great_tabl": [310, 314], "greater": [175, 217, 310, 459, 461, 470, 621, 646, 647, 655, 672, 775, 819, 885, 1043, 1160, 1184, 1185, 1193, 1210, 1246], "greatest": [1262, 1265], "greatli": [135, 146], "green": [46, 84, 85, 296, 689, 775, 869, 1235, 1246], "greenlet": [54, 797, 885], "greet": 1, "grid": [468, 775], "grid_point": [468, 775], "gridlin": [36, 310], "gross": 1254, "group": [9, 27, 41, 45, 130, 148, 174, 201, 202, 215, 231, 233, 235, 242, 245, 278, 280, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 320, 370, 385, 446, 452, 457, 460, 496, 532, 533, 542, 544, 571, 581, 590, 591, 623, 624, 628, 635, 636, 637, 639, 648, 649, 684, 689, 737, 775, 793, 813, 814, 836, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 889, 891, 960, 1070, 1134, 1166, 1173, 1174, 1175, 1177, 1186, 1187, 1235, 1246, 1254, 1262, 1271, 1272], "group_bi": [202, 231, 235, 242, 280, 309, 310, 320, 370, 450, 452, 457, 460, 532, 533, 571, 623, 624, 684, 691, 737, 775, 796, 797, 806, 814, 832, 836, 843, 883, 885, 891], "group_by_dynam": [242, 310, 836, 885], "group_by_partit": [832, 885], "group_col": [450, 691, 775], "group_df": [296, 869], "group_dtyp": [571, 775], "group_index": [635, 1173], "group_to_row": [571, 775], "groupbi": [201, 310, 533, 737, 775], "grow": [282, 310], "grown": [206, 310], "gt": [310, 314, 775, 1246], "gte": [450, 691, 775], "guarante": [41, 45, 129, 130, 173, 181, 203, 273, 275, 310, 369, 370, 463, 683, 684, 775, 791, 801, 850, 851, 885, 940, 1037, 1231, 1246], "guid": [775, 889, 1275], "gzip": [41, 45, 310, 885], "h": [278, 310, 319, 421, 424, 616, 648, 649, 662, 665, 669, 775, 1186, 1187, 1200, 1203, 1207, 1267, 1268], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 171, 280, 286, 291, 310, 369, 370, 385, 456, 532, 543, 548, 640, 663, 673, 683, 684, 724, 733, 771, 775, 797, 860, 864, 869, 885, 940, 949, 960, 962, 1178, 1201, 1231, 1246], "half": [272, 310, 419, 440, 441, 442, 443, 775, 997, 1019, 1020, 1021, 1022, 1246], "half_lif": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "ham": [31, 33, 35, 37, 38, 41, 174, 177, 178, 179, 183, 184, 185, 186, 187, 193, 198, 203, 204, 206, 216, 219, 221, 223, 225, 228, 232, 237, 239, 240, 243, 246, 247, 248, 255, 258, 259, 261, 265, 266, 268, 269, 270, 275, 281, 282, 310, 372, 546, 771, 793, 798, 799, 803, 804, 805, 810, 818, 830, 834, 837, 838, 851, 859, 885, 942, 1261, 1262], "ham_a": [265, 310], "ham_b": [265, 310], "ham_right": [216, 310, 818, 885], "hamburg": 771, "hand": [36, 129, 130, 143, 310, 513, 514, 515, 516, 1087, 1088, 1089, 1090], "handi": [393, 703, 967], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 193, 197, 310, 389, 494, 634, 672, 775, 796, 797, 810, 885, 889, 963, 1068, 1172, 1210, 1246], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 182, 310, 388, 775, 802, 885], "happen": [131, 398, 578, 775, 972, 1123, 1246], "hard": [143, 823, 885], "harder": [202, 310, 814, 885], "hardwar": 1275, "has_head": [129, 130, 134, 140, 143], "has_nul": [775, 1036, 1246], "has_prefix": 656, "has_suffix": 633, "has_two": 1263, "has_valid": 1246, "hash": [203, 310, 775, 1246], "hash_row": 310, "hat": [648, 649, 1186, 1187], "have": [5, 14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 182, 190, 214, 216, 217, 235, 238, 242, 244, 245, 264, 272, 287, 310, 385, 388, 440, 442, 443, 533, 543, 581, 585, 586, 591, 637, 775, 802, 818, 827, 836, 860, 861, 885, 889, 891, 960, 962, 1019, 1021, 1022, 1025, 1125, 1129, 1130, 1246, 1271, 1273, 1275], "haystack": [636, 1174], "he": 658, "head": [143, 200, 219, 261, 310, 325, 486, 571, 775, 822, 885, 1060, 1218, 1246], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 140, 143, 186, 274, 310, 885], "header_format": [36, 310], "header_nam": [274, 310], "headerless": 143, "heap": [188, 310, 775, 889, 1018, 1246], "heatmap": [36, 310], "heavili": 148, "height": [36, 126, 159, 185, 310], "hell": [657, 1195], "hello": [1, 20, 657, 658, 659, 891, 1077, 1195, 1196, 1197, 1256, 1259], "hello_": 726, "hello_data": 1259, "hello_world": 1259, "help": [36, 152, 153, 154, 155, 310, 313, 885, 1246, 1250], "helper": [310, 314, 771], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 235, 310, 393, 532, 533, 637, 643, 703, 775, 843, 885, 891, 967, 1181], "hex": [364, 365, 631, 632, 667, 935, 936, 1169, 1170, 1205], "hexadecim": [935, 936], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1267], "hidden": [36, 310], "hidden_column": [36, 310], "hide": [21, 22, 23, 24, 36, 310], "hide_gridlin": [36, 310], "hide_password": 131, "high": [245, 310, 314, 578, 775, 787, 1123, 1246], "higher": [41, 45, 181, 237, 302, 310, 579, 601, 602, 748, 775, 801, 833, 875, 885, 962, 1124, 1140, 1246], "highest": [310, 314, 581, 688, 707, 775, 885, 1125, 1246], "highli": [775, 889], "hippopotamu": [646, 647, 1184, 1185], "hist": [775, 1246, 1250], "histogram": [1246, 1250], "hit": [792, 885], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 891, "hold": [254, 268, 310, 1227, 1246], "holidai": [393, 703, 967], "home": [670, 1208], "horizont": [20, 55, 92, 195, 206, 222, 224, 229, 260, 278, 310, 694, 696, 705, 706, 711, 712, 714, 722, 725, 739, 741, 744, 749, 759, 859, 885], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 202, 217, 242, 280, 310, 407, 409, 410, 414, 415, 419, 420, 426, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 718, 719, 720, 721, 761, 762, 763, 775, 814, 819, 836, 885, 891, 993, 997, 1004, 1010, 1020, 1246, 1268], "hours_diff": 426, "hous": [272, 310], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 185, 193, 216, 217, 235, 278, 279, 310, 343, 389, 418, 468, 493, 494, 571, 584, 603, 662, 665, 703, 718, 765, 775, 804, 810, 818, 854, 859, 885, 889, 915, 963, 996, 1067, 1068, 1141, 1200, 1203, 1246], "howev": [1, 119, 131, 188, 220, 268, 310, 796, 885, 1018, 1246], "hstack": [92, 310], "html": [36, 37, 38, 117, 131, 135, 137, 170, 171, 179, 310, 893], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 171, 179, 310, 635, 637, 843, 885, 893, 1173, 1175], "hug": [139, 141, 143, 146, 147, 148], "hut": [648, 649, 1186, 1187], "hvplot": [151, 310, 313, 1246, 1250], "hvplottabularpolar": [310, 313, 1246, 1250], "hyperbol": [328, 330, 332, 377, 620, 681, 775, 900, 902, 904, 953, 1159, 1220, 1246], "hyperloglog": [172, 310, 326, 697, 775, 790, 885], "hyphen": [627, 1165], "hypothesi": [157, 159, 162, 163, 1275], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 172, 173, 176, 177, 181, 182, 185, 187, 188, 190, 193, 197, 201, 202, 203, 204, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 226, 227, 231, 233, 234, 235, 240, 242, 243, 244, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 261, 262, 267, 268, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 287, 288, 296, 310, 313, 314, 319, 322, 324, 325, 326, 336, 339, 346, 347, 354, 359, 369, 370, 385, 386, 388, 391, 392, 393, 394, 397, 405, 412, 413, 415, 419, 421, 432, 440, 441, 442, 443, 446, 450, 454, 463, 465, 467, 470, 482, 488, 495, 496, 499, 501, 503, 512, 517, 518, 520, 524, 526, 529, 532, 533, 537, 539, 541, 542, 543, 545, 553, 571, 576, 578, 581, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 621, 622, 623, 624, 626, 627, 628, 629, 630, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 657, 658, 659, 662, 663, 664, 665, 667, 669, 670, 672, 676, 683, 684, 689, 690, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 719, 720, 725, 729, 730, 731, 732, 734, 735, 737, 740, 742, 745, 747, 750, 751, 752, 753, 754, 756, 760, 762, 763, 764, 765, 766, 771, 775, 790, 791, 792, 795, 796, 797, 799, 801, 802, 804, 805, 806, 810, 813, 814, 817, 818, 819, 821, 823, 827, 828, 832, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 861, 869, 879, 885, 889, 891, 896, 897, 898, 911, 918, 919, 926, 931, 940, 943, 945, 950, 951, 960, 961, 962, 965, 966, 967, 968, 971, 979, 993, 997, 999, 1010, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1029, 1037, 1038, 1039, 1043, 1045, 1055, 1057, 1058, 1060, 1062, 1069, 1070, 1073, 1075, 1077, 1086, 1091, 1092, 1098, 1105, 1123, 1125, 1127, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1153, 1156, 1157, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1193, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1205, 1207, 1208, 1210, 1218, 1221, 1225, 1227, 1228, 1230, 1231, 1235, 1236, 1246, 1250, 1254, 1255, 1260, 1264, 1267, 1270, 1272, 1273, 1275], "i0e0": 1275, "i16": [1, 50, 401, 416, 434, 616, 775, 891, 994, 1224, 1246, 1275], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 248, 257, 310, 345, 346, 348, 371, 396, 404, 406, 407, 408, 409, 410, 414, 436, 616, 703, 765, 775, 838, 885, 917, 918, 920, 970, 980, 984, 985, 986, 992, 1014, 1104, 1246, 1264, 1268, 1275], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 173, 174, 175, 176, 178, 182, 183, 185, 186, 189, 190, 192, 193, 196, 197, 199, 200, 201, 202, 204, 206, 207, 209, 211, 213, 216, 217, 219, 220, 221, 227, 228, 233, 234, 235, 236, 239, 240, 241, 242, 246, 248, 250, 253, 255, 256, 257, 259, 261, 263, 270, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 300, 303, 304, 310, 319, 321, 325, 335, 340, 341, 343, 344, 349, 351, 352, 353, 354, 355, 357, 360, 362, 369, 370, 375, 381, 382, 383, 384, 385, 386, 389, 390, 403, 423, 425, 426, 427, 428, 429, 430, 431, 441, 444, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 460, 464, 466, 467, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 483, 486, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 530, 532, 533, 550, 551, 552, 554, 555, 557, 559, 561, 562, 567, 571, 572, 575, 576, 577, 578, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 612, 614, 615, 616, 617, 618, 622, 623, 624, 640, 648, 649, 663, 667, 672, 673, 675, 676, 677, 678, 679, 683, 684, 685, 686, 688, 691, 698, 701, 704, 705, 706, 711, 712, 713, 714, 715, 718, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 746, 749, 753, 754, 755, 758, 759, 760, 761, 765, 771, 775, 791, 793, 794, 796, 797, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 828, 829, 831, 832, 834, 835, 836, 838, 840, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 857, 860, 861, 862, 863, 865, 866, 867, 869, 870, 873, 876, 877, 885, 891, 894, 895, 898, 916, 921, 923, 925, 926, 927, 929, 932, 940, 950, 951, 956, 957, 958, 959, 960, 961, 977, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1034, 1038, 1040, 1048, 1060, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1080, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1099, 1105, 1110, 1116, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1136, 1139, 1143, 1147, 1148, 1150, 1153, 1154, 1156, 1157, 1161, 1162, 1205, 1211, 1216, 1218, 1223, 1231, 1232, 1237, 1246, 1254, 1255, 1257, 1261, 1262, 1263, 1264, 1266, 1269, 1270, 1272, 1273, 1275], "i8": [358, 359, 401, 404, 407, 409, 410, 411, 414, 416, 417, 420, 433, 434, 523, 616, 747, 750, 766, 775, 930, 931, 963, 975, 978, 988, 989, 995, 998, 1011, 1012, 1097, 1132, 1154, 1234, 1246, 1268], "iceberg": [145, 787], "icon": [36, 310], "id": [26, 36, 55, 126, 129, 145, 267, 274, 287, 296, 310, 590, 648, 649, 687, 775, 861, 869, 885, 891, 1134, 1233, 1246, 1272, 1273, 1275], "id_char": 1275, "id_var": [226, 277, 310, 827, 853, 885], "ideal": 125, "ident": [123, 175, 176, 310, 421, 589, 590, 775, 794, 795, 885, 949, 951, 999, 1133, 1134, 1246], "identifi": [123, 131, 226, 233, 275, 277, 288, 310, 827, 851, 853, 885], "idiograph": 891, "idiomat": [771, 799, 805, 837, 856, 869, 885], "idx": [143, 202, 215, 287, 310, 346, 359, 524, 814, 861, 885, 931, 1098, 1177], "idx_lit": 1177, "idx_rx": 1177, "ieee": [685, 775], "if_set": [5, 30], "if_table_exist": [34, 310], "ifnul": 1265, "ignor": [35, 131, 158, 159, 163, 224, 260, 279, 310, 322, 324, 347, 389, 418, 440, 442, 443, 494, 503, 563, 564, 627, 641, 693, 695, 706, 775, 854, 885, 891, 896, 897, 919, 963, 996, 1019, 1021, 1022, 1068, 1077, 1114, 1115, 1165, 1179, 1246], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [224, 260, 310, 322, 324, 347, 440, 442, 443, 503, 627, 641, 693, 695, 706, 775, 896, 897, 919, 1019, 1021, 1022, 1077, 1165, 1179, 1246], "ignore_spac": 891, "ijkl": 1267, "ilmsuxu": [628, 635, 636, 639, 648, 649, 1166, 1173, 1174, 1177, 1186, 1187], "imbal": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "imdb_scor": 1254, "immedi": [581, 698, 702, 716, 717, 719, 720, 731, 732, 747, 750, 757, 762, 763, 766, 775, 1125, 1246, 1255], "immut": [268, 310, 1227, 1246], "impact": [202, 310, 814, 885, 1254, 1272], "impl": 145, "implement": [41, 117, 131, 171, 203, 220, 296, 310, 313, 314, 463, 533, 554, 555, 557, 559, 561, 562, 673, 737, 775, 869, 1037, 1105, 1148, 1150, 1246, 1250], "implic": [388, 775, 802, 885], "implicit": [279, 310, 854, 885], "implicitli": [193, 310, 450, 765, 775, 810, 885, 1272], "implod": [775, 1246, 1263], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 174, 181, 182, 183, 185, 200, 202, 215, 217, 233, 235, 250, 257, 265, 267, 272, 277, 278, 280, 310, 313, 314, 367, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 450, 539, 545, 592, 594, 596, 598, 600, 602, 605, 607, 609, 703, 715, 716, 717, 718, 719, 720, 721, 754, 762, 763, 771, 775, 787, 793, 797, 801, 802, 803, 804, 814, 819, 823, 840, 853, 885, 938, 952, 954, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1020, 1046, 1049, 1051, 1052, 1135, 1158, 1219, 1246, 1250, 1255, 1269, 1272, 1275], "improv": [34, 45, 135, 146, 310, 532, 775, 885], "in_plac": [206, 254, 282, 310, 1126, 1155, 1162, 1246], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 143, 144, 145, 146, 147, 148, 159, 160, 177, 181, 188, 193, 233, 235, 245, 256, 272, 274, 278, 279, 310, 386, 420, 450, 454, 465, 470, 539, 578, 593, 595, 597, 599, 601, 603, 604, 606, 608, 653, 654, 657, 658, 703, 711, 751, 752, 775, 801, 810, 845, 854, 885, 891, 961, 962, 998, 1018, 1029, 1039, 1043, 1123, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1191, 1192, 1195, 1246, 1272], "include_bom": [33, 42, 310, 885], "include_boundari": [202, 310, 814, 885], "include_break": [386, 578, 775, 961, 1123, 1246], "include_breakpoint": [465, 775, 1039, 1246], "include_categor": 891, "include_categori": [465, 775, 1039, 1246], "include_col": 159, "include_file_path": [139, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 274, 310, 885], "include_index": 121, "include_init": 711, "include_kei": [233, 245, 310], "include_nul": [279, 310, 854, 885], "inclus": [202, 242, 310, 470, 591, 594, 596, 598, 600, 602, 605, 607, 609, 653, 654, 698, 716, 717, 719, 720, 731, 732, 762, 763, 775, 814, 836, 885, 1043, 1191, 1192, 1246], "incom": 131, "incompat": 110, "incomplet": [586, 775, 1130, 1246], "incorpor": 1272, "incorrect": [251, 310, 435, 532, 533, 614, 775, 841, 869, 885, 1013, 1151, 1246], "incorrectli": [129, 524], "increas": [36, 47, 129, 134, 140, 141, 148, 310, 385, 590, 775, 960, 1134, 1246], "independ": [53, 54, 156, 159, 163, 272, 310, 796, 797, 806, 832, 843, 885], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 171, 196, 198, 202, 207, 212, 214, 235, 240, 242, 243, 244, 253, 255, 267, 268, 270, 277, 279, 280, 286, 287, 310, 320, 333, 334, 335, 337, 340, 341, 346, 354, 359, 441, 457, 458, 460, 489, 490, 499, 500, 501, 517, 518, 524, 591, 594, 596, 598, 600, 602, 605, 607, 609, 613, 615, 622, 628, 635, 639, 640, 652, 663, 673, 701, 731, 734, 775, 812, 814, 836, 842, 844, 853, 854, 860, 861, 885, 891, 905, 906, 907, 908, 909, 912, 913, 918, 926, 931, 1020, 1032, 1033, 1057, 1063, 1064, 1073, 1074, 1075, 1091, 1092, 1098, 1116, 1148, 1149, 1153, 1161, 1173, 1177, 1178, 1190, 1201, 1246, 1263, 1267], "index_column": [202, 242, 310, 591, 775, 814, 836, 885], "indexord": [267, 268, 310], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 202, 242, 245, 251, 253, 265, 310, 336, 354, 457, 465, 471, 472, 473, 475, 476, 477, 478, 479, 480, 499, 517, 537, 538, 539, 540, 541, 591, 594, 596, 598, 600, 602, 605, 607, 609, 613, 615, 618, 701, 702, 746, 775, 814, 836, 841, 842, 885, 889, 891, 926, 1032, 1039, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1073, 1091, 1148, 1149, 1153, 1157, 1222, 1246, 1275], "indistinguish": [33, 42, 310, 885], "individu": [36, 45, 168, 242, 267, 268, 272, 310, 533, 636, 775, 796, 836, 885, 891, 948, 1174, 1246], "inequ": [565, 775], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 332, 386, 465, 472, 475, 578, 685, 775, 904, 954, 961, 1039, 1046, 1049, 1104, 1119, 1123, 1234, 1246, 1269], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 220, 310, 532, 533, 587, 642, 662, 664, 665, 666, 669, 721, 735, 750, 775, 885, 1105, 1131, 1180, 1200, 1202, 1203, 1204, 1207, 1246], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 310, 642, 885, 1180], "inference_length": [666, 1204], "inference_s": [220, 310], "infin": [670, 685, 775, 1208], "infinit": [475, 685, 775, 1049, 1246], "influenc": [134, 823, 885], "influxdb": 131, "info": [133, 144, 145, 151, 310, 313, 1246, 1250], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 179, 181, 310, 313, 314, 482, 533, 621, 628, 635, 636, 639, 648, 649, 775, 796, 801, 832, 885, 889, 944, 1058, 1160, 1166, 1173, 1174, 1177, 1186, 1187, 1246, 1250], "inherit": [243, 310, 388, 775, 802, 885], "init": [168, 1254], "initcap": 1265, "initi": [36, 76, 168, 310, 711, 725, 765, 1272], "initialis": [131, 168, 885], "inject": [36, 47, 310], "inlin": [18, 245, 310, 628, 635, 636, 639, 648, 649, 1166, 1173, 1174, 1177, 1186, 1187, 1263], "inner": [56, 72, 158, 216, 279, 310, 347, 358, 390, 503, 523, 533, 584, 682, 754, 775, 818, 854, 885, 919, 930, 964, 1077, 1097, 1105, 1229, 1246, 1261, 1272], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 918, "inprocessqueri": [796, 885], "input": [0, 47, 53, 91, 119, 121, 129, 130, 173, 183, 201, 220, 224, 233, 235, 239, 248, 249, 253, 256, 260, 273, 284, 285, 289, 310, 319, 370, 375, 441, 444, 456, 470, 528, 532, 533, 543, 571, 585, 586, 624, 640, 652, 658, 659, 660, 661, 663, 665, 676, 684, 692, 694, 696, 698, 701, 704, 705, 706, 714, 721, 723, 731, 732, 735, 736, 737, 739, 741, 744, 753, 757, 759, 765, 771, 775, 787, 791, 803, 813, 834, 838, 839, 842, 845, 850, 857, 858, 862, 885, 889, 950, 1020, 1043, 1102, 1103, 1105, 1129, 1130, 1153, 1178, 1190, 1201, 1203, 1246, 1266, 1267, 1269], "input_wildcard_expans": [775, 889], "insensit": [629, 636, 638, 648, 649, 650, 891, 1166, 1167, 1174, 1176, 1177, 1186, 1187, 1188], "insensitive_match": [628, 639], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 207, 274, 276, 310, 613, 627, 641, 672, 775, 852, 885, 1149, 1165, 1179, 1210, 1246], "insert_aft": [36, 310], "insert_befor": [36, 310], "insert_chart": [36, 310], "insert_column": 310, "insid": [54, 532, 775, 797, 885], "inspect": [775, 885], "instal": [95, 121, 129, 130, 132, 135, 137, 179, 269, 310, 393, 703, 843, 885, 967, 1228, 1246], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 174, 190, 195, 310, 543, 711, 725, 771, 793, 823, 860, 861, 885, 1025, 1246], "instanti": [34, 36, 131, 161, 248, 266, 267, 284, 310, 838, 857, 885, 890, 1224, 1225, 1246], "instantli": [54, 797, 885], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 172, 173, 200, 213, 214, 217, 220, 226, 231, 233, 243, 244, 245, 248, 249, 250, 253, 267, 268, 269, 273, 285, 286, 310, 313, 314, 335, 354, 370, 371, 386, 400, 441, 444, 454, 517, 545, 578, 585, 615, 627, 634, 644, 645, 648, 649, 657, 658, 659, 660, 661, 672, 684, 691, 698, 700, 702, 708, 716, 717, 719, 720, 721, 731, 732, 747, 750, 754, 757, 762, 763, 766, 775, 790, 791, 797, 806, 827, 838, 839, 840, 842, 850, 858, 859, 860, 885, 891, 907, 926, 935, 941, 961, 974, 982, 983, 1020, 1036, 1091, 1123, 1129, 1148, 1150, 1153, 1162, 1165, 1172, 1182, 1183, 1186, 1187, 1195, 1196, 1197, 1210, 1227, 1228, 1246, 1250, 1254, 1255, 1259, 1272, 1273], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 175, 181, 188, 191, 192, 196, 198, 200, 203, 204, 205, 207, 212, 214, 215, 217, 219, 220, 230, 231, 240, 242, 243, 246, 252, 253, 255, 258, 261, 266, 270, 273, 278, 281, 283, 286, 287, 293, 304, 310, 319, 342, 346, 354, 356, 359, 361, 362, 369, 370, 385, 389, 393, 440, 442, 443, 447, 448, 449, 455, 457, 458, 460, 463, 464, 465, 486, 492, 494, 499, 500, 501, 502, 512, 517, 518, 520, 522, 523, 524, 526, 570, 572, 575, 576, 578, 581, 584, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 622, 626, 635, 640, 642, 646, 647, 648, 652, 654, 655, 663, 666, 667, 672, 679, 683, 684, 690, 692, 698, 707, 709, 715, 718, 721, 727, 729, 731, 732, 746, 747, 750, 751, 752, 756, 757, 760, 761, 764, 766, 775, 791, 794, 801, 808, 809, 812, 815, 819, 822, 832, 842, 844, 847, 849, 850, 855, 856, 860, 861, 866, 877, 885, 890, 891, 905, 906, 914, 918, 926, 928, 931, 933, 940, 941, 948, 949, 960, 963, 964, 967, 1018, 1019, 1021, 1022, 1026, 1027, 1028, 1032, 1033, 1037, 1038, 1039, 1057, 1059, 1060, 1066, 1068, 1073, 1074, 1075, 1076, 1086, 1091, 1092, 1094, 1096, 1097, 1098, 1100, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1122, 1123, 1125, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1156, 1161, 1164, 1173, 1178, 1180, 1184, 1185, 1186, 1190, 1192, 1193, 1201, 1204, 1205, 1210, 1217, 1218, 1224, 1231, 1236, 1246, 1257, 1260, 1272, 1275], "int16": [1, 50, 272, 310, 383, 384, 416, 678, 775, 891, 958, 959, 994, 1217, 1224, 1246], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 202, 215, 242, 267, 310, 345, 346, 348, 371, 396, 406, 407, 408, 409, 414, 436, 441, 591, 682, 750, 775, 814, 836, 885, 891, 914, 917, 918, 920, 970, 980, 984, 985, 986, 992, 1014, 1020, 1104, 1229, 1230, 1246], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 177, 186, 195, 202, 234, 242, 247, 248, 262, 269, 310, 340, 341, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 383, 384, 425, 426, 427, 428, 429, 430, 431, 435, 441, 444, 532, 533, 556, 558, 560, 575, 583, 591, 642, 667, 678, 682, 698, 723, 731, 732, 735, 750, 757, 771, 775, 798, 805, 814, 831, 836, 837, 838, 885, 891, 912, 913, 915, 916, 921, 922, 923, 924, 925, 926, 927, 928, 929, 932, 933, 958, 959, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1020, 1105, 1127, 1205, 1217, 1227, 1228, 1229, 1230, 1246], "int64arrai": [1221, 1246], "int8": [1, 50, 76, 195, 310, 358, 359, 383, 384, 401, 404, 410, 411, 417, 420, 433, 434, 523, 678, 747, 750, 766, 775, 890, 930, 931, 958, 959, 963, 975, 978, 988, 989, 995, 998, 1011, 1012, 1097, 1132, 1217, 1227, 1234, 1246], "int_rang": [202, 278, 287, 296, 310, 698, 734, 814, 823, 861, 869, 885], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 185, 202, 242, 265, 268, 310, 323, 374, 420, 453, 454, 570, 576, 578, 583, 590, 591, 603, 640, 663, 667, 692, 698, 727, 731, 732, 750, 775, 804, 814, 836, 885, 891, 947, 998, 1031, 1123, 1127, 1134, 1141, 1148, 1178, 1201, 1205, 1227, 1246, 1266, 1272, 1275], "integer_list": 72, "integr": [36, 272, 310, 1275], "intend": [1, 152, 153, 154, 155, 672, 1210], "intens": [220, 296, 310, 571, 775, 1105, 1246], "interact": [159, 163, 181, 310, 801, 885], "interchang": [117, 171], "interest": [130, 421, 424, 999, 1002], "interfac": [0, 106, 107, 170, 787, 893, 1272], "interleav": 1267, "intermedi": [208, 310, 817, 885, 1275], "intern": [37, 38, 131, 150, 214, 262, 310, 454, 775, 1221, 1246, 1255], "interpol": [181, 237, 302, 310, 449, 469, 536, 579, 601, 602, 748, 775, 801, 833, 875, 885, 962, 1042, 1124, 1140, 1246], "interpolate_bi": [775, 1246], "interpolationmethod": [468, 775, 1041, 1246], "interpret": [120, 122, 129, 130, 143, 310, 885], "intersect": [36, 310, 514, 891, 1088, 1271], "interv": [202, 242, 280, 310, 386, 419, 432, 465, 470, 578, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 836, 885, 961, 975, 977, 978, 984, 986, 988, 989, 992, 994, 995, 997, 1001, 1010, 1011, 1039, 1043, 1123, 1246], "intoexpr": [173, 201, 202, 242, 248, 249, 253, 256, 273, 284, 285, 289, 310, 325, 343, 363, 366, 368, 370, 393, 441, 447, 465, 469, 470, 493, 513, 514, 515, 516, 571, 585, 586, 594, 596, 598, 600, 602, 605, 607, 609, 613, 615, 624, 629, 638, 650, 653, 654, 655, 660, 661, 676, 684, 694, 696, 701, 704, 705, 706, 707, 709, 711, 714, 718, 725, 739, 741, 744, 750, 753, 757, 759, 775, 791, 813, 814, 836, 838, 839, 842, 845, 850, 857, 858, 862, 885, 889, 915, 934, 937, 939, 967, 1020, 1026, 1042, 1043, 1067, 1129, 1130, 1149, 1153, 1191, 1192, 1193, 1198, 1199, 1246], "intoexprcolumn": [193, 310, 342, 346, 347, 354, 369, 370, 375, 419, 447, 450, 492, 500, 503, 512, 517, 572, 576, 612, 615, 635, 640, 643, 652, 657, 658, 659, 663, 667, 672, 683, 684, 698, 703, 716, 717, 719, 720, 731, 732, 762, 763, 765, 775, 810, 842, 885, 914, 918, 919, 926, 950, 997, 1010, 1026, 1066, 1074, 1077, 1086, 1091, 1119, 1173, 1178, 1181, 1190, 1195, 1196, 1197, 1201, 1210, 1246], "introduc": [46, 85, 662, 664, 665, 1200, 1202, 1203], "introduct": 1271, "intuit": [454, 775, 891], "invalid": [33, 42, 107, 129, 130, 143, 310, 371, 642, 643, 667, 685, 775, 885, 935, 941, 1180, 1181, 1205, 1246], "invalid_valu": 935, "invalidoperationerror": [586, 775, 1130, 1246, 1270], "invari": [823, 885], "invers": [327, 328, 329, 330, 331, 332, 775, 899, 900, 901, 902, 903, 904, 1227, 1246, 1269], "invert": 891, "invok": [532, 775], "involv": [193, 310, 810, 885], "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 182, 250, 310, 388, 456, 545, 775, 802, 840, 885], "iobas": [39, 40, 138, 139, 182, 250, 310, 388, 545, 548, 775, 802, 840, 885], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 310, 787, 885], "ipccompress": [37, 38, 310], "is_between": [775, 1246], "is_dupl": [310, 775, 1246], "is_elementwis": [532, 775, 889], "is_empti": [310, 1246], "is_finit": [775, 1246], "is_first_distinct": [775, 1246], "is_in": [93, 193, 310, 775, 1246], "is_infinit": [775, 1246], "is_last_distinct": [775, 1246], "is_nan": [775, 1246], "is_not_nan": [775, 1246], "is_not_nul": [775, 1246], "is_nul": [185, 310, 775, 804, 885, 1246], "is_numer": 1275, "is_odd": [248, 310, 838, 885, 891], "is_selector": 891, "is_sort": 1246, "is_uniqu": [310, 775, 1246], "isn": 765, "iso": [406, 433, 434, 980, 1011, 1012, 1267], "iso8601": [129, 130, 143], "iso_lang": 1267, "iso_year": 436, "isodow": 1268, "isoweek": 1268, "isoyear": 1268, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 310, 383, 384, 678, 775, 958, 959, 1217, 1246, 1272], "ital": [36, 310], "item": [13, 55, 130, 200, 243, 246, 310, 342, 346, 347, 389, 446, 492, 494, 501, 503, 512, 612, 655, 775, 914, 918, 919, 963, 1024, 1066, 1068, 1075, 1077, 1086, 1147, 1193, 1246], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 173, 183, 193, 201, 202, 213, 214, 215, 242, 243, 244, 245, 248, 249, 256, 273, 274, 284, 285, 288, 289, 310, 370, 385, 393, 450, 571, 624, 676, 684, 694, 696, 701, 703, 704, 705, 706, 714, 739, 741, 744, 753, 757, 759, 765, 771, 775, 791, 803, 810, 813, 814, 836, 838, 839, 845, 850, 857, 858, 862, 885, 889, 890, 960, 967, 1148, 1246, 1275], "iter_batch": 131, "iter_column": 310, "iter_row": [215, 243, 244, 245, 310], "iter_slic": 310, "its": [123, 151, 188, 268, 310, 397, 419, 432, 441, 532, 589, 624, 765, 775, 799, 805, 856, 885, 944, 971, 997, 1010, 1018, 1020, 1133, 1227, 1246, 1274], "itself": [157, 310, 313, 314, 533, 593, 595, 597, 599, 601, 603, 604, 606, 608, 751, 752, 775, 821, 885, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1246, 1250, 1254, 1255, 1272], "ix": [235, 310], "j": [274, 310], "jan": [819, 885], "jax": [267, 310, 1225, 1246], "jax_enable_x64": [267, 310], "jaxexporttyp": [267, 310], "jjk": 891, "jkl": [636, 1174], "jklmn": 1267, "job": [792, 885], "join": [46, 47, 53, 54, 55, 85, 193, 217, 279, 310, 450, 468, 571, 627, 754, 775, 796, 797, 806, 810, 819, 832, 843, 854, 859, 885, 1165, 1255, 1257, 1263, 1271, 1272], "join_asof": [216, 310, 818, 885], "join_nul": [216, 310, 818, 885], "joinstrategi": [47, 216, 310, 818, 885], "joinvalid": [216, 310, 818, 885], "jpy": 1275, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 182, 250, 310, 388, 456, 545, 548, 642, 643, 674, 775, 787, 802, 840, 885, 889, 1180, 1181, 1213], "json_path": [643, 1181], "json_path_match": [642, 1180], "json_stat": 5, "json_str": [138, 139], "json_val": [643, 1181], "jsonpath": [642, 643, 1180, 1181], "jst": [123, 891], "jul": [662, 1200, 1267], "juli": [1267, 1268], "just": [36, 121, 131, 143, 226, 277, 310, 827, 853, 885, 891], "k": [173, 245, 273, 274, 310, 369, 370, 380, 482, 683, 684, 775, 791, 850, 885, 940, 955, 1058, 1231, 1246], "k_2": [621, 775, 1160, 1246], "k_3": [621, 775, 1160, 1246], "kanji": 891, "karen": [235, 310], "kathmandu": [973, 974, 1000], "kb": [188, 310, 367, 938, 1018, 1246], "kde": [1246, 1250], "keep": [47, 129, 130, 139, 143, 146, 147, 193, 275, 279, 280, 310, 456, 532, 547, 555, 585, 704, 775, 810, 851, 854, 885, 1129, 1246], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 202, 214, 216, 217, 227, 233, 235, 239, 241, 244, 245, 279, 310, 450, 533, 585, 586, 757, 775, 814, 818, 819, 828, 834, 835, 854, 885, 891, 1129, 1130, 1246, 1261], "kept": [275, 310, 851, 885], "keyerror": 16, "keystrok": 771, "keyword": [35, 133, 141, 144, 159, 163, 179, 201, 234, 243, 248, 249, 269, 284, 285, 289, 310, 450, 575, 676, 753, 757, 765, 775, 813, 831, 838, 839, 857, 858, 862, 885, 1228, 1246, 1258], "kleen": [322, 324, 693, 694, 695, 696, 775, 896, 897, 1246], "klmnoopqrstuvwxyz": [215, 310], "knight": 1254, "know": [47, 131, 235, 277, 310, 524, 532, 775, 853, 885], "known": [135, 359, 524, 869, 931, 1098], "kurtosi": [775, 1246], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 179, 193, 234, 269, 310, 575, 775, 810, 831, 885, 889, 1228, 1246, 1258, 1272], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [202, 267, 272, 310, 314, 386, 578, 592, 593, 595, 597, 599, 601, 604, 606, 608, 775, 814, 832, 885, 961, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1246], "label_column": [272, 310], "lag": [253, 310, 354, 517, 615, 705, 775, 842, 885, 926, 1091, 1153, 1246], "lake": [35, 133, 144, 310, 787], "lambda": [143, 195, 220, 234, 235, 239, 296, 310, 359, 440, 441, 442, 443, 524, 532, 533, 555, 556, 711, 712, 725, 736, 737, 749, 775, 823, 831, 834, 869, 885, 931, 1019, 1020, 1021, 1022, 1098, 1105, 1246], "land": [393, 967], "languag": [143, 202, 217, 242, 280, 310, 415, 419, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010, 1020, 1246], "larg": [10, 11, 14, 47, 131, 134, 140, 148], "large_str": [215, 262, 269, 310], "larger": [10, 42, 43, 44, 45, 53, 54, 454, 707, 775, 796, 797, 885], "largest": [173, 273, 310, 370, 683, 684, 775, 791, 850, 885, 1231, 1246], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 204, 217, 219, 235, 245, 256, 261, 268, 275, 304, 310, 335, 346, 355, 385, 401, 412, 416, 433, 476, 501, 519, 522, 524, 554, 555, 557, 559, 561, 562, 586, 623, 624, 640, 655, 663, 679, 701, 760, 771, 775, 819, 845, 849, 851, 877, 885, 891, 907, 918, 927, 960, 975, 990, 994, 1011, 1038, 1050, 1060, 1075, 1093, 1096, 1130, 1162, 1178, 1193, 1201, 1218, 1227, 1246, 1265, 1267], "last_column": [36, 310], "later": [217, 250, 310, 545, 840, 885], "latest": [117, 133, 144, 171, 418, 455, 543, 662, 665, 718, 775, 996, 1200, 1203], "latt": 891, "latter": [36, 190, 310, 1025, 1246], "lazi": [1, 55, 143, 159, 217, 234, 235, 257, 310, 533, 727, 747, 750, 766, 775, 801, 818, 819, 859, 862, 863, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 885, 891, 1254, 1255, 1256, 1257, 1258, 1260, 1272, 1275], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 797, 885], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 177, 182, 218, 234, 235, 250, 257, 310, 388, 450, 524, 545, 754, 775, 787, 883, 884, 891, 1254, 1255, 1258, 1260, 1272, 1273, 1275], "lazygroupbi": [813, 814, 836, 885], "lbl": [267, 272, 310], "ldf": [1, 862, 863, 865, 867, 870, 871, 872, 873, 874, 875, 876], "ldot": [441, 775, 1020, 1246], "le": [633, 775, 1246], "lead": [14, 41, 123, 149, 224, 251, 253, 260, 310, 354, 457, 460, 517, 532, 533, 614, 615, 657, 659, 707, 775, 823, 841, 842, 869, 885, 926, 1091, 1105, 1151, 1153, 1195, 1197, 1246], "leap": [405, 415, 979, 993], "leap_year": 405, "learn": [272, 310], "least": [97, 235, 310, 572, 635, 637, 775, 1119, 1173, 1175, 1246, 1265], "leav": [6, 226, 277, 310, 524, 827, 853, 885], "left": [15, 16, 36, 47, 152, 153, 154, 155, 202, 216, 217, 242, 279, 310, 386, 440, 442, 443, 468, 470, 578, 591, 594, 596, 598, 600, 602, 605, 607, 609, 613, 682, 704, 711, 712, 716, 717, 719, 720, 725, 749, 762, 763, 765, 775, 814, 818, 819, 836, 854, 885, 961, 1019, 1021, 1022, 1043, 1123, 1149, 1229, 1246, 1257, 1261, 1265], "left_clos": [386, 578, 775, 961, 1123, 1246], "left_on": [216, 217, 279, 310, 818, 819, 854, 885], "leftmost": [613, 775, 1149, 1246, 1267], "len": [12, 36, 159, 163, 177, 215, 235, 287, 291, 296, 310, 379, 533, 542, 544, 589, 708, 731, 775, 798, 856, 861, 864, 869, 885, 890, 1133, 1246], "len_byt": [12, 645, 1183], "len_char": [644, 1182], "length": [55, 56, 72, 134, 140, 143, 157, 161, 200, 202, 242, 255, 310, 313, 385, 419, 432, 518, 524, 543, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 622, 640, 644, 645, 646, 647, 652, 663, 672, 747, 750, 751, 752, 766, 775, 814, 832, 836, 844, 885, 889, 948, 960, 971, 997, 1010, 1092, 1098, 1116, 1129, 1130, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1161, 1178, 1182, 1183, 1184, 1185, 1190, 1201, 1210, 1246, 1263, 1265], "leq": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "less": [143, 217, 310, 454, 484, 531, 532, 655, 775, 819, 885, 1193, 1275], "letter": [189, 293, 304, 310, 444, 629, 636, 638, 650, 670, 723, 775, 807, 866, 877, 885, 891, 1167, 1174, 1176, 1188, 1208, 1267], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 195, 220, 231, 257, 262, 310, 314, 450, 775, 787, 815, 822, 846, 885, 1221, 1246, 1272], "lexic": [59, 891, 945], "lf": [42, 43, 44, 45, 50, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 864, 868, 885, 1262, 1272, 1275], "lf1": [754, 846, 885, 1258, 1260, 1273], "lf2": [754, 846, 885, 1258, 1260, 1273], "lf3": [885, 1258], "lf4": [885, 1258], "lf5": 885, "lf6": 885, "lf_other": [859, 885], "lib": [775, 1221, 1246], "librari": [1, 99, 131, 134, 532, 775, 889, 1275], "life": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "lifetim": [168, 786, 1260], "light": [36, 310], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 182, 202, 209, 211, 216, 245, 250, 267, 268, 310, 388, 394, 456, 496, 532, 547, 581, 635, 658, 659, 689, 771, 775, 792, 797, 802, 814, 885, 889, 968, 1070, 1125, 1173, 1235, 1246], "limit": [10, 11, 45, 131, 132, 165, 192, 310, 362, 449, 455, 775, 809, 815, 885, 1028, 1246, 1263, 1271], "line": [10, 20, 36, 129, 130, 134, 143, 200, 209, 211, 310, 313, 635, 1173], "line_termin": [33, 42, 310, 885], "linear": [181, 208, 237, 302, 310, 468, 469, 491, 536, 579, 601, 602, 705, 706, 748, 775, 801, 817, 833, 875, 885, 962, 1041, 1042, 1065, 1124, 1140, 1246], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 178, 183, 186, 188, 189, 193, 199, 201, 202, 206, 214, 230, 233, 242, 243, 244, 245, 248, 256, 263, 264, 272, 274, 275, 276, 278, 284, 289, 290, 310, 320, 347, 358, 359, 360, 386, 393, 446, 452, 457, 466, 474, 532, 533, 543, 544, 571, 578, 584, 587, 592, 593, 595, 597, 599, 601, 604, 606, 608, 623, 624, 634, 636, 638, 653, 673, 675, 682, 701, 703, 705, 717, 720, 722, 730, 732, 735, 737, 755, 757, 763, 771, 775, 799, 805, 807, 810, 813, 814, 838, 845, 851, 852, 857, 859, 862, 863, 885, 890, 891, 919, 930, 931, 932, 948, 961, 967, 1018, 1024, 1029, 1032, 1034, 1039, 1040, 1048, 1105, 1123, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1167, 1172, 1174, 1176, 1188, 1191, 1226, 1229, 1246, 1254, 1259, 1263, 1264, 1274, 1275], "list_of_seri": 737, "lit": [1, 321, 363, 470, 554, 639, 705, 711, 725, 747, 750, 766, 775, 1028, 1246], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 248, 249, 253, 279, 284, 285, 310, 321, 363, 375, 397, 438, 439, 447, 454, 459, 461, 470, 484, 531, 550, 552, 565, 566, 576, 585, 586, 628, 630, 639, 648, 649, 676, 677, 685, 694, 696, 698, 704, 705, 706, 714, 715, 718, 731, 735, 739, 741, 744, 753, 757, 759, 761, 775, 809, 838, 839, 842, 854, 857, 858, 885, 891, 934, 950, 971, 1026, 1043, 1129, 1130, 1148, 1150, 1153, 1166, 1168, 1177, 1186, 1187, 1246, 1267], "littl": [244, 310], "lmn": 891, "ln": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246, 1265], "ln_a": 1266, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 310, 775, 787, 815, 822, 885, 889, 1275], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [272, 310], "lobster": [639, 1177], "loc": [310, 314], "local": [4, 35, 131, 133, 144, 145, 148, 310, 432, 573, 574, 775, 943, 944, 973, 974, 997, 1000, 1010, 1120, 1121, 1246, 1255], "localhost": 131, "localis": [419, 432, 1010], "locat": [36, 141, 143, 146, 148, 190, 240, 270, 276, 310, 613, 775, 852, 885, 1025, 1032, 1148, 1149, 1246], "lock": 165, "log": [29, 49, 370, 437, 529, 552, 576, 684, 775, 1016, 1246, 1265], "log10": [775, 1246, 1265], "log10_a": 1266, "log16_a": 1266, "log1p": [775, 1246, 1265], "log1p_a": 1266, "log2": 1265, "logarithm": [527, 528, 529, 775, 1101, 1102, 1103, 1246, 1266], "logic": [55, 220, 296, 310, 313, 314, 322, 324, 388, 533, 682, 693, 694, 695, 696, 737, 775, 802, 806, 818, 840, 869, 885, 896, 897, 1105, 1227, 1229, 1246, 1250], "london": [398, 402, 418, 972, 976, 996], "london_timezon": [418, 996], "london_to_amsterdam": [418, 996], "long": [189, 226, 235, 277, 278, 310, 807, 827, 853, 885], "longer": [129, 130, 143], "longest": 524, "look": [10, 202, 310, 363, 524, 814, 885, 934], "lookup": 771, "loop": [533, 775], "lose": [395, 969], "lossi": [129, 130, 143], "love": [629, 650, 1167, 1188], "low": [17, 131, 578, 775, 1123, 1246], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 181, 202, 237, 302, 310, 375, 470, 530, 555, 579, 583, 601, 602, 698, 716, 717, 719, 720, 748, 762, 763, 775, 801, 814, 833, 875, 885, 950, 962, 1043, 1104, 1124, 1127, 1140, 1234, 1246, 1263, 1265], "lower_bound": [202, 310, 375, 470, 775, 814, 885, 950, 1043, 1234, 1246], "lowercas": [561, 668, 670, 1206, 1208, 1267], "lowest": [530, 775], "lru_cach": [220, 310, 533, 775, 1105, 1246], "lst": 158, "lt": [450, 691, 775, 1246], "ltrim": 1265, "lyric": [629, 650, 1167, 1188], "lz4": [37, 38, 41, 43, 45, 310, 885], "lzo": [41, 45, 310, 885], "m": [62, 64, 216, 310, 394, 395, 397, 402, 403, 421, 423, 424, 435, 635, 662, 664, 665, 669, 718, 719, 720, 721, 727, 818, 885, 891, 968, 969, 971, 976, 977, 999, 1001, 1002, 1013, 1173, 1200, 1202, 1203, 1207, 1258, 1267, 1268], "m_2": [621, 775, 1160, 1246], "m_3": [621, 775, 1160, 1246], "m_i": [621, 775, 1160, 1246], "machin": 1275, "maco": 151, "made": [36, 131, 310], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 181, 182, 188, 190, 202, 217, 220, 242, 250, 257, 267, 269, 272, 278, 279, 280, 310, 313, 314, 385, 386, 388, 393, 394, 395, 406, 415, 419, 421, 424, 432, 444, 465, 499, 524, 532, 533, 542, 545, 578, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 638, 642, 644, 703, 711, 712, 716, 717, 719, 720, 725, 749, 751, 752, 762, 763, 775, 796, 797, 801, 802, 806, 814, 819, 823, 836, 840, 846, 854, 860, 861, 869, 885, 944, 945, 960, 961, 962, 967, 968, 969, 980, 993, 997, 999, 1002, 1010, 1018, 1025, 1039, 1073, 1105, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1176, 1180, 1182, 1225, 1228, 1230, 1246, 1250, 1275], "main": [151, 797, 885], "maintain": [42, 43, 44, 45, 256, 310, 360, 525, 613, 624, 686, 701, 775, 801, 845, 885, 932, 1099, 1149, 1232, 1246], "maintain_ord": [42, 43, 44, 45, 201, 233, 235, 256, 275, 280, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 320, 360, 370, 457, 460, 525, 533, 624, 684, 686, 701, 775, 797, 806, 813, 832, 843, 845, 851, 863, 865, 867, 870, 871, 872, 873, 874, 875, 876, 885, 932, 1099, 1232, 1246], "major": [134, 267, 310], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 227, 231, 238, 268, 280, 310, 442, 443, 465, 561, 562, 571, 584, 654, 775, 828, 885, 889, 1021, 1022, 1039, 1192, 1227, 1246], "man": [651, 1189], "manag": [46, 84, 85, 786, 787, 1260, 1272], "mandatori": [36, 310], "mango": [633, 656, 1171, 1194], "mani": [131, 132, 148, 190, 310, 638, 650, 1025, 1176, 1188, 1246], "manner": 131, "many_to_mani": [216, 310, 818, 885], "many_to_on": [216, 310, 818, 885], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 174, 177, 194, 214, 220, 239, 243, 244, 245, 247, 263, 310, 321, 419, 432, 532, 533, 554, 556, 557, 559, 561, 562, 585, 586, 689, 736, 775, 793, 834, 837, 885, 890, 891, 962, 997, 1010, 1105, 1129, 1130, 1235, 1246, 1255, 1257, 1258, 1272], "map_": 103, "map_batch": [775, 885], "map_el": [94, 220, 310, 532, 692, 775, 1246], "map_row": 310, "mapelementsstrategi": [533, 775], "mapping_strategi": [571, 775], "march": [421, 424, 999, 1002], "mariadb": 132, "mark": [126, 371, 775, 941, 1246], "markdown": 20, "marker": [36, 310], "mask": [148, 209, 211, 310, 364, 471, 473, 476, 481, 573, 574, 628, 631, 639, 775, 935, 1029, 1043, 1044, 1047, 1050, 1056, 1120, 1121, 1150, 1166, 1169, 1177, 1237, 1246], "mass": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "massag": [226, 277, 310, 827, 853, 885], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 174, 192, 216, 217, 243, 279, 310, 539, 540, 585, 586, 603, 628, 629, 630, 633, 635, 636, 638, 639, 642, 643, 648, 649, 650, 656, 662, 664, 665, 765, 771, 775, 793, 809, 818, 819, 854, 885, 891, 1017, 1129, 1130, 1141, 1166, 1167, 1168, 1171, 1173, 1174, 1176, 1177, 1180, 1181, 1186, 1187, 1188, 1194, 1200, 1202, 1203, 1246, 1267], "matches_overlap": 638, "matches_supertyp": [192, 310, 809, 885], "materi": [220, 245, 296, 310, 796, 832, 869, 879, 885, 891, 1105, 1246], "materialis": [214, 215, 243, 244, 310], "math": [1, 10, 51, 235, 310, 387, 775, 952, 954, 1158, 1219, 1246, 1265, 1269, 1271], "mathemat": [685, 722, 775, 1265], "mathshortcut": [1, 51], "matplotlib": [151, 832, 843, 885], "matter": [202, 214, 242, 244, 245, 264, 310, 591, 658, 659, 775, 814, 836, 885], "max": [25, 36, 41, 45, 126, 181, 192, 201, 222, 235, 242, 310, 314, 381, 449, 524, 532, 571, 581, 585, 586, 591, 593, 594, 614, 655, 739, 755, 775, 801, 809, 813, 836, 885, 956, 962, 1028, 1098, 1125, 1136, 1151, 1193, 1246, 1254, 1263, 1265], "max_a": [242, 310, 591, 775, 836, 885], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [200, 310], "max_color": [36, 310], "max_data_s": 163, "max_elem": 1263, "max_horizont": [310, 738], "max_items_per_column": [200, 310], "max_level": 126, "max_siz": [158, 159, 161, 163, 1275], "max_text_s": 131, "max_valu": 1275, "max_width": [524, 1098], "maxim": [297, 333, 775, 870, 905, 1246], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 200, 202, 221, 222, 310, 340, 489, 534, 563, 573, 581, 640, 642, 645, 652, 663, 738, 739, 775, 814, 824, 885, 912, 981, 1063, 1106, 1114, 1120, 1125, 1178, 1180, 1183, 1190, 1201, 1246, 1262], "mb": [188, 310, 1018, 1246], "me": [629, 650, 670, 1167, 1188, 1208], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 181, 192, 201, 202, 217, 224, 235, 242, 280, 289, 310, 415, 419, 432, 446, 449, 454, 591, 594, 595, 596, 598, 600, 602, 605, 607, 609, 621, 627, 635, 641, 716, 717, 719, 720, 721, 741, 762, 763, 765, 775, 801, 809, 813, 814, 819, 823, 836, 862, 885, 962, 993, 997, 1010, 1024, 1028, 1137, 1160, 1165, 1173, 1179, 1246, 1262, 1263], "mean_horizont": [310, 740], "measur": [226, 277, 310, 314, 827, 853, 885], "measure_a": [310, 314], "measure_b": [310, 314], "median": [181, 235, 310, 449, 597, 598, 775, 801, 859, 885, 962, 1138, 1246, 1265], "mediat": 1272, "medium": [36, 310], "megan": [227, 310, 828, 885], "melt": [277, 310, 853, 885], "member": [202, 310, 814, 885, 1048, 1246], "membership": [342, 492, 914, 1066], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 171, 190, 220, 244, 245, 254, 268, 296, 310, 571, 582, 616, 775, 796, 797, 885, 1025, 1105, 1126, 1154, 1155, 1227, 1246], "memory_map": [135, 141, 146], "merg": [35, 216, 217, 227, 310, 818, 819, 828, 885], "merge_sort": [310, 885], "messi": [635, 637, 1173, 1175], "met": 765, "meta": [388, 775], "metadata": [0, 145, 787], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 177, 181, 182, 185, 190, 197, 201, 208, 214, 220, 231, 237, 243, 244, 245, 253, 275, 284, 291, 296, 302, 310, 319, 322, 323, 354, 375, 388, 421, 424, 438, 439, 447, 454, 456, 459, 461, 468, 484, 517, 531, 533, 548, 550, 552, 554, 555, 557, 559, 561, 562, 565, 566, 567, 570, 576, 579, 581, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 615, 658, 659, 660, 661, 666, 672, 677, 685, 687, 692, 707, 737, 748, 767, 768, 770, 771, 775, 776, 777, 780, 781, 782, 783, 784, 787, 797, 801, 802, 804, 817, 833, 842, 851, 857, 864, 869, 875, 885, 890, 898, 926, 950, 962, 999, 1002, 1025, 1026, 1041, 1091, 1105, 1124, 1125, 1140, 1153, 1204, 1210, 1229, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1255, 1259], "metric": 131, "micro": [420, 998], "microsecond": [62, 64, 202, 214, 217, 242, 244, 245, 264, 280, 310, 415, 419, 427, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 718, 719, 720, 721, 761, 762, 763, 775, 814, 819, 832, 836, 885, 891, 993, 997, 1005, 1010, 1020, 1246, 1268], "microsoft": [36, 310], "mid_color": [36, 310], "midnight": 77, "midpoint": [181, 237, 302, 310, 579, 601, 602, 748, 775, 801, 833, 875, 885, 962, 1124, 1140, 1246], "might": [129, 130, 143, 165, 235, 268, 277, 310, 533, 687, 775, 845, 853, 885], "millennia": 1268, "millennium": 1268, "milli": [420, 998], "millisecond": [202, 217, 242, 280, 310, 404, 410, 415, 419, 428, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 891, 993, 997, 1006, 1010, 1020, 1246, 1268], "milliseconds_diff": [427, 428, 430], "mimic": 705, "min": [36, 41, 45, 181, 192, 229, 235, 242, 310, 382, 449, 533, 571, 581, 591, 599, 600, 744, 753, 775, 801, 809, 836, 885, 889, 957, 962, 1028, 1125, 1139, 1246, 1263, 1265, 1268, 1275], "min_a": [242, 310, 591, 775, 836, 885], "min_col": [157, 159], "min_color": [36, 310], "min_elem": 1263, "min_horizont": [310, 743, 753], "min_period": [385, 440, 442, 443, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 751, 752, 775, 960, 1019, 1021, 1022, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1246], "min_siz": [158, 159, 161, 163, 1275], "min_valu": 1275, "mincol": 157, "minim": [300, 334, 341, 490, 616, 624, 775, 873, 906, 913, 1064, 1109, 1154, 1246], "minimum": [41, 45, 157, 158, 159, 161, 163, 195, 228, 229, 310, 440, 442, 443, 549, 564, 574, 581, 743, 744, 775, 829, 885, 987, 1019, 1021, 1022, 1115, 1121, 1125, 1246, 1262, 1275], "minu": [415, 567, 775, 993], "minut": [202, 217, 242, 280, 310, 404, 407, 409, 414, 415, 419, 420, 429, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 718, 719, 720, 721, 761, 762, 763, 775, 814, 819, 836, 885, 891, 993, 997, 1007, 1010, 1020, 1246, 1268], "minutes_diff": 429, "misc": 1260, "miscellan": 787, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 191, 197, 310, 362, 440, 442, 443, 448, 455, 477, 478, 524, 775, 808, 885, 1019, 1021, 1022, 1027, 1246], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 217, 268, 310, 754, 846, 885, 891, 962, 1246], "mixin": 1, "mlnm": 408, "mm": [36, 310], "mn": 1267, "mno": [16, 20], "mnop": 1267, "mo": 721, "mocha": 891, "mod": [775, 1265], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 235, 257, 310, 636, 747, 750, 766, 775, 796, 797, 806, 885, 1174, 1246, 1254, 1255, 1272], "model": [272, 310], "modifi": [129, 130, 143, 165, 168, 190, 206, 213, 214, 282, 310, 336, 418, 435, 628, 635, 636, 639, 648, 649, 668, 670, 671, 775, 898, 996, 1013, 1025, 1166, 1173, 1174, 1177, 1186, 1187, 1206, 1208, 1209, 1246], "modul": [87, 95, 134, 774, 891, 1275], "modulu": [550, 775], "moment": [41, 179, 310, 482, 621, 775, 1058, 1160, 1246], "mon": 1268, "mondai": [202, 310, 393, 432, 434, 703, 814, 885, 967, 1010, 1012], "monkei": [646, 647, 1184, 1185], "month": [202, 217, 242, 280, 310, 401, 412, 413, 415, 419, 421, 424, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 715, 716, 717, 718, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 975, 990, 991, 993, 997, 999, 1002, 1010, 1020, 1246, 1268], "month_nam": [421, 424], "monthbegin": [413, 991], "monthend": [412, 990], "moos": 891, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 179, 181, 193, 213, 214, 220, 226, 231, 243, 244, 246, 257, 267, 268, 272, 275, 277, 296, 310, 313, 314, 323, 360, 450, 454, 462, 482, 512, 525, 529, 532, 533, 570, 612, 621, 636, 644, 662, 664, 665, 686, 697, 708, 724, 730, 733, 740, 742, 745, 746, 755, 765, 771, 775, 801, 810, 827, 846, 851, 853, 885, 889, 891, 932, 944, 962, 1035, 1036, 1058, 1086, 1099, 1105, 1147, 1160, 1174, 1182, 1200, 1202, 1203, 1225, 1227, 1232, 1246, 1250, 1260, 1261, 1270, 1273, 1274, 1275], "more_bi": [233, 256, 310, 624, 775, 845, 885], "more_column": [189, 276, 310, 444, 723, 775, 807, 852, 885, 891], "more_expr": [571, 701, 704, 705, 706, 775], "more_nam": [673, 771], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 268, 310, 543, 551, 572, 586, 655, 775, 1110, 1119, 1130, 1193, 1227, 1246, 1257, 1272], "mostli": [262, 310, 450, 775], "move": [18, 235, 245, 310, 393, 440, 441, 442, 443, 593, 595, 599, 606, 775, 967, 1019, 1020, 1021, 1022, 1136, 1137, 1139, 1143, 1246], "mssql": [34, 310], "much": [220, 278, 296, 310, 385, 499, 533, 644, 645, 737, 775, 869, 960, 1073, 1105, 1182, 1183, 1246], "mul": 775, "multi": [8, 36, 129, 130, 272, 310, 444, 635, 775, 1173], "multi_fram": [36, 310], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 183, 188, 190, 193, 201, 202, 206, 215, 233, 235, 245, 248, 251, 256, 279, 284, 289, 310, 370, 499, 532, 538, 543, 551, 552, 571, 585, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 624, 673, 684, 701, 708, 725, 736, 738, 743, 749, 755, 758, 765, 771, 775, 796, 797, 803, 810, 813, 814, 838, 841, 845, 854, 857, 862, 869, 885, 898, 927, 1018, 1025, 1073, 1093, 1110, 1129, 1131, 1162, 1246, 1258, 1263], "multipli": [532, 592, 593, 595, 597, 599, 601, 604, 606, 608, 676, 775, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1246], "multithread": [256, 310, 624, 701, 775, 845, 885, 927, 1093, 1162, 1246], "must": [36, 65, 117, 118, 133, 144, 145, 149, 181, 189, 202, 217, 227, 235, 242, 243, 310, 386, 524, 533, 578, 585, 586, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 765, 775, 801, 807, 814, 819, 823, 828, 836, 843, 885, 889, 961, 962, 1123, 1129, 1130, 1246], "mutual": [243, 310], "my": [145, 149], "my_column": 869, "my_column_": [274, 310], "my_column_0": [274, 310], "my_column_1": [274, 310], "my_column_2": [274, 310], "my_custom_aggreg": 737, "my_fil": 135, "my_holidai": [393, 703, 967], "my_larger_than_ram_fil": [42, 43, 44, 45, 885], "my_long_fil": 143, "my_struct": 757, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 175, 190, 196, 202, 204, 214, 215, 219, 220, 244, 245, 246, 253, 258, 261, 264, 266, 281, 293, 295, 304, 310, 326, 354, 359, 367, 369, 370, 385, 389, 393, 395, 397, 403, 423, 435, 447, 450, 458, 464, 486, 494, 500, 502, 512, 513, 517, 520, 522, 524, 526, 572, 575, 584, 604, 605, 608, 609, 612, 615, 621, 626, 640, 644, 645, 648, 654, 655, 657, 658, 663, 665, 679, 683, 684, 685, 689, 690, 692, 707, 709, 718, 719, 720, 721, 727, 729, 747, 750, 751, 752, 756, 760, 764, 766, 775, 794, 796, 812, 814, 815, 822, 842, 847, 849, 855, 866, 868, 877, 885, 891, 926, 931, 938, 940, 949, 960, 963, 967, 969, 971, 977, 1001, 1013, 1025, 1026, 1033, 1038, 1060, 1068, 1074, 1076, 1086, 1087, 1091, 1096, 1098, 1119, 1142, 1144, 1147, 1153, 1160, 1164, 1178, 1182, 1183, 1186, 1192, 1193, 1201, 1203, 1218, 1224, 1231, 1235, 1236, 1246, 1257, 1258, 1264, 1267, 1268, 1270, 1272, 1275], "n0": [359, 524], "n00": [931, 1098], "n01": [931, 1098], "n02": [931, 1098], "n1": [359, 524], "n2": [1, 359], "n3": 1, "n_1": [450, 775], "n_2": [450, 775], "n_3": [450, 775], "n_bar": 1262, "n_bit": 1267, "n_byte": [367, 644, 645, 1267], "n_char": [644, 645, 1267], "n_chunk": [310, 898, 1025, 1126, 1246], "n_elem": 1263, "n_even": 891, "n_field_strategi": [524, 1098], "n_film": 1254, "n_foo_uniqu": 1262, "n_kilobyt": 367, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 215, 310, 885], "n_thread": [129, 130], "n_uniqu": [310, 326, 775, 1246], "na": [269, 310, 656, 1228, 1246], "naiv": [397, 398, 665, 971, 972, 1203], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 173, 174, 177, 178, 183, 184, 185, 189, 193, 194, 197, 198, 200, 201, 212, 213, 214, 216, 217, 220, 222, 224, 226, 227, 229, 233, 235, 239, 243, 244, 245, 247, 248, 249, 256, 257, 260, 263, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 284, 285, 286, 287, 288, 289, 295, 310, 314, 321, 359, 363, 364, 366, 368, 370, 386, 421, 424, 444, 450, 470, 477, 478, 479, 480, 524, 533, 538, 540, 542, 544, 547, 571, 578, 588, 624, 636, 637, 648, 649, 673, 675, 676, 684, 689, 693, 694, 695, 696, 697, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 713, 714, 723, 724, 729, 730, 733, 738, 739, 740, 741, 742, 743, 744, 745, 748, 751, 752, 753, 754, 756, 757, 758, 759, 760, 764, 765, 771, 775, 791, 793, 798, 799, 803, 804, 807, 810, 813, 818, 819, 827, 828, 834, 837, 838, 839, 845, 846, 850, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 868, 885, 889, 890, 891, 895, 931, 949, 961, 999, 1002, 1017, 1098, 1123, 1128, 1173, 1174, 1175, 1186, 1187, 1211, 1214, 1222, 1223, 1228, 1235, 1246, 1255, 1256, 1257, 1258, 1259, 1260, 1271, 1272, 1275], "name_gener": [274, 310], "named_agg": [289, 862], "named_bi": [201, 310, 813, 885], "named_expr": [248, 249, 284, 285, 310, 676, 753, 757, 838, 839, 857, 858, 885], "named_fram": [1258, 1272], "nameless": 121, "namespac": [1, 131, 309, 310, 313, 673, 754, 774, 787, 883, 884, 1246, 1250, 1275], "nan": [121, 159, 171, 191, 268, 269, 310, 391, 392, 438, 439, 448, 459, 461, 468, 477, 478, 479, 480, 484, 531, 534, 549, 563, 564, 565, 566, 592, 685, 707, 775, 808, 885, 900, 904, 965, 966, 1027, 1051, 1052, 1114, 1115, 1135, 1227, 1228, 1246, 1275], "nan_as_nul": 171, "nan_max": [775, 1246], "nan_min": [775, 1246], "nan_to_nul": [121, 310, 885, 1246], "nana": 1267, "nanmax": [563, 564, 775, 1114, 1115, 1246], "nanosecond": [77, 202, 217, 242, 280, 310, 415, 419, 420, 430, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 993, 997, 998, 1008, 1010, 1020, 1246, 1268], "nansum": [592, 775, 1135, 1246], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 214, 220, 244, 245, 264, 268, 296, 310, 533, 737, 754, 775, 781, 846, 869, 885, 1105, 1227, 1246, 1272, 1275], "natur": [529, 775, 1103, 1246, 1261, 1266], "ndarrai": [120, 193, 268, 310, 457, 613, 775, 810, 885, 1032, 1148, 1149, 1227, 1246], "ndjson": [44, 885], "ne": [566, 775, 1246], "ne_miss": [193, 310, 775, 810, 885, 1246], "nearest": [49, 181, 217, 237, 302, 310, 374, 453, 468, 579, 601, 602, 748, 775, 801, 819, 833, 875, 885, 947, 962, 1031, 1041, 1124, 1140, 1246, 1266], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 268, 310, 885, 1227, 1246], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 202, 242, 245, 254, 310, 524, 591, 616, 666, 721, 747, 750, 766, 775, 814, 836, 885, 1154, 1204, 1246, 1275], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 204, 219, 242, 253, 255, 261, 287, 310, 354, 517, 518, 575, 576, 591, 615, 622, 640, 652, 663, 775, 836, 842, 844, 860, 861, 885, 891, 926, 1038, 1060, 1091, 1092, 1153, 1161, 1178, 1190, 1201, 1218, 1246], "negat": [568, 775, 1117, 1246], "neither": [123, 134, 140, 246, 310, 359, 524, 931, 1098], "nest": [46, 123, 126, 160, 161, 188, 310, 787, 1018, 1246, 1272, 1275], "nest_asyncio": 151, "nesting_level": 160, "net": [636, 1174], "netherland": [217, 310], "never": [33, 42, 131, 216, 217, 243, 310, 818, 819, 885], "new": [34, 35, 36, 143, 168, 196, 206, 207, 220, 231, 232, 235, 239, 274, 276, 278, 279, 284, 285, 310, 321, 397, 446, 456, 458, 468, 555, 556, 571, 585, 586, 590, 648, 649, 654, 655, 673, 675, 771, 775, 787, 812, 834, 852, 854, 857, 858, 869, 885, 895, 971, 1024, 1033, 1116, 1128, 1129, 1130, 1134, 1186, 1187, 1192, 1193, 1211, 1214, 1223, 1246, 1272, 1274], "new_column": [129, 130, 134, 143], "new_dat": 415, "new_df": [279, 310, 854, 885], "new_fil": [31, 33, 37, 38, 41, 310], "new_from_index": 1246, "new_id": [274, 310], "new_lf": [854, 885], "new_tabl": 1274, "new_valu": [711, 712, 725, 749], "new_york": 719, "newli": 47, "newlin": [40, 139, 147, 310], "next": [49, 202, 217, 242, 280, 310, 362, 393, 415, 419, 432, 581, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 967, 993, 997, 1010, 1125, 1246], "next_batch": 130, "next_pow2": 49, "nfruit": 663, "nl": [393, 703, 967], "nnel_id": 123, "no1": 891, "no_default": [197, 310, 585, 586, 775, 1129, 1130, 1246], "no_optim": [42, 43, 44, 45, 53, 54, 796, 797, 823, 832, 885], "nodataerror": [129, 130, 134, 140, 143], "nodd": [635, 1173], "node": [792, 796, 816, 823, 827, 832, 834, 885], "nodefault": [197, 310, 585, 586, 775, 1129, 1130, 1246], "non": [4, 5, 33, 35, 36, 42, 47, 62, 63, 121, 150, 173, 180, 215, 226, 242, 248, 249, 253, 273, 274, 277, 279, 284, 285, 310, 369, 370, 375, 379, 380, 393, 418, 470, 524, 532, 533, 572, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 630, 636, 644, 670, 672, 676, 683, 684, 694, 696, 704, 705, 706, 708, 710, 714, 721, 739, 741, 744, 751, 752, 753, 757, 759, 775, 791, 800, 827, 836, 838, 839, 842, 850, 853, 854, 857, 858, 885, 889, 891, 940, 950, 955, 962, 967, 996, 1043, 1098, 1105, 1119, 1129, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1153, 1168, 1174, 1182, 1208, 1210, 1227, 1231, 1246, 1264, 1272], "non_exist": [418, 996], "non_numer": [33, 42, 310, 885], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 175, 180, 181, 185, 191, 192, 193, 195, 197, 200, 202, 203, 208, 212, 216, 217, 218, 220, 223, 226, 231, 232, 235, 242, 243, 246, 250, 253, 255, 256, 262, 263, 265, 267, 268, 269, 272, 274, 275, 276, 277, 278, 279, 280, 291, 295, 310, 322, 324, 325, 337, 338, 339, 346, 347, 359, 362, 375, 379, 380, 381, 384, 386, 391, 392, 400, 415, 418, 439, 440, 441, 442, 443, 444, 447, 448, 449, 455, 462, 463, 465, 468, 469, 470, 477, 478, 479, 480, 485, 487, 488, 495, 501, 503, 505, 512, 513, 514, 515, 516, 518, 524, 532, 533, 542, 545, 546, 548, 553, 566, 567, 568, 569, 571, 572, 578, 581, 582, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 615, 616, 617, 618, 622, 623, 627, 628, 630, 632, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 652, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 667, 669, 672, 673, 674, 675, 682, 689, 694, 695, 696, 698, 704, 705, 706, 708, 710, 714, 716, 717, 718, 719, 720, 721, 723, 724, 731, 732, 733, 734, 735, 736, 737, 739, 741, 744, 750, 751, 752, 757, 759, 761, 762, 763, 765, 775, 794, 795, 797, 800, 801, 804, 806, 808, 809, 810, 814, 817, 818, 819, 821, 823, 827, 830, 836, 840, 842, 843, 844, 845, 851, 852, 853, 854, 859, 864, 868, 869, 878, 879, 885, 889, 890, 891, 893, 896, 897, 905, 906, 910, 911, 918, 919, 931, 949, 950, 955, 961, 962, 964, 965, 966, 974, 981, 982, 983, 987, 996, 1016, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1035, 1037, 1039, 1041, 1042, 1043, 1053, 1054, 1057, 1058, 1059, 1061, 1062, 1065, 1069, 1075, 1077, 1079, 1086, 1087, 1088, 1089, 1090, 1092, 1098, 1105, 1106, 1107, 1108, 1109, 1118, 1123, 1124, 1125, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1153, 1156, 1157, 1160, 1161, 1164, 1165, 1166, 1168, 1170, 1171, 1174, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1205, 1207, 1210, 1213, 1221, 1223, 1224, 1225, 1227, 1228, 1229, 1235, 1236, 1246, 1254, 1256, 1257, 1258, 1260, 1263, 1264, 1268, 1272], "nonexist": [418, 996], "nor": [134, 140, 246, 310], "normal": [35, 126, 202, 310, 437, 482, 621, 689, 775, 814, 885, 1016, 1058, 1160, 1235, 1246], "normalised_scor": 131, "norowsreturnederror": [243, 310], "not_": [284, 310, 775, 857, 885, 891, 1246], "not_c": [284, 310, 857, 885], "notabl": 131, "notat": [11, 36, 310], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 171, 177, 179, 181, 182, 191, 193, 202, 203, 212, 213, 214, 216, 217, 220, 231, 234, 235, 242, 243, 244, 245, 250, 253, 257, 264, 267, 269, 272, 274, 275, 277, 279, 280, 284, 286, 287, 310, 354, 375, 383, 384, 388, 391, 392, 398, 412, 413, 415, 419, 432, 441, 448, 454, 456, 463, 470, 477, 478, 496, 499, 517, 524, 533, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 621, 627, 628, 634, 635, 636, 637, 639, 640, 644, 645, 648, 649, 652, 657, 658, 659, 662, 663, 670, 672, 673, 678, 685, 694, 696, 703, 711, 716, 717, 719, 720, 721, 725, 735, 747, 749, 750, 754, 762, 763, 765, 766, 771, 775, 786, 797, 801, 802, 808, 810, 814, 815, 818, 819, 822, 834, 836, 840, 842, 843, 845, 846, 851, 853, 854, 857, 860, 861, 885, 891, 926, 950, 958, 959, 962, 965, 966, 972, 990, 991, 993, 997, 1010, 1020, 1027, 1037, 1043, 1070, 1073, 1091, 1105, 1129, 1130, 1134, 1141, 1148, 1150, 1153, 1155, 1160, 1165, 1166, 1172, 1173, 1174, 1175, 1177, 1178, 1182, 1183, 1186, 1187, 1190, 1195, 1196, 1197, 1200, 1201, 1208, 1210, 1217, 1228, 1230, 1246, 1250, 1254, 1255, 1259, 1260, 1270, 1272], "noth": [20, 635, 643, 1173, 1181], "notic": [131, 193, 310, 810, 885, 1246], "notimplementederror": 171, "now": [47, 134, 242, 268, 310, 836, 885, 1227, 1246], "np": [120, 193, 268, 310, 457, 532, 613, 775, 810, 885, 1032, 1046, 1049, 1051, 1052, 1148, 1149, 1246], "nr": [293, 304, 866, 877], "nth": [196, 310, 458, 655, 771, 775, 812, 885, 1033, 1193, 1246], "nthe": [635, 1173], "nthose": [635, 1173], "nu": 633, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 171, 173, 175, 180, 181, 185, 187, 192, 193, 195, 208, 216, 223, 224, 225, 232, 235, 237, 253, 256, 258, 259, 260, 263, 268, 269, 273, 276, 279, 281, 284, 291, 310, 322, 324, 325, 335, 338, 339, 346, 347, 354, 355, 362, 364, 369, 370, 371, 375, 379, 380, 381, 384, 389, 391, 392, 415, 418, 425, 426, 427, 428, 429, 430, 431, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 455, 462, 468, 469, 477, 478, 479, 480, 485, 487, 488, 494, 495, 498, 499, 501, 503, 504, 505, 513, 514, 515, 516, 517, 519, 524, 532, 533, 553, 566, 567, 568, 569, 572, 582, 586, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 618, 623, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 652, 654, 655, 656, 662, 663, 665, 667, 672, 673, 674, 675, 682, 683, 684, 693, 694, 695, 696, 701, 704, 705, 706, 708, 710, 714, 718, 723, 734, 735, 739, 741, 744, 751, 752, 757, 759, 765, 775, 791, 794, 800, 801, 804, 809, 810, 817, 818, 830, 842, 845, 850, 852, 854, 857, 859, 864, 885, 891, 896, 897, 907, 910, 911, 918, 919, 926, 927, 935, 940, 941, 949, 950, 955, 963, 965, 966, 996, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1017, 1019, 1020, 1021, 1022, 1026, 1028, 1029, 1035, 1036, 1041, 1042, 1053, 1054, 1055, 1059, 1061, 1062, 1065, 1068, 1069, 1072, 1073, 1075, 1077, 1078, 1079, 1088, 1090, 1091, 1093, 1098, 1105, 1118, 1119, 1130, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1153, 1157, 1162, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1190, 1192, 1193, 1194, 1200, 1201, 1203, 1205, 1210, 1213, 1224, 1227, 1228, 1229, 1231, 1246, 1257, 1261, 1263, 1264, 1268, 1270, 1272, 1273, 1275], "null_behavior": [389, 494, 775, 963, 1068, 1246], "null_count": [41, 45, 181, 185, 310, 385, 775, 801, 885, 960, 962, 1246], "null_equ": [187, 310, 1017, 1246], "null_on_oob": [346, 499, 501, 918, 1073, 1075], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 310, 885], "nullabl": [35, 310], "nullbehavior": [389, 494, 775, 963, 1068, 1246], "nullif": 1265, "nulls_last": [256, 310, 335, 355, 519, 623, 624, 701, 775, 845, 885, 907, 927, 1055, 1093, 1162, 1246], "num": [13, 36, 271, 310, 470, 775, 1043, 1246], "num_row": 171, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 173, 175, 180, 188, 189, 191, 192, 200, 204, 205, 214, 215, 219, 230, 231, 242, 246, 253, 258, 261, 273, 278, 281, 283, 291, 293, 295, 304, 310, 336, 352, 354, 359, 362, 369, 370, 379, 385, 386, 389, 393, 396, 404, 406, 408, 410, 411, 420, 433, 434, 436, 440, 441, 442, 443, 447, 448, 449, 455, 464, 477, 478, 485, 486, 494, 502, 505, 510, 512, 517, 520, 522, 524, 526, 571, 575, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 626, 640, 642, 644, 645, 648, 652, 654, 655, 663, 666, 679, 683, 684, 690, 703, 707, 708, 709, 721, 729, 734, 751, 752, 756, 760, 764, 775, 791, 794, 800, 807, 808, 809, 815, 822, 832, 842, 847, 849, 850, 855, 856, 864, 866, 868, 877, 885, 890, 924, 926, 931, 940, 949, 960, 961, 963, 967, 970, 978, 980, 985, 988, 989, 998, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1038, 1059, 1060, 1068, 1076, 1079, 1084, 1086, 1091, 1096, 1098, 1111, 1112, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1153, 1156, 1164, 1178, 1180, 1182, 1183, 1186, 1190, 1192, 1193, 1201, 1204, 1218, 1231, 1236, 1246, 1261, 1266, 1275], "number_of_two": [343, 493], "numbers_decim": 666, "numer": [10, 16, 33, 36, 42, 133, 144, 174, 183, 217, 268, 269, 277, 278, 310, 319, 371, 375, 454, 470, 529, 550, 552, 576, 584, 616, 637, 672, 677, 685, 775, 787, 793, 803, 819, 853, 885, 891, 941, 950, 962, 1043, 1154, 1175, 1210, 1227, 1246, 1266, 1275], "numeric_dtyp": 1275, "numericliter": [375, 775, 950, 1246], "numpi": [90, 120, 151, 179, 214, 244, 245, 264, 268, 269, 310, 532, 563, 564, 592, 775, 885, 1046, 1049, 1051, 1052, 1114, 1115, 1135, 1227, 1228, 1246], "nworld": 657, "o": [135, 146, 367, 369, 370, 385, 634, 683, 684, 775, 938, 940, 960, 1172, 1195, 1231, 1246, 1258], "oauth": 145, "obj": 891, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 170, 171, 177, 182, 201, 202, 217, 218, 233, 242, 245, 250, 257, 267, 268, 269, 310, 388, 545, 716, 717, 719, 720, 735, 754, 762, 763, 775, 787, 796, 802, 814, 819, 821, 836, 846, 885, 891, 893, 1221, 1246, 1255, 1257, 1260, 1272, 1274], "observ": [386, 440, 441, 442, 443, 578, 775, 961, 1019, 1020, 1021, 1022, 1123, 1246], "obtain": 524, "obvious": 675, "occur": [36, 53, 54, 91, 100, 106, 310, 343, 493, 551, 581, 775, 796, 797, 806, 832, 843, 885, 915, 1067, 1110, 1125, 1227, 1246], "occurr": [465, 473, 476, 689, 775, 1039, 1047, 1050, 1235, 1246], "oct": 1267, "octet_length": 1265, "octob": 1267, "od": [140, 787], "odbc": [34, 131, 310], "odd": 635, "odi": 638, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 216, 217, 310, 393, 703, 796, 797, 806, 818, 819, 823, 832, 885, 967], "offer": [234, 310, 575, 775, 831, 885, 1268, 1272], "offic": [36, 310], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 196, 202, 242, 255, 286, 287, 310, 393, 394, 402, 412, 413, 415, 419, 432, 458, 500, 518, 591, 622, 652, 665, 775, 812, 814, 836, 844, 860, 861, 885, 967, 968, 976, 990, 991, 993, 997, 1010, 1033, 1074, 1092, 1161, 1190, 1203, 1246, 1271], "offset_bi": 721, "often": [132, 168, 202, 242, 310, 343, 493, 584, 591, 775, 814, 836, 885, 915, 1067, 1260, 1272], "ok": 524, "old": [35, 239, 310, 585, 586, 775, 834, 885, 1129, 1130, 1246], "old_tabl": 1274, "older": [41, 45, 310, 885], "oldw": 658, "omit": [27, 119, 123, 157, 168, 231, 245, 267, 272, 310, 731, 732, 762, 763, 891, 1273], "onc": [129, 130, 165, 220, 244, 246, 289, 310, 512, 532, 533, 612, 660, 661, 775, 792, 862, 885, 1086, 1105, 1147, 1198, 1199, 1246, 1258], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 174, 182, 192, 193, 200, 201, 202, 214, 218, 226, 235, 242, 243, 244, 250, 251, 253, 268, 271, 277, 290, 310, 320, 354, 386, 388, 449, 450, 454, 457, 460, 462, 517, 524, 529, 545, 554, 555, 557, 559, 561, 562, 590, 591, 615, 623, 635, 636, 637, 650, 673, 737, 755, 765, 771, 775, 793, 802, 809, 810, 813, 814, 827, 836, 840, 841, 842, 853, 859, 863, 885, 898, 926, 931, 961, 1028, 1035, 1036, 1091, 1098, 1103, 1123, 1134, 1153, 1173, 1174, 1175, 1188, 1211, 1227, 1246, 1250, 1260, 1261, 1263, 1266, 1274], "one_to_mani": [216, 310, 818, 885], "one_to_on": [216, 310, 818, 885], "oneormoredatatyp": [36, 157, 310], "ones": 891, "onf": [652, 1190], "onli": [1, 5, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 185, 190, 202, 203, 214, 217, 220, 235, 242, 244, 245, 264, 266, 267, 268, 279, 280, 296, 310, 320, 322, 324, 336, 374, 375, 388, 393, 415, 422, 444, 453, 463, 532, 533, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 583, 629, 638, 650, 687, 703, 737, 775, 796, 799, 802, 804, 805, 814, 815, 819, 822, 836, 837, 854, 856, 869, 885, 889, 891, 896, 897, 898, 947, 950, 967, 993, 1025, 1031, 1037, 1105, 1127, 1167, 1176, 1188, 1221, 1224, 1227, 1246, 1254, 1257, 1272, 1273, 1275], "onlin": [190, 310, 1025, 1246], "ont": [638, 1176], "onto": 159, "oof": [651, 1189, 1263, 1267], "op": [20, 163, 310, 539, 584, 775, 821, 885, 1246], "opaqu": 869, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 182, 310, 388, 775, 802, 885], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 176, 190, 193, 195, 201, 207, 218, 220, 227, 231, 233, 234, 235, 238, 240, 242, 245, 246, 251, 253, 262, 268, 269, 274, 277, 278, 288, 289, 310, 319, 320, 323, 354, 380, 381, 382, 383, 384, 385, 438, 439, 454, 456, 459, 461, 484, 512, 513, 514, 515, 516, 517, 524, 531, 547, 550, 552, 553, 554, 555, 557, 559, 561, 562, 565, 566, 567, 570, 571, 576, 583, 612, 615, 677, 685, 692, 693, 695, 705, 706, 710, 722, 754, 765, 775, 787, 795, 799, 801, 805, 810, 813, 815, 818, 822, 827, 828, 837, 841, 842, 846, 853, 856, 862, 885, 889, 926, 951, 955, 956, 957, 958, 959, 960, 1025, 1086, 1087, 1088, 1089, 1090, 1091, 1127, 1147, 1153, 1221, 1226, 1227, 1228, 1246, 1271, 1272], "operand": [685, 775], "opp": 891, "oppos": 703, "opposit": [253, 310, 354, 517, 615, 775, 842, 885, 926, 1091, 1153, 1246], "opt": [272, 310], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 214, 218, 234, 238, 244, 275, 310, 792, 796, 797, 806, 823, 832, 843, 851, 860, 861, 869, 885, 946, 1148, 1246], "optimis": [131, 220, 245, 296, 310, 885, 1105, 1150, 1246, 1275], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 182, 197, 202, 212, 217, 226, 250, 257, 263, 274, 277, 279, 310, 388, 393, 482, 539, 545, 592, 593, 595, 597, 599, 601, 604, 606, 608, 621, 629, 638, 650, 652, 689, 757, 765, 775, 787, 796, 802, 814, 818, 819, 827, 840, 846, 853, 854, 885, 891, 967, 1058, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1160, 1167, 1176, 1188, 1190, 1223, 1235, 1246, 1263, 1267], "optional_memb": [474, 775, 1048, 1246], "or_": 775, "oracl": 132, "orang": [178, 291, 292, 294, 295, 297, 298, 300, 302, 303, 310, 370, 684, 775, 864, 865, 867, 868, 870, 871, 873, 875, 876, 1267], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 173, 177, 178, 185, 186, 193, 201, 202, 216, 233, 234, 235, 242, 244, 246, 247, 251, 256, 267, 268, 273, 275, 280, 310, 335, 355, 360, 369, 370, 391, 392, 450, 495, 512, 519, 525, 571, 576, 581, 591, 612, 613, 614, 623, 624, 651, 658, 659, 660, 661, 675, 683, 684, 686, 687, 689, 701, 754, 765, 775, 786, 791, 799, 804, 805, 810, 813, 814, 818, 827, 836, 837, 841, 845, 846, 850, 851, 885, 890, 891, 907, 927, 932, 940, 945, 965, 966, 1029, 1055, 1069, 1086, 1093, 1099, 1125, 1132, 1147, 1149, 1151, 1162, 1189, 1214, 1231, 1232, 1233, 1235, 1246, 1254, 1257, 1263, 1271, 1272, 1275], "order_bi": [571, 775], "ordin": [416, 581, 775, 994, 1125, 1246, 1273], "ordinal_dai": [401, 434], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 171, 179, 310, 843, 885, 893], "orient": [48, 50, 91, 120, 122, 231, 310, 885, 1254], "origin": [47, 129, 130, 143, 185, 193, 275, 310, 391, 392, 418, 419, 432, 450, 495, 533, 554, 571, 583, 584, 585, 586, 587, 589, 630, 635, 643, 699, 700, 775, 804, 810, 851, 885, 965, 966, 996, 997, 1010, 1029, 1069, 1129, 1130, 1131, 1133, 1168, 1173, 1181, 1246], "orld": 1196, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 148, 152, 153, 154, 155, 185, 187, 190, 193, 216, 217, 226, 227, 235, 243, 245, 248, 249, 272, 277, 279, 282, 284, 285, 308, 310, 319, 323, 325, 335, 336, 375, 390, 438, 439, 450, 454, 459, 461, 470, 474, 484, 491, 513, 514, 515, 516, 531, 537, 541, 550, 552, 565, 566, 570, 585, 586, 624, 676, 677, 682, 685, 692, 694, 696, 701, 704, 705, 706, 714, 721, 739, 741, 744, 753, 757, 759, 775, 787, 797, 804, 810, 818, 819, 827, 828, 838, 839, 853, 854, 857, 858, 859, 885, 891, 898, 950, 964, 1017, 1025, 1048, 1065, 1087, 1088, 1089, 1090, 1129, 1130, 1229, 1237, 1245, 1246, 1260, 1272], "other_df": [216, 310], "other_lf": [818, 885], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 197, 220, 227, 245, 248, 267, 272, 296, 310, 359, 364, 375, 386, 440, 441, 442, 443, 524, 533, 542, 571, 575, 576, 578, 583, 628, 631, 634, 639, 640, 645, 652, 663, 689, 693, 721, 724, 733, 737, 765, 775, 828, 838, 869, 885, 931, 935, 950, 961, 1019, 1020, 1021, 1022, 1098, 1105, 1123, 1127, 1148, 1150, 1166, 1169, 1172, 1177, 1178, 1183, 1190, 1201, 1235, 1246, 1264], "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 148, 151, 193, 242, 245, 310, 346, 364, 499, 501, 628, 631, 639, 765, 810, 836, 885, 918, 935, 1073, 1075, 1166, 1169, 1177, 1270], "outcom": [571, 775], "outer": [47, 55, 279, 310, 854, 885], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 173, 181, 214, 220, 224, 227, 233, 235, 244, 248, 250, 260, 273, 280, 284, 310, 322, 324, 347, 369, 370, 386, 503, 524, 532, 533, 542, 545, 555, 578, 585, 627, 641, 645, 683, 684, 689, 693, 694, 695, 696, 705, 706, 707, 736, 737, 775, 787, 791, 801, 806, 823, 827, 828, 838, 840, 850, 857, 869, 885, 896, 897, 919, 940, 961, 1077, 1105, 1123, 1165, 1179, 1183, 1231, 1235, 1246], "output_path": [843, 885], "outsid": [375, 775, 950, 1246], "over": [125, 129, 130, 131, 133, 134, 140, 143, 148, 159, 160, 173, 190, 213, 214, 215, 220, 243, 244, 245, 257, 273, 274, 288, 296, 310, 314, 369, 370, 385, 388, 441, 449, 532, 533, 542, 544, 545, 546, 547, 555, 556, 581, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 683, 684, 711, 712, 725, 736, 737, 749, 754, 775, 791, 796, 846, 850, 869, 885, 891, 940, 960, 1020, 1025, 1105, 1136, 1137, 1139, 1143, 1231, 1246, 1272], "overflow": [174, 310, 371, 383, 384, 667, 678, 775, 793, 885, 941, 958, 959, 1205, 1217, 1246], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [630, 636, 638, 1168, 1174, 1176], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 310, 885], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 310, 885], "overview": [310, 775, 787, 885, 1246, 1271, 1275], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 171, 279, 310, 321, 676, 775, 854, 885], "overwrite_schema": [35, 310], "ow": 657, "own": [765, 1227, 1246, 1275], "p": [49, 234, 310, 575, 757, 775, 831, 885, 891, 1177, 1178, 1258], "pa": [35, 116, 149, 310, 754], "pa_tabl": 754, "pacif": [394, 968], "pack": [231, 310], "packag": [131, 310, 314, 393, 703, 889, 967], "pad": [646, 647, 672, 1184, 1185, 1210], "pad_end": [647, 1185], "pad_start": [646, 672, 1184, 1210], "page": [41, 45, 135, 141, 146, 148, 310, 775, 787, 885, 1246, 1271], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 239, 310, 834, 885, 1275], "pairwis": [179, 310], "panda": [34, 117, 121, 126, 151, 193, 202, 269, 275, 277, 310, 412, 413, 682, 754, 775, 810, 814, 851, 853, 885, 990, 991, 1228, 1229, 1246, 1255, 1257, 1272], "pandas_df": 1272, "pane": [36, 310], "panic": 99, "pap": 1178, "papa": 640, "papai": [640, 1178], "papaya": [640, 652, 663, 1178, 1190, 1201], "parallel": [53, 55, 125, 132, 141, 148, 202, 217, 218, 234, 249, 285, 310, 385, 496, 689, 765, 775, 787, 814, 818, 819, 839, 858, 869, 885, 960, 1070, 1235, 1246], "parallelis": [220, 296, 310, 1105, 1246], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 243, 310, 885], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 173, 174, 175, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 212, 214, 215, 216, 217, 219, 220, 224, 226, 227, 230, 231, 233, 234, 235, 237, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 293, 295, 296, 302, 304, 310, 319, 321, 322, 323, 324, 325, 335, 342, 343, 346, 347, 354, 355, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 393, 395, 397, 398, 403, 415, 418, 419, 420, 421, 423, 424, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 469, 470, 474, 482, 484, 486, 491, 492, 493, 494, 496, 499, 500, 501, 502, 503, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 531, 532, 533, 539, 545, 546, 550, 552, 555, 556, 557, 558, 559, 560, 565, 566, 570, 571, 572, 575, 576, 578, 579, 581, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 672, 673, 675, 676, 677, 679, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 791, 793, 794, 796, 797, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 822, 823, 827, 828, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 866, 868, 869, 875, 877, 885, 889, 890, 891, 895, 896, 897, 898, 907, 914, 915, 918, 919, 926, 927, 931, 932, 934, 935, 936, 937, 939, 940, 941, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 971, 972, 977, 993, 996, 997, 998, 999, 1001, 1002, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1037, 1038, 1039, 1041, 1042, 1043, 1055, 1058, 1060, 1065, 1066, 1067, 1068, 1070, 1073, 1074, 1075, 1076, 1077, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1099, 1105, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1156, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1210, 1211, 1214, 1218, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1231, 1232, 1235, 1236, 1237, 1246, 1254, 1255, 1256, 1257, 1258, 1260, 1264, 1267, 1272], "parameteris": 131, "parametr": 787, "paramount": [823, 885], "parent": [36, 195, 310], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 310, 787, 885], "parquetcompress": [41, 310], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 173, 201, 248, 249, 253, 256, 273, 284, 285, 289, 310, 370, 375, 470, 571, 585, 586, 624, 642, 666, 667, 676, 684, 694, 696, 701, 704, 705, 706, 714, 727, 739, 741, 744, 753, 755, 757, 759, 765, 775, 791, 813, 838, 839, 842, 845, 850, 857, 858, 862, 885, 950, 1043, 1129, 1130, 1153, 1180, 1204, 1205, 1246, 1254], "parseerror": [667, 1205], "parser": [129, 134], "part": [116, 134, 267, 272, 310, 571, 636, 654, 655, 775, 806, 832, 843, 859, 885, 1174, 1192, 1193, 1268], "parti": [532, 775], "partial": [119, 129, 143, 310, 885], "particip": [36, 310], "particular": [129, 135, 137, 173, 188, 273, 310, 369, 370, 683, 684, 775, 791, 850, 885, 940, 1018, 1231, 1246], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 215, 233, 310, 571, 775], "partition_bi": [41, 130, 215, 310, 571, 775], "partition_chunk_size_byt": [41, 310], "partition_col": [41, 132, 310], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 310], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 173, 179, 183, 201, 202, 204, 219, 233, 234, 235, 242, 248, 253, 256, 261, 269, 272, 273, 280, 284, 289, 310, 313, 354, 370, 393, 403, 415, 418, 447, 467, 517, 532, 533, 571, 575, 585, 586, 591, 615, 624, 657, 658, 659, 684, 693, 701, 703, 710, 727, 757, 765, 771, 775, 791, 803, 813, 814, 816, 823, 831, 836, 838, 842, 843, 845, 850, 857, 862, 869, 885, 889, 890, 926, 967, 977, 996, 1026, 1038, 1060, 1091, 1105, 1129, 1130, 1153, 1195, 1196, 1197, 1218, 1228, 1246, 1250, 1258, 1272], "pass_nam": [533, 775], "pass_name_to_appli": [775, 889], "password": [129, 132, 135, 137], "past": [32, 310, 823, 885], "pat": [639, 1177], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 250, 310, 388, 545, 548, 614, 643, 775, 802, 840, 843, 885, 889, 1151, 1181, 1246, 1275], "pathlib": [31, 33, 37, 38, 41, 143, 310], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 214, 310, 540, 628, 629, 630, 635, 636, 637, 638, 639, 648, 649, 650, 869, 891, 1148, 1150, 1166, 1167, 1168, 1173, 1174, 1175, 1176, 1177, 1186, 1187, 1188, 1246, 1267], "paya": 663, "pct": 159, "pct_chang": [775, 1246], "pd": [117, 121, 682, 754, 775, 1228, 1229, 1246, 1255, 1272], "pd_df": 121, "pd_frame": 754, "pd_seri": 121, "pea": 640, "peak": [244, 310, 573, 574, 775, 1120, 1121, 1246], "peak_max": [775, 1246], "peak_min": [775, 1246], "pear": [640, 652, 663, 1178, 1190, 1201], "pearson": [179, 310, 482, 621, 707, 775, 1058, 1160, 1246], "penalti": [662, 664, 665, 1200, 1202, 1203], "per": [14, 33, 36, 42, 134, 157, 159, 173, 200, 231, 232, 235, 249, 256, 273, 285, 299, 301, 302, 310, 346, 370, 496, 499, 501, 532, 533, 554, 555, 557, 559, 561, 562, 624, 684, 689, 701, 775, 791, 839, 845, 850, 858, 872, 874, 875, 885, 889, 918, 1070, 1073, 1075, 1235, 1246], "percent": [572, 775, 1119, 1246], "percentag": [156, 159, 163, 572, 775, 1119, 1246], "percentil": [181, 310, 801, 885, 962, 1246], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 171, 193, 201, 202, 217, 220, 238, 242, 244, 245, 268, 296, 310, 454, 524, 532, 533, 571, 591, 629, 638, 644, 645, 650, 662, 664, 665, 775, 810, 814, 819, 836, 845, 860, 861, 885, 1105, 1167, 1176, 1182, 1183, 1188, 1200, 1202, 1203, 1227, 1246], "perhap": [274, 310], "period": [129, 130, 143, 202, 242, 310, 419, 432, 440, 442, 443, 572, 591, 716, 717, 719, 720, 762, 763, 775, 814, 836, 885, 997, 1010, 1019, 1021, 1022, 1119, 1246], "persist": 1260, "phase": [34, 278, 310], "philadelphia": [648, 649], "phone": [670, 1208], "physic": [46, 59, 85, 129, 130, 217, 235, 310, 682, 775, 792, 818, 819, 885, 944, 1229, 1246], "pi": [10, 387, 775, 952, 954, 1158, 1219, 1246, 1265, 1269], "pick": [160, 765], "pickl": [388, 775, 802, 885], "pip": [393, 703, 967], "pipe": [310, 775, 885], "pipelin": [134, 272, 310], "pitfal": 101, "pivot": [278, 310, 891], "pivot_long": [277, 310, 853, 885], "pivot_wid": [235, 310], "pivotagg": [235, 310], "pixel": [36, 310], "pk": [437, 775, 1016, 1246], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1275], "pl_frame": 754, "place": [10, 11, 33, 42, 184, 190, 206, 207, 235, 240, 245, 256, 282, 310, 314, 335, 347, 355, 503, 519, 623, 624, 701, 775, 845, 885, 898, 907, 919, 927, 1025, 1077, 1093, 1126, 1162, 1246], "placehold": 726, "plai": [12, 706], "plain": [806, 885], "plan": [217, 218, 310, 388, 775, 792, 796, 802, 806, 818, 819, 840, 843, 885, 1274], "plane": [699, 700], "platform": 151, "ple": 1267, "pleas": [121, 131, 132, 193, 202, 226, 310, 313, 314, 441, 708, 721, 775, 810, 814, 827, 885, 1020, 1246, 1250], "plenti": 891, "plot": [310, 832, 843, 885, 1246], "plu": [386, 529, 775, 961, 1103, 1123, 1246, 1266], "plugin": [0, 775, 787], "plugin_path": 889, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 191, 202, 218, 257, 267, 272, 278, 279, 310, 313, 314, 374, 385, 386, 391, 419, 420, 448, 453, 454, 465, 477, 478, 512, 533, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 751, 752, 775, 796, 797, 806, 808, 814, 823, 834, 846, 854, 885, 945, 947, 960, 961, 965, 997, 998, 1027, 1031, 1039, 1086, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1225, 1230, 1246, 1250, 1272], "poison": [563, 564, 775, 1114, 1115, 1246], "pola": 310, "polar": [1, 310, 313, 314, 774, 775, 781, 787, 885, 889, 890, 891, 1246, 1250, 1271, 1272, 1274], "polars_df": 1272, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1272, "polars_verbos": [796, 885], "polarsdatafram": 171, "polarsdataset": [272, 310], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 174, 220, 267, 272, 310, 371, 444, 532, 533, 585, 586, 642, 723, 735, 736, 737, 747, 750, 766, 771, 775, 793, 885, 891, 941, 1105, 1129, 1130, 1180, 1246], "polarsintegertyp": [698, 731, 732], "polarstemporaltyp": [662, 1200], "polarstyp": 55, "pool": [14, 54, 165, 166, 797, 885], "poor": 131, "pop2": [217, 310], "popul": [217, 310, 819, 885], "port": [34, 129, 131, 132, 135, 137, 310], "portion": 1267, "pos_a": 1267, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 183, 189, 201, 233, 248, 249, 253, 256, 276, 284, 285, 289, 310, 354, 440, 442, 443, 444, 517, 571, 576, 578, 615, 624, 637, 639, 648, 649, 667, 676, 699, 700, 701, 704, 705, 706, 723, 753, 757, 771, 775, 803, 807, 813, 838, 839, 842, 845, 852, 857, 858, 862, 885, 891, 926, 1019, 1021, 1022, 1091, 1123, 1153, 1175, 1205, 1246, 1273], "position": 1246, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 201, 214, 220, 244, 275, 296, 310, 530, 533, 542, 592, 655, 688, 775, 796, 813, 845, 851, 885, 1105, 1135, 1193, 1246], "post": 47, "postgresql": [34, 131, 132, 310, 571, 775, 1270], "potenti": [101, 103, 134, 143, 146, 147, 214, 243, 245, 310, 554, 799, 801, 805, 837, 856, 885, 889], "pow": [775, 1246, 1265], "pow_n": 49, "power": [755, 1246, 1266], "powersofn": 49, "pre": [524, 533, 578, 747, 750, 766, 775, 1123, 1246], "preced": [159, 891], "precis": [10, 11, 33, 36, 42, 63, 131, 214, 244, 245, 264, 267, 272, 310, 395, 666, 885, 891, 969, 1204], "predefin": [235, 310], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 193, 212, 243, 310, 450, 691, 725, 765, 775, 796, 797, 806, 810, 823, 832, 834, 843, 860, 861, 885, 1029, 1148, 1150, 1246], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 796, 797, 806, 823, 832, 843, 885], "predict": [235, 238, 280, 310], "prefer": [129, 130, 133, 134, 143, 164, 173, 190, 214, 220, 243, 244, 273, 296, 310, 369, 370, 444, 533, 683, 684, 775, 791, 850, 885, 940, 1025, 1105, 1231, 1246, 1255, 1275], "prefilt": 148, "prefix": [35, 129, 130, 143, 168, 310, 321, 368, 540, 555, 558, 559, 561, 562, 656, 659, 660, 672, 775, 891, 939, 1194, 1198, 1210], "prefix_": 558, "prefix_a": 558, "prefix_b": 558, "presenc": [724, 733, 891], "present": [119, 159, 197, 310, 474, 658, 659, 775, 843, 885], "preserv": [185, 193, 201, 216, 220, 268, 269, 310, 391, 392, 393, 412, 413, 450, 495, 585, 618, 634, 775, 804, 810, 818, 885, 965, 966, 967, 1029, 1069, 1129, 1157, 1172, 1228, 1246], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 616, 775, 885, 1154, 1246], "presum": [532, 775], "prev_pow2": 49, "prevent": [268, 310, 321, 383, 384, 554, 678, 775, 885, 958, 959, 1217, 1246], "preview": [200, 310], "previou": [49, 168, 393, 554, 555, 557, 559, 561, 562, 572, 675, 775, 967, 1119, 1246], "previous": [2, 3], "price": 1275, "primari": [134, 1272, 1275], "primarili": 1, "primit": [35, 310, 474, 775], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 186, 200, 201, 215, 218, 266, 288, 310, 467, 546, 775, 796, 816, 885, 891, 1048, 1224, 1246, 1275], "prior": 121, "prioriti": 160, "probabl": [437, 578, 775, 1016, 1123, 1246], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 244, 310, 796, 797, 885], "process_index": [267, 310], "produc": [2, 3, 159, 163, 216, 310, 343, 493, 542, 736, 818, 823, 885, 915, 1067], "product": [47, 179, 216, 310, 383, 390, 775, 818, 885, 958, 964, 1246], "profil": [162, 164, 796, 885], "programmat": [181, 310, 801, 885], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 623, 624, 775, 796, 797, 806, 823, 832, 834, 843, 885], "projection_pushdown": [42, 43, 44, 45, 53, 54, 796, 797, 806, 823, 832, 843, 885], "prompt": 123, "propag": [347, 439, 503, 563, 564, 566, 627, 641, 705, 706, 775, 919, 1077, 1114, 1115, 1165, 1179, 1246], "propagate_nan": 707, "properti": [36, 171, 177, 178, 186, 194, 205, 247, 252, 283, 287, 310, 313, 314, 798, 799, 805, 837, 856, 861, 885, 890, 891, 1015, 1030, 1113, 1152, 1246, 1250, 1275], "proport": [689, 775, 1235, 1246], "protocol": [35, 117, 132, 171, 310], "prototyp": 771, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 193, 197, 212, 257, 267, 310, 364, 365, 444, 465, 524, 532, 533, 631, 632, 635, 642, 643, 658, 659, 660, 661, 727, 757, 775, 787, 796, 810, 846, 885, 935, 936, 1039, 1057, 1105, 1169, 1170, 1173, 1180, 1181, 1225, 1246, 1258, 1264, 1267, 1272, 1275], "prune": [141, 146, 148, 823, 885], "public": [132, 310, 775, 787, 885, 1246, 1271], "pulp": 1254, "pure": [36, 310, 539], "purpos": [553, 775, 796, 885], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 796, 797, 806, 823, 832, 834, 843, 860, 861, 885, 1148, 1150, 1246], "put": [33, 42, 310, 314, 885], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 262, 268, 269, 310, 754, 787, 1221, 1227, 1228, 1246, 1255, 1257, 1272], "pyarrow_opt": [41, 133, 141, 144, 310], "pyarrow_t": 1272, "pycapsul": [170, 893], "pycapsuleinterfac": [170, 893], "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 310], "pyodbc_uri": [34, 310], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 171, 214, 220, 244, 245, 264, 296, 310, 388, 393, 397, 454, 532, 533, 637, 703, 716, 717, 719, 720, 762, 763, 765, 775, 781, 802, 869, 885, 967, 971, 981, 982, 983, 987, 1105, 1175, 1226, 1246, 1271], "pythondatatyp": [56, 72], "pythonliter": [1106, 1107, 1108, 1109, 1148, 1246], "pytorch": [272, 310, 1230, 1246], "q": [245, 310, 757, 1258], "q1": [36, 310], "q2": [36, 310], "q3": [36, 310], "q4": [36, 310], "qcut": [386, 775, 961, 1246], "qhoo": 1275, "qmark": 131, "qqr": 891, "quad": [441, 775, 1020, 1246], "qualifi": [34, 310], "quantifi": [636, 1174], "quantil": [310, 578, 601, 602, 775, 885, 1123, 1140, 1246], "quarter": [202, 217, 242, 280, 310, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010, 1268], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 190, 218, 234, 257, 310, 532, 533, 643, 754, 775, 796, 797, 806, 815, 822, 832, 843, 846, 860, 861, 869, 878, 885, 1025, 1105, 1181, 1246, 1254, 1255, 1257, 1261, 1271, 1273, 1274], "quick": [771, 962, 1246, 1275], "quit": [217, 310], "quot": [33, 34, 42, 129, 130, 132, 143, 310, 670, 885, 1208], "quote_char": [33, 42, 129, 130, 143, 310, 885], "quote_plu": 132, "quote_styl": [33, 42, 310, 885], "quotes_titl": 670, "quotient": 1266, "r": [129, 130, 143, 310, 575, 630, 634, 635, 636, 637, 648, 649, 775, 891, 1168, 1172, 1173, 1174, 1175, 1186, 1187, 1201, 1258, 1267], "r1": 55, "r2": 55, "r3": 55, "rab": [628, 651, 1166, 1189, 1263], "rad": 1269, "radian": [387, 699, 775, 1265], "radix": [667, 1205], "rai": [699, 700], "raini": [648, 649, 1186, 1187], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 171, 197, 235, 243, 268, 310, 346, 364, 393, 418, 499, 501, 542, 576, 578, 586, 628, 631, 639, 662, 664, 665, 667, 669, 718, 735, 775, 918, 935, 967, 996, 1073, 1075, 1123, 1130, 1166, 1169, 1177, 1200, 1202, 1203, 1205, 1207, 1227, 1246], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 542, "raker": 126, "ram": [42, 43, 44, 45, 885], "ran": [775, 889], "random": [36, 37, 135, 150, 157, 203, 246, 310, 463, 512, 581, 612, 617, 689, 775, 787, 1037, 1086, 1125, 1147, 1156, 1235, 1246], "randomli": 158, "rang": [17, 36, 131, 132, 181, 188, 202, 215, 310, 326, 387, 393, 401, 411, 416, 417, 419, 432, 433, 468, 698, 703, 705, 715, 716, 717, 718, 719, 720, 731, 732, 761, 762, 763, 775, 801, 814, 885, 891, 962, 967, 975, 989, 994, 995, 997, 1010, 1011, 1018, 1119, 1246, 1267], "rank": [335, 496, 701, 707, 722, 775, 907, 1070, 1246], "rankmethod": [581, 775, 1125, 1246], "rare": [394, 968], "rather": [217, 310, 456, 532, 546, 578, 590, 672, 775, 819, 885, 1123, 1134, 1210, 1246], "raw": 132, "raw_output": [843, 885], "re": [197, 202, 213, 275, 277, 310, 412, 413, 421, 424, 814, 851, 853, 885, 990, 991, 999, 1002, 1272], "reach": [646, 647, 672, 1184, 1185, 1210], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 190, 310, 388, 456, 765, 775, 802, 885, 1025, 1246], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 310], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 771, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 310, 885], "readi": 879, "readthedoc": [36, 310], "real": [636, 1174], "realli": [385, 629, 650, 775, 960, 1167, 1188, 1246], "realloc": [139, 143, 146, 147, 190, 310, 1025, 1246], "rearrang": [220, 310], "reason": [165, 181, 310, 524, 532, 775, 801, 885], "receiv": [47, 131, 143, 220, 234, 296, 310, 533, 575, 775, 831, 885, 1275], "recent": [152, 153, 154, 155, 268, 310, 572, 586, 775, 1119, 1130, 1227, 1246, 1257, 1272], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 190, 310, 775, 948, 1025, 1034, 1111, 1246], "recognis": [15, 16, 20, 891], "recommend": [36, 165, 181, 214, 218, 234, 310, 792, 801, 885, 891], "record": [33, 38, 42, 126, 137, 149, 310, 819, 885], "record_batch": [215, 310], "recordbatch": [116, 215, 310, 754, 1255, 1257, 1272], "recurs": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "red": [46, 84, 85, 296, 689, 775, 869, 1235, 1246], "redempt": 1254, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 244, 297, 298, 300, 303, 310, 616, 712, 725, 775, 870, 871, 873, 876, 885, 1107, 1122, 1154, 1217, 1246], "reduct": [195, 310, 533, 775], "ref": [635, 637, 1173, 1175], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 179, 182, 310, 313, 314, 388, 421, 424, 581, 635, 648, 649, 662, 664, 665, 669, 775, 802, 885, 999, 1002, 1125, 1186, 1187, 1200, 1202, 1203, 1207, 1246, 1250], "referenc": [36, 310, 532, 675, 775, 1255, 1272], "refin": 134, "reg": 126, "regard": [129, 707], "regardless": [121, 173, 201, 217, 273, 310, 370, 398, 643, 684, 765, 775, 791, 850, 885, 972, 1181], "regex": [444, 539, 540, 628, 630, 633, 635, 636, 637, 639, 648, 649, 656, 673, 723, 775, 891, 1166, 1168, 1171, 1173, 1174, 1175, 1177, 1186, 1187, 1194], "regexp_lik": 1265, "region": [36, 145, 310], "regist": [1, 48, 49, 50, 51, 162, 164, 257, 310, 775, 846, 885, 889, 1254, 1255, 1257, 1258, 1259, 1260, 1272, 1274], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1256, 1258, 1260, 1272], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1256, 1257, 1260], "register_plugin": 775, "register_plugin_funct": [775, 889], "register_series_namespac": [1, 48, 49, 50], "registr": [257, 310, 754, 787, 846, 885, 1260, 1272], "regrid": [468, 775], "regular": [124, 214, 243, 244, 280, 287, 310, 444, 628, 630, 635, 636, 637, 639, 648, 649, 703, 723, 771, 775, 861, 885, 891, 1166, 1168, 1173, 1174, 1175, 1177, 1186, 1187, 1270], "reinterpret": [775, 1246], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 310, 415, 440, 442, 443, 689, 775, 993, 1019, 1021, 1022, 1235, 1246], "relat": [131, 168, 648, 649, 891, 1186, 1187, 1261], "releas": [54, 533, 775, 797, 885, 1275], "release_year": 1254, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 185, 188, 193, 235, 310, 391, 392, 450, 495, 585, 654, 655, 775, 804, 810, 823, 885, 965, 966, 1018, 1029, 1069, 1129, 1192, 1193, 1246, 1260], "remaind": [655, 1193, 1266], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 171, 183, 265, 310, 444, 555, 657, 658, 659, 660, 661, 723, 775, 803, 885, 1195, 1196, 1197, 1198, 1199, 1222, 1246, 1274], "removes_pronoun": 650, "renam": [1, 119, 129, 130, 166, 201, 248, 249, 284, 285, 289, 291, 310, 321, 456, 547, 548, 554, 555, 556, 557, 559, 561, 562, 675, 676, 753, 757, 775, 813, 838, 839, 857, 858, 862, 864, 885, 895, 1177, 1214, 1223, 1246, 1272], "rename_field": [654, 655, 1192, 1193], "render": [843, 885], "render_as_str": 131, "reoconstruct": [245, 310], "repeat": [135, 146, 582, 584, 747, 766, 775], "repeat_bi": 775, "replac": [34, 35, 129, 130, 143, 191, 192, 240, 274, 277, 284, 285, 310, 397, 418, 448, 532, 533, 586, 649, 650, 665, 775, 808, 853, 857, 858, 885, 971, 996, 1027, 1130, 1148, 1150, 1187, 1188, 1203, 1246, 1265], "replace_al": [586, 648, 775, 1129, 1130, 1186, 1246], "replace_column": 310, "replace_strict": [585, 775, 1129, 1246], "replace_time_zon": [394, 400, 402, 973, 974, 1000], "replace_with": [650, 1188], "replic": [682, 775, 1229, 1246], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 235, 257, 258, 267, 268, 281, 288, 310, 454, 477, 478, 520, 526, 532, 626, 640, 645, 652, 663, 690, 693, 707, 709, 721, 723, 735, 736, 737, 746, 751, 752, 756, 764, 771, 775, 846, 847, 855, 885, 891, 1148, 1164, 1178, 1183, 1190, 1201, 1227, 1236, 1246, 1272], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 250, 266, 310, 396, 401, 404, 406, 407, 408, 409, 410, 411, 414, 416, 417, 420, 433, 434, 436, 545, 682, 775, 806, 821, 840, 885, 944, 970, 975, 978, 979, 980, 984, 985, 986, 988, 989, 992, 994, 995, 998, 1011, 1012, 1014, 1224, 1229, 1246], "requested_schema": [170, 893], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 179, 243, 267, 268, 269, 272, 310, 360, 440, 442, 443, 525, 533, 571, 616, 662, 664, 665, 686, 750, 775, 799, 805, 845, 856, 885, 932, 1017, 1019, 1021, 1022, 1099, 1154, 1200, 1202, 1203, 1227, 1228, 1232, 1246, 1250], "require_al": 891, "rerais": [54, 797, 885], "rerun": [190, 310, 1025, 1246], "resampl": [202, 310, 814, 885], "reset": [4, 168], "reset_index": [121, 202, 310, 814, 885], "reshap": [235, 268, 310, 497, 775, 1071, 1246], "resolv": [397, 798, 799, 805, 837, 856, 885], "resourc": 889, "respect": [36, 310, 629, 638, 650, 891, 1167, 1176, 1188, 1230, 1246], "respons": [132, 227, 310, 828, 885], "rest": [670, 1208], "restor": 168, "restore_default": 168, "restrict": [30, 655, 1193], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 190, 193, 202, 203, 216, 217, 231, 235, 242, 245, 250, 251, 253, 267, 268, 269, 280, 287, 289, 295, 310, 393, 419, 421, 424, 432, 440, 441, 442, 443, 447, 454, 463, 470, 482, 523, 524, 532, 533, 545, 571, 576, 578, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 614, 615, 634, 653, 654, 665, 685, 689, 710, 711, 712, 718, 719, 720, 721, 735, 736, 747, 750, 751, 752, 754, 766, 775, 792, 796, 801, 810, 814, 818, 823, 832, 836, 840, 841, 842, 861, 862, 868, 879, 880, 885, 891, 898, 997, 999, 1002, 1010, 1019, 1021, 1022, 1025, 1026, 1037, 1043, 1058, 1097, 1105, 1123, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1151, 1153, 1172, 1191, 1192, 1203, 1227, 1228, 1235, 1246, 1255, 1261, 1272, 1273, 1275], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [197, 267, 310, 340, 341, 489, 490, 673, 746, 912, 913, 1063, 1064, 1211, 1225, 1246, 1261], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 173, 175, 178, 179, 180, 184, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 201, 202, 204, 205, 206, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 224, 229, 230, 231, 233, 234, 235, 239, 242, 243, 244, 245, 246, 250, 257, 260, 261, 267, 268, 269, 272, 273, 274, 275, 280, 283, 284, 285, 291, 293, 295, 296, 299, 304, 310, 322, 324, 327, 328, 329, 330, 331, 332, 335, 336, 340, 341, 342, 344, 346, 347, 358, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 386, 387, 393, 394, 396, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 441, 446, 454, 457, 458, 460, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 489, 490, 492, 497, 499, 501, 502, 503, 505, 512, 522, 523, 530, 532, 533, 543, 545, 546, 551, 575, 578, 580, 584, 585, 586, 587, 589, 590, 612, 613, 618, 619, 620, 627, 628, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 663, 667, 672, 679, 680, 681, 683, 684, 685, 687, 688, 689, 692, 693, 698, 699, 700, 701, 702, 703, 708, 710, 715, 716, 717, 718, 719, 720, 721, 724, 727, 729, 731, 732, 733, 734, 735, 736, 737, 747, 750, 753, 754, 757, 760, 761, 762, 763, 765, 766, 775, 791, 794, 796, 797, 799, 800, 801, 805, 806, 812, 814, 815, 818, 821, 822, 823, 831, 832, 834, 836, 840, 843, 849, 850, 851, 856, 857, 858, 864, 866, 868, 872, 877, 879, 885, 889, 891, 896, 897, 898, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 930, 932, 934, 935, 936, 938, 940, 943, 945, 949, 955, 961, 962, 967, 968, 970, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1020, 1024, 1025, 1033, 1038, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1071, 1073, 1075, 1076, 1077, 1079, 1086, 1096, 1097, 1104, 1105, 1110, 1117, 1123, 1129, 1130, 1131, 1132, 1133, 1134, 1147, 1149, 1157, 1165, 1166, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1189, 1190, 1191, 1192, 1193, 1201, 1205, 1210, 1218, 1221, 1228, 1231, 1233, 1234, 1235, 1237, 1246, 1254, 1255, 1259, 1261, 1262, 1263, 1264, 1266, 1267, 1270, 1272, 1273, 1274, 1275], "return_as_str": [200, 310, 546], "return_dtyp": [36, 220, 310, 532, 533, 585, 586, 692, 736, 737, 775, 1105, 1129, 1130, 1246], "return_typ": [267, 272, 310], "returns_scalar": [532, 533, 737, 775, 889], "reus": [53, 54, 796, 797, 806, 832, 843, 885], "revers": [173, 188, 273, 310, 370, 380, 381, 382, 383, 384, 555, 557, 559, 684, 710, 775, 791, 850, 885, 955, 956, 957, 958, 959, 1246, 1263, 1265], "reverse_": 557, "reverse_a": 557, "reverse_b": 557, "revert": [7, 9, 10], "rhap": 638, "rhapsodi": 638, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 202, 216, 217, 242, 279, 310, 386, 440, 442, 443, 470, 513, 514, 515, 516, 578, 591, 594, 596, 598, 600, 602, 605, 607, 609, 613, 621, 704, 716, 717, 719, 720, 762, 763, 775, 814, 818, 819, 836, 854, 885, 961, 1019, 1021, 1022, 1043, 1087, 1088, 1089, 1090, 1123, 1149, 1160, 1246, 1261, 1265], "right_on": [216, 217, 279, 310, 818, 819, 854, 885], "rightmost": [613, 775, 1149, 1246, 1267], "rld": [657, 659, 1197], "rle": [590, 775, 1134, 1246], "rle_id": [589, 775, 1246], "rle_id_a": [590, 775], "rle_id_ab": [590, 775], "rn": [129, 130, 143], "role": 132, "roll": [202, 310, 393, 412, 413, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 705, 751, 752, 775, 814, 885, 967, 990, 991, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1246], "rollback": [413, 991], "rolled_forward": 393, "rollforward": [412, 990], "rolling_map": [775, 1246], "rolling_max": [775, 1246], "rolling_max_bi": 775, "rolling_mean": [775, 1246], "rolling_mean_bi": 775, "rolling_median": [775, 1246], "rolling_median_bi": 775, "rolling_min": [775, 1246], "rolling_min_bi": 775, "rolling_quantil": [775, 1246], "rolling_quantile_bi": 775, "rolling_row_max": [594, 775], "rolling_row_mean": [596, 775], "rolling_row_median": [598, 775], "rolling_row_min": [600, 775], "rolling_row_quantil": [602, 775], "rolling_row_std": [605, 775], "rolling_row_sum": [607, 775], "rolling_row_var": [609, 775], "rolling_skew": [775, 1246], "rolling_std": [775, 1246], "rolling_std_bi": 775, "rolling_sum": [592, 775, 1135, 1246], "rolling_sum_bi": 775, "rolling_var": [775, 1246], "rolling_var_bi": 775, "rollinggroupbi": [242, 310], "rollinginterpolationmethod": [181, 237, 302, 310, 579, 601, 602, 748, 775, 801, 833, 875, 885, 962, 1124, 1140, 1246], "ronaldo": [635, 1173], "root": [133, 144, 373, 544, 554, 555, 557, 559, 561, 562, 625, 774, 775, 946, 1163, 1246, 1266], "round": [20, 36, 49, 123, 131, 310, 374, 378, 453, 611, 680, 775, 947, 1031, 1146, 1246, 1265], "round_sig_fig": [775, 1246], "round_str": 997, "round_td": 997, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 173, 175, 185, 190, 193, 195, 196, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 226, 231, 235, 242, 245, 246, 255, 261, 264, 266, 267, 272, 273, 275, 277, 278, 279, 286, 287, 291, 293, 295, 296, 304, 310, 314, 335, 336, 344, 359, 370, 446, 454, 458, 464, 486, 497, 524, 571, 572, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 622, 624, 634, 642, 679, 684, 698, 701, 706, 708, 710, 725, 729, 731, 732, 734, 749, 751, 752, 760, 765, 775, 791, 794, 796, 804, 810, 811, 812, 814, 815, 818, 819, 820, 822, 823, 827, 844, 849, 850, 851, 853, 854, 860, 861, 864, 866, 868, 869, 877, 885, 907, 916, 1024, 1025, 1033, 1038, 1060, 1071, 1119, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1161, 1172, 1180, 1218, 1246, 1254, 1261, 1263, 1273, 1275], "row_group": [141, 148], "row_group_s": [41, 45, 310, 885], "row_height": [36, 310], "row_index": [36, 310], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [286, 310, 860, 885], "row_tot": [36, 310], "rowname_col": [310, 314], "rows_by_kei": [214, 244, 310], "rowserror": [243, 310], "rowtotalsdefinit": [36, 310], "rpc": 131, "rstrip": 555, "rtol": [152, 153, 154, 155], "rtrim": 1265, "ru": 1267, "rule": [129, 141, 143, 148, 195, 310, 629, 650, 665, 1167, 1188, 1203], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 201, 218, 220, 249, 275, 285, 296, 310, 385, 496, 532, 533, 589, 590, 645, 753, 775, 796, 797, 806, 813, 823, 827, 832, 839, 843, 851, 858, 885, 891, 960, 1070, 1105, 1133, 1134, 1183, 1246, 1272, 1275], "runtimeerror": [268, 310, 1227, 1246], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 220, 296, 310, 637, 885, 889, 1105, 1175, 1246], "s1": [46, 84, 85, 154, 155, 195, 310, 931, 1017, 1034, 1057, 1065, 1098, 1126, 1237, 1246], "s2": [1, 46, 84, 85, 154, 155, 195, 310, 931, 948, 964, 1017, 1034, 1048, 1057, 1065, 1098, 1111, 1126, 1237, 1246], "s3": [1, 35, 133, 144, 145, 148, 149, 310, 931, 1098, 1246], "s_bar": 1263, "s_dt": [1267, 1268], "s_dt1": 1267, "s_dt2": 1267, "s_foo": 1263, "s_from_str_repr": [1224, 1246], "s_head_5": 640, "s_head_n": 640, "s_tail_5": 663, "s_tail_n": 663, "s_tm": [1267, 1268], "safe": [583, 775, 1127, 1246], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 193, 201, 220, 235, 244, 245, 256, 275, 284, 285, 289, 296, 310, 318, 325, 358, 391, 392, 450, 454, 456, 457, 460, 523, 537, 541, 571, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 624, 634, 644, 675, 771, 775, 796, 797, 810, 813, 821, 823, 845, 851, 857, 858, 862, 885, 891, 894, 930, 965, 966, 971, 1097, 1105, 1129, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1172, 1182, 1237, 1246, 1259, 1261, 1268], "samoa": [394, 968], "sampl": [129, 130, 296, 310, 621, 775, 869, 1160, 1246], "sample_s": [129, 130], "sampled_from": 1275, "sandwich": [198, 310], "satisfi": [470, 775, 1043, 1246], "saturdai": [202, 310, 814, 885], "save": [2, 3, 6, 202, 217, 242, 280, 310, 394, 402, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 721, 762, 763, 771, 775, 787, 814, 819, 836, 885, 976, 993, 997, 1010], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [212, 220, 243, 310, 532, 613, 640, 645, 652, 663, 735, 737, 775, 889, 1057, 1149, 1178, 1183, 1190, 1201, 1246], "scale": [28, 63, 188, 310, 533, 575, 666, 775, 891, 1018, 1204, 1246], "scale_negative_even": [575, 775], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 310, 642, 815, 822, 885, 1180], "scan_csv": [42, 43, 44, 45, 129, 130, 885], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [310, 313, 1246], "scenario": 1246, "schedul": [54, 797, 885], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 175, 176, 177, 183, 186, 188, 215, 218, 220, 227, 231, 268, 272, 310, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 400, 523, 524, 533, 542, 556, 558, 560, 642, 692, 757, 775, 787, 794, 795, 798, 799, 803, 805, 823, 828, 856, 869, 885, 891, 951, 1180, 1246, 1254], "schema_mod": [35, 310], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 215, 268, 310, 885, 891], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 310, 885], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 310, 757, 823, 869, 885], "schindler": 1254, "scientif": [11, 33, 42, 310, 885], "scikit": [272, 310], "scipi": [482, 621, 775, 1058, 1160, 1246, 1250], "scope": [168, 786, 891, 1257, 1260, 1272], "score": [36, 235, 310], "scroll": [36, 310], "sdiff": 515, "search": [217, 310, 524, 629, 638, 650, 819, 845, 885, 1167, 1176, 1188], "search_sort": [775, 1246], "searchsortedsid": [613, 775, 1149, 1246], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [648, 649], "sec": [1268, 1275], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 202, 217, 242, 280, 310, 404, 407, 409, 410, 414, 415, 419, 431, 432, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 648, 649, 662, 665, 718, 719, 720, 721, 761, 762, 763, 765, 775, 814, 819, 836, 885, 891, 993, 997, 1009, 1010, 1020, 1186, 1187, 1200, 1203, 1246, 1267, 1268, 1273, 1275], "second_part": [654, 655, 1192, 1193], "seconds_diff": 431, "secret": [145, 148], "section": [235, 310, 628, 635, 636, 639, 648, 649, 716, 717, 719, 720, 762, 763, 1166, 1173, 1174, 1177, 1186, 1187], "secur": [388, 775, 802, 885], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 179, 193, 202, 216, 234, 235, 310, 313, 314, 375, 449, 482, 532, 621, 628, 635, 636, 639, 640, 648, 649, 663, 716, 717, 719, 720, 749, 762, 763, 771, 775, 796, 797, 810, 814, 885, 889, 891, 944, 950, 1058, 1160, 1166, 1173, 1174, 1177, 1178, 1186, 1187, 1201, 1246, 1250, 1275], "seed": [150, 203, 246, 310, 463, 512, 581, 612, 617, 775, 1037, 1086, 1125, 1147, 1156, 1246], "seed_1": [203, 310, 463, 775, 1037, 1246], "seed_2": [203, 310, 463, 775, 1037, 1246], "seed_3": [203, 310, 463, 775, 1037, 1246], "seen": [362, 455, 775], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 172, 212, 213, 217, 220, 231, 234, 243, 249, 255, 257, 270, 276, 280, 287, 310, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 349, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 385, 387, 389, 390, 391, 392, 395, 397, 398, 406, 412, 413, 415, 418, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 440, 442, 443, 444, 445, 446, 447, 451, 453, 455, 458, 462, 463, 465, 466, 467, 468, 471, 472, 475, 481, 482, 483, 485, 496, 497, 524, 527, 528, 529, 530, 532, 533, 534, 535, 536, 539, 549, 551, 553, 554, 556, 558, 560, 563, 564, 568, 569, 570, 571, 573, 574, 577, 579, 580, 581, 582, 583, 584, 587, 588, 589, 592, 603, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 635, 636, 637, 638, 639, 641, 662, 673, 675, 678, 680, 681, 683, 684, 686, 687, 688, 689, 690, 693, 695, 697, 700, 701, 702, 705, 707, 708, 709, 710, 713, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 738, 740, 742, 743, 745, 746, 749, 750, 754, 755, 756, 757, 758, 760, 764, 771, 775, 790, 796, 799, 819, 831, 839, 844, 846, 852, 859, 861, 885, 891, 996, 1032, 1070, 1148, 1150, 1161, 1181, 1200, 1246, 1254, 1255, 1256, 1257, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274], "select_from": [158, 161, 163], "select_seq": [310, 885], "selector": [0, 36, 174, 183, 185, 189, 226, 233, 235, 256, 265, 267, 272, 275, 277, 278, 310, 314, 444, 450, 539, 775, 787, 793, 803, 804, 807, 827, 845, 851, 853, 885], "selectortyp": [36, 310, 891], "self": [1, 48, 49, 50, 51, 53, 54, 257, 288, 310, 754, 775, 796, 797, 806, 832, 843, 846, 859, 885, 898, 941, 951, 955, 1025, 1029, 1040, 1104, 1105, 1116, 1120, 1121, 1126, 1129, 1130, 1148, 1150, 1151, 1162, 1234, 1237, 1246, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272], "semi": [126, 216, 310, 818, 885, 1261], "semigraph": 20, "sens": [129, 135, 137, 227, 280, 310, 571, 775, 828, 885], "sensit": [628, 636, 639, 648, 649, 1166, 1174, 1177, 1186, 1187], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 233, 235, 265, 274, 276, 310, 344, 347, 497, 503, 533, 634, 706, 711, 712, 775, 852, 885, 916, 919, 1071, 1077, 1172, 1216, 1222, 1246, 1267], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 173, 181, 189, 190, 216, 217, 226, 231, 233, 234, 235, 245, 256, 265, 267, 272, 273, 277, 278, 279, 280, 310, 359, 370, 386, 457, 474, 524, 532, 575, 578, 585, 586, 624, 660, 661, 675, 684, 701, 711, 712, 725, 727, 736, 737, 746, 749, 755, 775, 791, 801, 807, 818, 819, 827, 831, 845, 850, 853, 854, 885, 891, 931, 961, 962, 1025, 1098, 1123, 1129, 1130, 1214, 1246], "sequenti": [53, 54, 249, 285, 310, 796, 797, 806, 832, 839, 843, 858, 885], "ser": [973, 974, 1000], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 152, 154, 155, 159, 184, 193, 195, 197, 199, 202, 203, 206, 207, 209, 211, 213, 222, 224, 229, 240, 242, 246, 260, 263, 266, 268, 270, 271, 290, 310, 325, 336, 359, 363, 372, 374, 418, 447, 450, 453, 457, 458, 467, 472, 474, 475, 477, 478, 479, 480, 491, 497, 499, 524, 530, 532, 533, 581, 582, 583, 584, 585, 586, 591, 592, 603, 614, 616, 640, 662, 663, 664, 665, 669, 673, 683, 688, 698, 702, 711, 712, 716, 717, 719, 720, 725, 727, 731, 732, 735, 736, 737, 747, 749, 750, 753, 754, 757, 762, 763, 766, 775, 787, 810, 814, 836, 863, 885, 889, 1238, 1240, 1242, 1245, 1247, 1250, 1251, 1252, 1253, 1255, 1257, 1272, 1275], "serial": [39, 40, 182, 310, 388, 548, 775, 802, 885], "serializ": [775, 889], "serializationformat": [182, 250, 310, 388, 545, 775, 802, 840, 885], "server": [34, 131, 132, 310], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 171, 178, 185, 194, 197, 201, 203, 214, 217, 224, 226, 244, 246, 248, 250, 255, 260, 265, 267, 268, 272, 274, 275, 277, 278, 279, 284, 310, 322, 324, 346, 347, 359, 375, 386, 418, 435, 463, 474, 499, 501, 503, 512, 513, 514, 515, 516, 518, 524, 532, 533, 539, 545, 575, 578, 585, 586, 592, 593, 595, 597, 599, 601, 604, 606, 608, 612, 617, 621, 622, 627, 641, 642, 648, 649, 652, 657, 658, 659, 660, 661, 662, 664, 665, 669, 689, 693, 695, 698, 702, 706, 716, 717, 718, 719, 720, 721, 731, 732, 735, 747, 750, 751, 752, 757, 762, 763, 765, 766, 775, 787, 796, 797, 804, 806, 813, 818, 819, 823, 827, 838, 840, 844, 851, 853, 854, 857, 869, 885, 889, 896, 897, 918, 919, 931, 935, 950, 961, 996, 1013, 1030, 1037, 1048, 1055, 1073, 1075, 1077, 1086, 1087, 1088, 1089, 1090, 1092, 1098, 1105, 1123, 1129, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1147, 1148, 1149, 1156, 1160, 1161, 1165, 1179, 1180, 1186, 1187, 1190, 1195, 1196, 1197, 1200, 1202, 1203, 1207, 1227, 1235, 1246, 1271, 1275], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [248, 284, 310, 838, 857, 885], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 797, 885], "set_fmt_float": 30, "set_fmt_str_length": [629, 638, 650, 1167, 1188], "set_index": [202, 310, 814, 885], "set_legend": [36, 310], "set_sort": [242, 280, 310, 591, 775, 819, 836, 885, 1246], "set_stat": 30, "set_streaming_chunk_s": [796, 885], "set_styl": [36, 310], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_thousands_separ": 9, "set_titl": [36, 310], "set_verbos": 168, "setosa": [310, 313], "setup": 1275, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 310, 885, 1275], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 246, 248, 250, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 549, 550, 551, 552, 553, 554, 555, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 790, 791, 793, 794, 796, 797, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1110, 1116, 1117, 1119, 1120, 1121, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1229, 1231, 1232, 1233, 1234, 1235, 1237, 1246, 1254, 1255, 1256, 1257, 1259, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273], "share": [152, 153, 154, 155, 188, 310, 1018, 1246], "shawshank": 1254, "sheet": [36, 134, 140, 310], "sheet1": [36, 310], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 310], "sheetnam": [134, 140], "shift": [202, 310, 362, 389, 455, 494, 572, 705, 775, 814, 885, 963, 1068, 1119, 1246], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 524, 731, 732], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 183, 214, 217, 220, 243, 244, 245, 256, 264, 265, 276, 296, 310, 320, 385, 388, 435, 441, 444, 477, 478, 496, 533, 545, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 613, 621, 624, 689, 701, 721, 723, 735, 737, 751, 752, 765, 771, 775, 796, 802, 803, 818, 819, 823, 840, 845, 852, 885, 891, 960, 1013, 1020, 1070, 1105, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1149, 1160, 1235, 1246, 1255], "show": [30, 36, 181, 185, 200, 218, 232, 310, 465, 775, 801, 804, 832, 843, 885, 1039, 1246, 1259, 1271], "show_graph": [218, 310, 885], "show_plot": [832, 885], "shrink": [254, 310, 616, 775, 1154, 1155, 1246], "shrink_dtyp": [775, 1246], "shrink_to_fit": [310, 1246], "shuffl": [150, 246, 272, 296, 310, 512, 612, 775, 869, 1086, 1147, 1246], "side": [36, 202, 242, 310, 470, 513, 514, 515, 516, 591, 594, 596, 598, 600, 602, 605, 607, 609, 613, 716, 717, 719, 720, 762, 763, 775, 814, 836, 885, 889, 1043, 1087, 1088, 1089, 1090, 1149, 1246], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 415, 583, 648, 649, 672, 775, 891, 993, 1127, 1186, 1187, 1210, 1246, 1265], "sign_x": 1266, "signed_integ": 891, "signific": [148, 214, 220, 310, 533, 611, 775, 1105, 1146, 1246], "significantli": [134, 220, 296, 310, 1105, 1246, 1275], "silenc": 91, "silent": [667, 1205], "similar": [32, 41, 128, 165, 195, 217, 253, 275, 277, 310, 354, 421, 424, 517, 571, 615, 676, 734, 765, 775, 819, 842, 851, 853, 885, 926, 999, 1002, 1091, 1153, 1246], "similarli": [36, 119, 202, 217, 242, 280, 310, 415, 419, 432, 591, 594, 596, 598, 600, 602, 605, 607, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 993, 997, 1010], "simpl": [36, 231, 310], "simpler": 891, "simpli": [143, 711, 725], "simplifi": [42, 43, 44, 45, 53, 54, 796, 797, 806, 832, 843, 885], "simplify_express": [42, 43, 44, 45, 53, 54, 796, 797, 806, 832, 843, 885], "sin": [775, 1246, 1265], "sinc": [35, 61, 62, 77, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 172, 226, 268, 286, 291, 310, 400, 403, 435, 456, 532, 548, 585, 627, 634, 691, 700, 727, 775, 790, 806, 827, 845, 859, 860, 864, 885, 974, 977, 982, 983, 1013, 1036, 1129, 1165, 1172, 1227, 1246], "sind": 1265, "sine": [329, 330, 532, 619, 620, 775, 901, 902, 1158, 1159, 1246, 1269], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 174, 183, 184, 185, 190, 197, 203, 212, 220, 233, 243, 245, 256, 267, 268, 310, 343, 375, 393, 415, 457, 460, 463, 493, 499, 532, 533, 582, 585, 587, 589, 624, 627, 640, 641, 645, 652, 663, 691, 701, 705, 706, 732, 736, 737, 755, 763, 771, 775, 793, 796, 797, 803, 804, 845, 885, 891, 915, 950, 967, 993, 1025, 1037, 1067, 1073, 1126, 1129, 1131, 1133, 1165, 1178, 1179, 1183, 1190, 1201, 1221, 1227, 1246, 1256], "sinh": [775, 1246], "sink_csv": 885, "sink_ipc": 885, "sink_ndjson": 885, "sink_parquet": 885, "site_id": [310, 314], "six": [613, 775], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 188, 278, 310, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 698, 731, 732, 751, 752, 775, 796, 885, 1018, 1131, 1141, 1246, 1275], "sizeunit": [188, 310, 367, 938, 1018, 1246], "skew": [603, 775, 1141, 1246], "skewtest": [621, 775, 1160, 1246], "skip": [129, 130, 134, 141, 143, 148, 217, 278, 310, 1105, 1246, 1261], "skip_empty_lin": 134, "skip_nul": [533, 775, 1105, 1246], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [272, 310], "slice": [42, 43, 44, 45, 48, 53, 54, 188, 204, 215, 261, 310, 502, 522, 533, 542, 544, 592, 593, 595, 597, 599, 601, 604, 606, 608, 640, 663, 775, 796, 797, 806, 823, 832, 843, 885, 889, 1018, 1038, 1076, 1096, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1178, 1201, 1218, 1246, 1267], "slice_pushdown": [42, 43, 44, 45, 53, 54, 796, 797, 806, 823, 832, 843, 885], "slide": [385, 775, 960, 1246], "slightli": [42, 43, 44, 45, 87, 454, 775, 885, 1268], "slot": [385, 389, 494, 775, 960, 963, 1068, 1246], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 148, 310, 385, 533, 592, 642, 775, 869, 885, 960, 1135, 1180, 1246], "slower": [120, 122, 134, 201, 220, 233, 280, 296, 310, 533, 737, 775, 813, 869, 885, 1105, 1246], "small": [11, 132, 419, 885, 1275], "smaller": [41, 45, 188, 310, 885, 1018, 1246], "smallest": [173, 273, 310, 369, 370, 684, 775, 791, 850, 885, 940, 1246, 1262, 1264], "smooth": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "snappi": [31, 41, 45, 310, 885], "snippet": [804, 885], "snowflak": [131, 132], "snowi": [648, 649], "so": [1, 36, 132, 143, 165, 200, 202, 235, 242, 310, 336, 346, 388, 454, 470, 501, 524, 533, 591, 648, 649, 650, 657, 658, 659, 673, 775, 802, 814, 836, 885, 891, 918, 1075, 1186, 1187, 1188, 1195, 1196, 1197], "softwar": [32, 128, 310], "solut": [34, 310], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 171, 185, 235, 245, 268, 310, 314, 771, 804, 885, 1048, 1246, 1275], "some_account": [636, 1174], "some_t": 1274, "someth": [532, 775], "sometim": [721, 774], "somewher": [636, 1174], "sort": [47, 48, 173, 202, 217, 227, 234, 235, 242, 251, 273, 280, 293, 304, 310, 335, 369, 370, 441, 450, 533, 571, 591, 614, 624, 683, 684, 689, 691, 701, 737, 775, 791, 806, 814, 819, 828, 831, 832, 836, 841, 843, 850, 866, 877, 885, 891, 907, 940, 1020, 1055, 1151, 1231, 1232, 1235, 1246, 1261, 1273, 1275], "sort_bi": [571, 775], "sort_column": [235, 310], "sorted_asc": [1030, 1246], "sorted_desc": [1030, 1246], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 775, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1250, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1272], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 310], "source_cha": 123, "source_channel_id": 123, "space": [20, 202, 310, 814, 885, 891], "spam": [223, 310, 636, 1174], "span": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "spanner": [310, 314], "spark": [41, 310], "sparklin": [36, 310], "speak": [621, 775, 1160, 1246], "spearman": 707, "speci": [310, 313], "special": [34, 129, 130, 132, 143, 272, 287, 310, 592, 636, 648, 649, 775, 861, 885, 1105, 1135, 1174, 1186, 1187, 1246], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 174, 214, 216, 217, 262, 267, 310, 421, 424, 662, 664, 665, 669, 689, 775, 793, 818, 819, 885, 890, 891, 999, 1002, 1200, 1202, 1203, 1207, 1221, 1225, 1235, 1246, 1261, 1272, 1275], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 143, 160, 173, 174, 188, 189, 192, 197, 201, 202, 216, 233, 235, 242, 243, 245, 248, 249, 253, 256, 267, 273, 276, 284, 285, 289, 310, 370, 375, 440, 442, 443, 444, 449, 571, 584, 586, 593, 595, 597, 599, 601, 604, 606, 608, 615, 624, 676, 684, 701, 704, 705, 706, 716, 717, 719, 720, 721, 723, 753, 757, 762, 763, 771, 775, 791, 793, 807, 809, 813, 814, 818, 836, 838, 839, 842, 845, 850, 852, 857, 858, 862, 885, 891, 950, 1018, 1019, 1021, 1022, 1028, 1130, 1153, 1225, 1246, 1261, 1274], "speed": [45, 251, 310, 533, 775, 841, 885, 1275], "speedup": [47, 148, 214, 220, 310, 533, 775, 1105, 1246], "split": [1, 36, 41, 48, 215, 310, 634, 654, 655, 1172, 1192, 1193], "split_by_column_dtyp": 50, "split_inclus": 653, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 235, 310], "spring": [648, 649], "sql": [0, 34, 106, 107, 115, 131, 132, 216, 253, 310, 354, 517, 615, 734, 755, 775, 787, 842, 885, 926, 1091, 1153, 1246, 1254, 1255, 1257, 1259, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1273, 1274], "sql_expr": 1272, "sqlalchemi": [34, 131, 151, 310], "sqlcontext": [257, 310, 754, 846, 885, 1271], "sqlite": [34, 131, 310], "sqrt": [533, 621, 676, 775, 1105, 1160, 1246, 1265], "sqrt_x": 1266, "squar": [1, 51, 296, 482, 587, 625, 775, 869, 1058, 1131, 1163, 1246, 1266], "st": 1275, "stabil": [203, 310, 463, 775, 1037, 1246], "stabl": [141, 179, 181, 182, 203, 246, 250, 257, 310, 388, 463, 529, 545, 775, 801, 802, 827, 840, 845, 846, 885, 1037, 1246], "stack": [55, 206, 282, 310, 1255], "stai": [532, 775], "standalon": [157, 891], "standard": [10, 36, 258, 267, 272, 310, 406, 442, 604, 605, 621, 626, 643, 756, 771, 775, 847, 885, 980, 1021, 1160, 1164, 1181, 1246, 1262, 1275], "standardis": [36, 310], "start": [36, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 196, 201, 202, 218, 255, 280, 286, 287, 310, 363, 366, 368, 393, 401, 411, 416, 419, 432, 433, 444, 458, 500, 518, 590, 594, 596, 598, 600, 602, 605, 607, 609, 622, 628, 633, 636, 647, 652, 656, 657, 659, 660, 663, 672, 698, 703, 711, 715, 716, 717, 718, 719, 720, 723, 725, 731, 732, 762, 763, 765, 771, 775, 812, 813, 814, 832, 844, 860, 861, 885, 891, 939, 967, 969, 972, 975, 977, 978, 984, 986, 988, 989, 992, 994, 997, 1001, 1010, 1011, 1033, 1074, 1092, 1134, 1161, 1171, 1174, 1185, 1190, 1194, 1195, 1197, 1201, 1210, 1246, 1261, 1267, 1275], "start_bi": [202, 310, 814, 885], "startbi": [202, 310, 814, 885], "starts_a": 1267, "starts_with": [48, 235, 310, 314, 363, 366, 539, 628, 633, 754, 846, 885, 891, 1171, 1265], "starts_with_expr": 368, "starts_with_lit": 368, "startup": [267, 310], "stat": [482, 621, 775, 1058, 1160, 1246], "state": [4, 5, 99, 711, 787, 806, 832, 843, 885, 1272], "statement": [765, 1259, 1273], "static": [82, 869], "statist": [41, 45, 129, 130, 141, 146, 148, 181, 310, 442, 443, 482, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 621, 775, 801, 885, 962, 1021, 1022, 1058, 1141, 1160, 1246], "std": [181, 310, 604, 605, 775, 801, 885, 962, 1142, 1246], "std_dev": [36, 310], "stddev": 1265, "stddev_samp": 1262, "stdev": [36, 310, 1262], "stdev_samp": 1262, "stdout": [168, 200, 310, 546], "step": [278, 310, 454, 698, 731, 732, 775], "steve": [227, 310, 828, 885], "still": [131, 132], "stock_1": [310, 313], "stock_2": [310, 313], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 594, 596, 598, 600, 602, 605, 607, 609, 775, 969, 972, 977, 978, 984, 986, 988, 992, 997, 1001], "storag": [35, 129, 133, 135, 137, 144, 145, 310], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 310], "store": [35, 129, 145, 190, 214, 244, 310, 372, 589, 775, 942, 1025, 1133, 1246], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 173, 174, 178, 181, 182, 183, 184, 185, 186, 188, 189, 193, 194, 195, 197, 198, 200, 201, 202, 204, 206, 209, 211, 212, 214, 216, 217, 219, 221, 223, 225, 226, 227, 228, 230, 231, 233, 235, 237, 239, 240, 241, 242, 243, 244, 246, 250, 251, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 319, 320, 321, 342, 347, 359, 363, 364, 365, 366, 368, 370, 372, 380, 386, 388, 390, 398, 415, 418, 419, 421, 424, 432, 441, 444, 450, 452, 456, 457, 460, 467, 470, 491, 492, 501, 502, 503, 518, 522, 524, 533, 542, 544, 545, 546, 548, 555, 556, 557, 558, 559, 560, 561, 562, 568, 571, 575, 578, 584, 585, 586, 588, 590, 591, 594, 596, 598, 600, 602, 605, 607, 609, 616, 623, 624, 673, 674, 675, 684, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 771, 775, 782, 791, 793, 796, 797, 799, 801, 802, 803, 804, 806, 807, 810, 813, 814, 816, 818, 819, 827, 828, 831, 832, 834, 835, 836, 840, 841, 843, 844, 845, 846, 850, 851, 852, 853, 854, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 885, 889, 890, 891, 895, 914, 919, 931, 936, 941, 942, 961, 962, 972, 993, 996, 997, 999, 1002, 1010, 1020, 1028, 1030, 1065, 1066, 1077, 1098, 1113, 1114, 1115, 1123, 1128, 1129, 1130, 1150, 1211, 1213, 1214, 1222, 1223, 1224, 1225, 1235, 1246, 1251, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1268, 1272, 1273, 1275], "str_date": 1267, "str_timestamp": 1267, "strategi": [33, 42, 47, 55, 129, 148, 156, 157, 158, 159, 160, 161, 163, 192, 202, 216, 217, 230, 279, 310, 449, 524, 533, 775, 809, 814, 818, 819, 854, 885, 1028, 1098, 1246], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 201, 216, 275, 310, 532, 775, 796, 797, 806, 813, 818, 823, 827, 832, 843, 845, 851, 885], "streamabl": [823, 827, 853, 885], "strftime": [87, 424, 1002, 1265, 1267], "strict": [118, 119, 122, 126, 174, 183, 310, 364, 371, 628, 631, 639, 662, 664, 665, 667, 669, 775, 793, 803, 885, 891, 935, 941, 1166, 1169, 1177, 1200, 1202, 1203, 1205, 1207, 1246], "strictli": [33, 42, 46, 85, 310, 885], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 173, 174, 177, 182, 186, 188, 195, 197, 200, 201, 202, 217, 233, 235, 242, 245, 247, 248, 249, 250, 256, 266, 267, 273, 274, 278, 280, 284, 285, 289, 310, 319, 342, 347, 364, 365, 366, 370, 388, 415, 419, 421, 424, 432, 441, 444, 452, 456, 470, 503, 545, 546, 571, 575, 585, 586, 591, 594, 596, 598, 600, 602, 605, 607, 609, 624, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 684, 692, 694, 696, 701, 704, 705, 706, 714, 716, 717, 719, 720, 726, 739, 741, 744, 753, 757, 759, 762, 763, 765, 771, 775, 787, 791, 793, 798, 802, 805, 806, 813, 814, 819, 836, 837, 838, 839, 840, 845, 850, 857, 858, 862, 885, 890, 891, 919, 935, 936, 937, 943, 993, 997, 999, 1002, 1010, 1020, 1043, 1077, 1129, 1130, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1224, 1225, 1246, 1254, 1255, 1263, 1265, 1268, 1271, 1275], "stringcach": [84, 85, 216, 310, 787, 943, 944], "stringio": [138, 139, 456, 775], "strings_hex": 632, "strip": [28, 657, 658, 659, 660, 661, 1195, 1196, 1197, 1267], "strip_chars_end": [659, 661], "strip_chars_start": [658, 660], "strip_prefix": [659, 661], "strip_suffix": [658, 660], "strongli": [36, 165, 220, 243, 296, 310, 533, 775, 1105, 1246], "strpo": 1265, "strpost": 1267, "strptime": [242, 310, 418, 591, 775, 836, 885, 996, 1265], "struct": [8, 112, 123, 231, 248, 271, 276, 284, 310, 359, 386, 465, 524, 532, 533, 556, 558, 560, 578, 589, 590, 637, 642, 654, 655, 689, 711, 712, 714, 736, 775, 838, 852, 857, 869, 885, 931, 961, 1098, 1105, 1123, 1133, 1175, 1180, 1192, 1193, 1227, 1246], "struct_col": [673, 675], "struct_seri": 869, "structarrai": [188, 310, 1018, 1246], "structfieldnotfounderror": 675, "structur": [36, 37, 38, 93, 96, 110, 126, 190, 234, 245, 262, 268, 310, 575, 775, 831, 885, 1025, 1221, 1246, 1272], "student": [235, 310], "style": [7, 20, 36, 131, 235, 310], "sub": [296, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 361, 503, 510, 775, 912, 913, 914, 917, 918, 919, 920, 921, 922, 923, 924, 928, 929, 933, 1077, 1084], "subarrai": [338, 339, 910, 911], "subclass": [1, 310], "subexpress": [53, 54, 796, 797, 806, 832, 843, 885], "subject": [41, 235, 310], "sublist": [346, 489, 490, 492, 494, 498, 499, 500, 501, 502, 503, 504, 513, 518, 522, 524, 918, 1048, 1063, 1064, 1066, 1068, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1087, 1092, 1096, 1098, 1246], "subplan": [53, 54, 796, 797, 806, 832, 843, 885], "subsequ": [36, 238, 269, 310, 524, 754, 765, 806, 885, 1228, 1246, 1260], "subset": [185, 231, 275, 310, 804, 851, 885], "substr": [363, 366, 368, 628, 633, 639, 648, 649, 652, 653, 654, 655, 656, 891, 934, 937, 939, 1166, 1171, 1177, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1265], "subtl": [36, 310], "subtli": [454, 775], "subtract": [482, 677, 775, 1058, 1246], "succe": [129, 130, 143], "success": [630, 636, 1168, 1174], "successfulli": [796, 885], "suffix": [216, 217, 248, 284, 289, 310, 321, 366, 370, 477, 478, 479, 480, 538, 555, 557, 560, 561, 562, 571, 588, 633, 658, 661, 684, 775, 818, 819, 838, 857, 859, 862, 885, 891, 937, 1171, 1199], "sugar": [279, 310, 585, 586, 693, 695, 697, 708, 710, 713, 723, 728, 729, 730, 738, 740, 742, 743, 745, 747, 748, 753, 756, 758, 760, 764, 766, 775, 854, 885, 1129, 1130, 1163, 1246], "suitabl": [47, 55, 131, 157, 220, 310, 533, 613, 775, 1105, 1149, 1246], "sum": [36, 188, 195, 201, 202, 212, 235, 242, 260, 289, 310, 383, 384, 388, 437, 450, 524, 533, 542, 544, 545, 546, 547, 585, 586, 591, 606, 607, 691, 693, 711, 713, 714, 725, 737, 749, 759, 775, 796, 797, 802, 806, 813, 814, 830, 832, 836, 840, 843, 862, 885, 889, 891, 958, 959, 1016, 1018, 1143, 1246, 1254, 1261, 1263, 1265, 1272], "sum_": [621, 775, 1160, 1246], "sum_a": [242, 310, 591, 775, 836, 885], "sum_horizont": [47, 310, 758], "summari": [181, 310, 801, 885, 962, 1246, 1261], "summer": [648, 649], "sun": [662, 1200], "sundai": [202, 310, 393, 421, 424, 434, 703, 814, 885, 967, 999, 1002, 1012], "sunni": [648, 649, 1186, 1187], "supercast": [195, 310], "supertyp": [55, 192, 268, 272, 310, 325, 705, 775, 809, 885, 889, 1246], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 193, 243, 267, 310, 450, 575, 775, 810, 885, 1225, 1246], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 214, 215, 216, 217, 244, 245, 255, 256, 264, 269, 272, 310, 441, 518, 571, 585, 586, 622, 624, 640, 648, 649, 650, 652, 663, 771, 775, 781, 796, 818, 819, 844, 845, 885, 891, 1020, 1092, 1129, 1130, 1161, 1178, 1186, 1187, 1188, 1190, 1201, 1228, 1230, 1246, 1263, 1267, 1268, 1270, 1271, 1272], "supportsinterchang": 117, "suppos": [235, 310, 533, 775, 1105, 1246], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 238, 310, 775, 889], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 885, "swap": [834, 885], "swim": 706, "switch": [394, 796, 885, 968], "sy": 168, "sydnei": 718, "symbol": [32, 33, 42, 310, 775, 885], "symmetr": [515, 891, 1089], "symmetri": [799, 805, 837, 856, 885], "synchron": 880, "syntact": [279, 310, 585, 586, 693, 695, 697, 708, 710, 713, 723, 728, 729, 730, 738, 740, 742, 743, 745, 747, 748, 753, 756, 758, 760, 764, 766, 775, 854, 885, 1129, 1130, 1163, 1246], "syntax": [36, 107, 193, 220, 231, 310, 628, 635, 636, 639, 648, 649, 731, 732, 771, 810, 843, 885, 1166, 1173, 1174, 1177, 1186, 1187, 1246, 1268, 1270], "system": [32, 129, 130, 310, 398, 796, 885, 972], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 202, 217, 220, 234, 275, 278, 310, 385, 394, 402, 418, 437, 440, 442, 443, 496, 533, 575, 635, 639, 648, 649, 659, 662, 665, 670, 765, 775, 814, 831, 851, 885, 891, 960, 996, 1016, 1019, 1021, 1022, 1070, 1105, 1173, 1177, 1186, 1187, 1196, 1197, 1200, 1203, 1208, 1246, 1257, 1258, 1267], "t_": [276, 310, 441, 775, 852, 885, 1020, 1246], "t_0": [242, 310, 591, 594, 596, 598, 600, 602, 605, 607, 609, 775, 836, 885], "t_1": [242, 310, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 775, 836, 885, 1020, 1246], "t_2": [441, 775, 1020, 1246], "t_a": [276, 310, 852, 885], "t_b": [276, 310, 852, 885], "t_c": [276, 310, 852, 885], "t_d": [276, 310, 852, 885], "t_i": [441, 775, 1020, 1246], "t_n": [242, 310, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 775, 836, 885, 1020, 1246], "t_struct": [276, 310, 852, 885], "tab_spann": [310, 314], "tab_stub": [310, 314], "tab_styl": [310, 314], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 140, 144, 145, 216, 235, 257, 262, 269, 278, 279, 310, 314, 754, 787, 818, 846, 854, 885, 1255, 1256, 1257, 1258, 1260, 1261, 1271, 1272], "table_nam": [34, 36, 257, 310, 846, 885], "table_path": [35, 133, 144, 145, 310], "table_styl": [36, 310], "tablemerg": [35, 310], "tablenotfounderror": [35, 310], "tables_scale_100": [125, 130], "tail": [200, 204, 310, 325, 621, 775, 885, 1038, 1160, 1246], "take": [36, 126, 134, 140, 159, 160, 168, 195, 196, 202, 224, 227, 234, 235, 239, 310, 335, 393, 415, 450, 457, 458, 499, 500, 532, 556, 558, 560, 624, 701, 703, 722, 724, 733, 775, 812, 814, 828, 834, 885, 907, 967, 993, 1032, 1033, 1073, 1074, 1237, 1246, 1263], "taken": [518, 652, 1092, 1190], "talkin": [670, 1208], "tan": [775, 1246, 1265], "tand": 1265, "tangent": [331, 332, 680, 681, 775, 903, 904, 1219, 1220, 1246, 1269], "tanh": [235, 310, 775, 1246], "target": [1, 34, 35, 36, 52, 134, 272, 310, 635, 662, 664, 665, 891, 1173, 1200, 1202, 1203, 1267], "target_alia": [35, 310], "target_t": [34, 310], "task": [54, 797, 885], "tb": [152, 154, 188, 310, 1018, 1246], "tbl": [125, 130, 1274], "tbl0": 1260, "tbl1": [1258, 1260], "tbl2": [1258, 1260], "tbl3": 1258, "tbl4": 1258, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 181, 310, 801, 885], "tbl_width_char": 721, "td1": 891, "td2": 891, "td3": 891, "tdf": [234, 310], "technic": 771, "tell": [629, 650, 1167, 1188], "tempor": [87, 174, 202, 214, 242, 244, 245, 264, 310, 375, 470, 591, 594, 596, 598, 600, 602, 605, 607, 609, 775, 787, 793, 814, 836, 885, 891, 950, 1043, 1246, 1265, 1271], "temporalliter": [375, 775, 950, 982, 983, 1246], "temporari": [34, 310], "temporarili": [165, 168, 202, 242, 310, 591, 775, 814, 836, 885], "tend": [152, 154], "tensor": [272, 310, 1230, 1246], "tensordataset": [272, 310], "term": [440, 442, 443, 640, 652, 663, 775, 1019, 1021, 1022, 1178, 1190, 1201, 1246], "termin": [33, 42, 310, 885], "test": [0, 34, 131, 132, 134, 140, 235, 310, 787, 815, 822, 885], "test1": 1260, "test2": 1260, "test3": 1260, "test_1": [235, 310], "test_1_math": [235, 310], "test_1_phys": [235, 310], "test_2": [235, 310], "test_2_math": [235, 310], "test_2_phys": [235, 310], "test_data": 131, "test_df_height": 159, "test_func": 736, "test_lf": [859, 885], "test_miscellan": 1275, "test_numer": 1275, "test_price_calcul": 1275, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1260, "text": [128, 131, 441, 640, 644, 645, 648, 649, 651, 652, 663, 755, 775, 1020, 1178, 1182, 1183, 1189, 1190, 1201, 1246, 1260, 1275], "texttt": [621, 775, 1160, 1246], "th": [196, 310, 458, 500, 513, 621, 640, 663, 775, 812, 885, 1033, 1074, 1087, 1160, 1178, 1201, 1246], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 175, 201, 214, 216, 217, 220, 233, 243, 244, 246, 278, 296, 310, 454, 456, 459, 461, 470, 484, 512, 531, 532, 533, 546, 578, 590, 612, 621, 640, 644, 646, 647, 655, 663, 672, 707, 737, 775, 796, 797, 813, 818, 819, 869, 885, 1043, 1086, 1105, 1123, 1134, 1147, 1160, 1178, 1182, 1184, 1185, 1193, 1201, 1210, 1227, 1246, 1275], "the_aws_access_key_id": [35, 133, 144, 145, 310], "the_aws_region": [35, 310], "the_aws_secret_access_kei": [35, 133, 144, 145, 310], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 217, 218, 245, 310, 650, 658, 659, 775, 796, 885, 889, 891], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 189, 190, 202, 217, 227, 235, 242, 272, 280, 310, 347, 441, 470, 503, 563, 564, 571, 591, 705, 716, 717, 719, 720, 762, 763, 775, 797, 807, 814, 819, 828, 836, 885, 891, 919, 1020, 1025, 1077, 1114, 1115, 1246, 1263, 1272], "therebi": [143, 146, 147], "therefor": [188, 310, 533, 765, 775, 1018, 1246], "theta": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "thi": [1, 4, 5, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 176, 177, 179, 181, 182, 185, 188, 190, 194, 195, 200, 201, 202, 203, 207, 209, 211, 212, 213, 214, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 255, 257, 258, 259, 262, 264, 267, 268, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 291, 296, 309, 310, 313, 314, 322, 325, 326, 335, 347, 353, 354, 355, 360, 369, 370, 372, 375, 385, 386, 388, 394, 395, 406, 412, 413, 415, 418, 419, 421, 424, 435, 439, 446, 456, 463, 465, 467, 468, 470, 474, 496, 497, 503, 512, 513, 514, 515, 516, 517, 519, 524, 525, 529, 530, 532, 533, 537, 538, 539, 540, 541, 542, 543, 545, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 571, 578, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 614, 615, 616, 617, 622, 623, 624, 627, 629, 635, 638, 641, 642, 646, 647, 650, 657, 658, 659, 660, 661, 666, 670, 672, 674, 676, 683, 684, 686, 687, 688, 689, 693, 697, 705, 708, 710, 711, 724, 725, 727, 729, 730, 733, 734, 737, 740, 742, 745, 747, 751, 752, 753, 756, 760, 764, 765, 766, 771, 775, 787, 790, 791, 792, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 813, 814, 816, 818, 819, 821, 823, 827, 828, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 864, 869, 883, 884, 885, 889, 891, 898, 907, 919, 925, 926, 927, 932, 940, 942, 944, 945, 950, 951, 960, 961, 968, 969, 971, 980, 990, 991, 993, 996, 997, 999, 1002, 1013, 1015, 1018, 1024, 1025, 1033, 1034, 1037, 1039, 1048, 1057, 1070, 1071, 1077, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1099, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1161, 1162, 1164, 1165, 1167, 1173, 1176, 1179, 1180, 1184, 1185, 1188, 1195, 1196, 1197, 1204, 1208, 1210, 1211, 1213, 1216, 1217, 1221, 1223, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1246, 1250, 1254, 1255, 1256, 1260, 1267, 1270, 1271, 1272, 1273, 1275], "thing": [143, 150], "think": [412, 413, 990, 991], "third": [532, 775], "thoma": [227, 310, 828, 885], "those": [5, 30, 36, 129, 245, 269, 279, 310, 454, 581, 635, 737, 775, 854, 885, 891, 1125, 1173, 1228, 1246], "though": [34, 131, 202, 310, 771, 814, 885], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 256, 310, 496, 533, 624, 701, 775, 797, 845, 885, 927, 1070, 1093, 1162, 1246], "thread_loc": [533, 775], "thread_pool_s": 166, "threadpool": 53, "three": [36, 242, 271, 310, 386, 578, 591, 613, 640, 663, 775, 836, 885, 931, 961, 1098, 1123, 1178, 1201, 1246], "threshold": [248, 310, 838, 885], "through": [117, 131, 771, 891, 1246, 1260], "throw": [35, 118, 119, 122, 174, 183, 310, 642, 643, 793, 803, 885, 1180, 1181, 1246], "thu": [36, 190, 310, 707, 1025, 1246], "thursdai": [202, 310, 393, 703, 814, 885, 967], "ti": [581, 775, 1125, 1246], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 181, 190, 202, 217, 242, 280, 310, 342, 369, 370, 394, 395, 397, 398, 399, 402, 403, 412, 413, 415, 418, 419, 421, 423, 424, 432, 435, 441, 491, 492, 524, 590, 591, 594, 596, 598, 600, 602, 605, 607, 609, 617, 662, 665, 669, 682, 683, 684, 705, 706, 716, 717, 718, 719, 720, 721, 727, 762, 763, 775, 796, 797, 801, 814, 819, 832, 836, 885, 891, 914, 940, 968, 969, 971, 972, 976, 977, 993, 996, 997, 999, 1001, 1002, 1010, 1013, 1020, 1025, 1065, 1066, 1134, 1156, 1200, 1203, 1207, 1229, 1231, 1246, 1254, 1260, 1268, 1275], "time_column": [280, 310], "time_format": [33, 42, 310, 885], "time_unit": [62, 64, 395, 397, 403, 423, 435, 665, 718, 719, 720, 721, 727, 891, 969, 971, 977, 1001, 1013, 1203], "time_unit_m": [395, 969], "time_unit_n": [395, 969], "time_unit_u": 435, "time_zon": [62, 398, 400, 418, 665, 718, 719, 720, 891, 968, 972, 976, 996, 1203], "timedelta": [202, 217, 242, 280, 310, 415, 419, 432, 441, 591, 594, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 716, 717, 719, 720, 762, 763, 775, 814, 819, 836, 885, 891, 981, 987, 993, 997, 1010, 1020, 1114, 1115, 1164, 1236, 1246], "timeout": [54, 797, 885], "timestamp": [123, 133, 144, 202, 310, 418, 419, 432, 727, 814, 885, 996, 997, 1010, 1265], "timestamp_m": 423, "timestamp_n": 1001, "timestamp_u": [423, 1001], "timestep": 727, "timeunit": [33, 42, 62, 64, 310, 395, 397, 423, 435, 665, 718, 719, 720, 721, 885, 891, 969, 971, 1001, 1013, 1203], "timezon": [62, 133, 144, 400, 891, 1268], "tip": [533, 775], "titl": [36, 310, 1254], "titlecas": [670, 1208], "tm": [397, 891, 1268], "to_arrow": [215, 310, 1227, 1246, 1272], "to_batch": [215, 310], "to_dict": [174, 310, 793, 885, 891], "to_dummi": [267, 272, 310, 1246], "to_fram": [372, 403, 419, 423, 432, 662, 961, 1123, 1148, 1150, 1192, 1193, 1200, 1246], "to_init_repr": [123, 310, 1246], "to_jax": [272, 310, 1246], "to_list": [123, 242, 310, 1166, 1177, 1246], "to_lowercas": 562, "to_numpi": [267, 272, 310, 532, 775, 1246], "to_panda": [310, 1246], "to_phys": [775, 944, 1246], "to_seri": [48, 197, 310, 662, 702, 750, 1200], "to_sql": [34, 310], "to_str": [421, 999], "to_struct": [310, 636], "to_torch": [267, 310, 1246], "to_uppercas": [321, 561, 637, 775], "togeth": 1267, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 891], "tokyo_tz": 891, "toler": [152, 153, 154, 155, 217, 310, 819, 885], "tone": [36, 310], "tonight": [629, 650, 1167, 1188], "too": [14, 235, 310, 885], "toomanyrowsreturnederror": [243, 310], "top": [36, 257, 273, 310, 684, 775, 846, 850, 885, 1272], "top_col": [36, 310], "top_k": [173, 310, 369, 370, 684, 775, 791, 885, 940, 1246], "top_k_bi": [369, 370, 683, 775], "top_row": [36, 310], "tor_id": 123, "torch": [151, 272, 310, 1230, 1246], "torchexporttyp": [272, 310], "tostructstrategi": [524, 1098], "total": [36, 188, 291, 310, 425, 426, 427, 428, 429, 430, 431, 485, 505, 775, 864, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1059, 1079, 1246], "total_gross": 1254, "toward": [291, 485, 505, 710, 775, 864, 1059, 1079, 1246], "tp": [1, 50], "tpch": [125, 130], "tpu": [267, 310, 1225, 1246], "traceback": [152, 153, 154, 155, 268, 310, 586, 775, 1130, 1227, 1246], "tracebacktyp": 1272, "track": [133, 144, 145, 220, 310, 524, 1272], "trail": [28, 200, 310, 657, 658, 1195, 1196], "train": [272, 310], "train_lf": [859, 885], "transfer": 132, "transferencod": [364, 365, 631, 632, 935, 936, 1169, 1170], "transform": [220, 257, 310, 532, 670, 754, 775, 846, 885, 1208], "transit": [193, 310, 810, 885], "translat": 131, "transpar": [796, 885], "transpos": [235, 310], "travel": [133, 144], "travers": [593, 595, 597, 599, 601, 604, 606, 608, 775, 1136, 1137, 1139, 1142, 1143, 1144, 1246], "treat": [129, 130, 143, 441, 628, 630, 639, 648, 649, 765, 775, 1020, 1166, 1168, 1177, 1186, 1187, 1246], "tree": [546, 806, 885], "tree_format": [806, 885], "trend": [36, 310], "tri": [220, 310], "triangl": [296, 869], "trigger": [35, 218, 269, 310, 775, 889, 1228, 1246], "trigonometri": [1265, 1271], "trim": [123, 1267], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 171, 174, 175, 176, 181, 183, 187, 192, 193, 195, 197, 199, 200, 201, 202, 207, 209, 210, 211, 214, 216, 217, 218, 223, 224, 230, 231, 233, 235, 236, 243, 244, 245, 246, 248, 256, 257, 260, 263, 265, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 284, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 310, 320, 321, 322, 323, 324, 325, 336, 338, 339, 342, 346, 347, 355, 359, 363, 364, 366, 368, 370, 371, 380, 381, 382, 383, 384, 386, 393, 395, 398, 401, 403, 405, 412, 413, 415, 416, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 438, 439, 440, 442, 443, 450, 457, 459, 460, 461, 462, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 492, 499, 501, 503, 519, 524, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 546, 547, 565, 566, 568, 570, 573, 574, 578, 583, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 616, 621, 623, 624, 627, 628, 629, 630, 631, 633, 638, 639, 641, 642, 643, 648, 649, 653, 654, 656, 662, 664, 665, 667, 669, 673, 675, 684, 686, 689, 692, 693, 694, 695, 696, 698, 701, 702, 703, 707, 716, 719, 725, 731, 737, 747, 750, 754, 757, 762, 765, 766, 775, 793, 794, 795, 796, 797, 801, 803, 806, 809, 810, 813, 814, 818, 819, 821, 823, 827, 832, 838, 843, 845, 846, 851, 852, 853, 854, 857, 863, 865, 867, 870, 871, 872, 873, 874, 875, 876, 884, 885, 889, 891, 896, 897, 908, 910, 911, 914, 918, 919, 927, 934, 935, 937, 939, 941, 943, 945, 948, 949, 961, 967, 968, 969, 972, 975, 976, 977, 978, 979, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1021, 1022, 1029, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1066, 1073, 1075, 1077, 1093, 1105, 1111, 1117, 1120, 1121, 1123, 1126, 1127, 1141, 1160, 1162, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1179, 1180, 1181, 1186, 1187, 1191, 1192, 1194, 1200, 1202, 1203, 1205, 1207, 1222, 1227, 1228, 1235, 1237, 1246, 1254, 1255, 1257, 1259, 1263, 1264, 1267, 1272, 1275], "truediv": [454, 775], "truncat": [123, 129, 130, 143, 200, 202, 214, 244, 245, 264, 310, 814, 832, 885, 1271], "truncate_nod": [832, 885], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 432, "truncate_td": 432, "trust": [388, 775, 802, 885], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 796, 797, 806, 832, 843, 885], "try_cast": 1265, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [418, 996], "tseri": [412, 413, 990, 991], "tstamp": 891, "tstamp_tokyo": 891, "tstamp_utc": 891, "tuesdai": [202, 310, 814, 885], "tupl": [36, 56, 132, 134, 140, 214, 220, 233, 243, 244, 245, 252, 272, 288, 310, 587, 775, 832, 843, 885, 890, 891, 1131, 1152, 1246], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 216, 217, 310, 796, 797, 806, 818, 819, 823, 832, 885], "twice": [36, 310], "two": [36, 46, 84, 85, 118, 120, 122, 132, 193, 195, 217, 226, 227, 244, 271, 277, 290, 296, 310, 314, 320, 390, 397, 454, 457, 460, 524, 578, 623, 699, 700, 705, 707, 709, 751, 752, 754, 775, 810, 827, 828, 853, 863, 869, 885, 891, 931, 964, 971, 1098, 1123, 1246, 1260, 1261, 1264, 1273], "two_a": 1272, "tworld": [659, 1195, 1197], "txt": [1, 12, 143, 628, 639, 1177], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 177, 186, 189, 195, 200, 202, 203, 215, 216, 220, 242, 247, 262, 267, 268, 271, 272, 275, 287, 310, 322, 324, 327, 328, 329, 330, 331, 332, 335, 340, 341, 342, 344, 347, 358, 359, 363, 364, 365, 366, 367, 368, 371, 372, 375, 376, 377, 378, 379, 386, 387, 393, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 444, 446, 457, 460, 463, 470, 471, 472, 473, 474, 475, 476, 485, 489, 490, 492, 497, 503, 505, 523, 524, 532, 533, 578, 580, 584, 585, 586, 587, 589, 590, 591, 619, 620, 627, 630, 631, 632, 634, 635, 636, 637, 640, 641, 643, 644, 645, 652, 653, 654, 655, 662, 663, 667, 680, 681, 682, 689, 698, 705, 708, 715, 716, 717, 718, 719, 720, 721, 723, 731, 732, 734, 735, 736, 737, 747, 750, 761, 762, 763, 766, 771, 775, 787, 796, 797, 805, 806, 807, 814, 818, 832, 836, 837, 843, 851, 861, 885, 890, 896, 897, 908, 910, 911, 912, 913, 914, 916, 918, 919, 930, 931, 932, 934, 935, 936, 938, 941, 942, 950, 961, 962, 967, 968, 970, 972, 973, 974, 975, 976, 978, 979, 980, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1024, 1037, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1061, 1062, 1063, 1064, 1066, 1071, 1077, 1079, 1097, 1098, 1117, 1123, 1129, 1130, 1131, 1133, 1134, 1155, 1165, 1166, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1178, 1179, 1181, 1182, 1183, 1190, 1191, 1192, 1193, 1200, 1201, 1205, 1226, 1227, 1229, 1237, 1246, 1254, 1261, 1265, 1267, 1271, 1272], "type_coercion": [42, 43, 44, 45, 53, 54, 796, 797, 806, 832, 843, 885], "typeerror": [35, 310], "typenam": [36, 310], "typic": [119, 131, 148, 220, 310, 402, 891, 976, 1105, 1246], "tz": [665, 1203], "tzinfo": [133, 144, 891], "u": [36, 62, 64, 148, 161, 217, 310, 395, 397, 403, 423, 435, 662, 665, 694, 696, 718, 719, 720, 721, 727, 891, 969, 971, 977, 1001, 1013, 1200, 1203, 1258, 1268], "u1": [268, 310], "u16": [143, 1270, 1275], "u32": [12, 131, 172, 174, 180, 232, 286, 287, 291, 295, 301, 303, 310, 320, 326, 333, 334, 335, 336, 337, 340, 341, 343, 352, 367, 379, 380, 465, 485, 489, 490, 493, 505, 510, 553, 569, 581, 589, 590, 594, 596, 598, 600, 602, 605, 607, 609, 613, 630, 639, 644, 645, 682, 687, 689, 693, 697, 701, 702, 708, 710, 731, 734, 745, 775, 790, 793, 800, 830, 860, 861, 864, 868, 874, 876, 885, 891, 907, 908, 909, 912, 913, 915, 924, 941, 944, 955, 1039, 1063, 1064, 1067, 1079, 1084, 1125, 1133, 1134, 1149, 1168, 1177, 1182, 1183, 1229, 1233, 1235, 1246, 1254, 1262, 1263, 1267, 1272], "u64": [203, 287, 310, 463, 583, 775, 832, 861, 885, 891, 1037, 1127, 1246], "u8": [174, 265, 266, 278, 310, 586, 692, 775, 793, 885, 891, 1130, 1222, 1246, 1275], "udf": [165, 220, 234, 296, 310, 388, 533, 575, 737, 775, 802, 831, 869, 885, 1105, 1246], "ufunc": 90, "uid": 131, "uint": 1275, "uint16": [143, 383, 384, 678, 775, 891, 958, 959, 1217, 1227, 1230, 1246], "uint2": 1270, "uint32": [124, 151, 174, 188, 242, 287, 310, 335, 340, 341, 367, 379, 441, 457, 460, 485, 489, 490, 505, 584, 589, 590, 591, 630, 644, 645, 682, 708, 731, 734, 775, 793, 836, 861, 885, 891, 908, 912, 913, 938, 941, 1018, 1020, 1063, 1064, 1079, 1133, 1134, 1168, 1182, 1183, 1229, 1230, 1246], "uint4": 1272, "uint64": [124, 203, 242, 287, 310, 340, 341, 441, 463, 489, 490, 583, 591, 775, 836, 861, 885, 891, 912, 913, 1020, 1037, 1063, 1064, 1127, 1230, 1246], "uint8": [131, 174, 266, 267, 268, 278, 310, 383, 384, 586, 678, 692, 775, 793, 885, 891, 958, 959, 1130, 1217, 1230, 1246, 1275], "uint8_pair": 1275, "uit": [652, 1190], "uk": [636, 1174], "unabl": [92, 134], "unari": [567, 775], "unbias": [442, 443, 775, 1021, 1022, 1246], "unchang": [188, 310, 585, 682, 775, 823, 869, 885, 1018, 1129, 1229, 1246], "uncompress": [31, 37, 38, 41, 45, 135, 146, 310, 885], "undefin": [685, 775], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 235, 257, 310, 767, 768, 770, 771, 776, 777, 780, 782, 783, 784, 846, 885, 1238, 1240, 1242, 1247, 1251, 1252, 1253], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 189, 190, 214, 215, 244, 262, 268, 310, 364, 395, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 414, 416, 417, 418, 420, 433, 434, 435, 436, 583, 610, 628, 631, 639, 775, 807, 885, 891, 935, 944, 969, 970, 971, 975, 978, 979, 980, 984, 985, 986, 988, 989, 992, 994, 995, 996, 998, 1011, 1012, 1013, 1014, 1025, 1127, 1145, 1155, 1166, 1169, 1177, 1221, 1227, 1246, 1272], "understood": 737, "undo": [547, 554, 555, 557, 559, 561, 562], "unexpect": [99, 108, 131, 532, 533, 775, 1105, 1246], "unhelpfulli": [152, 154], "unicod": [20, 640, 645, 652, 663, 891, 1178, 1183, 1190, 1201], "unifi": [36, 267, 272, 310, 891], "uniform": [36, 310, 578, 775, 1123, 1246], "unimod": [621, 775, 1160, 1246], "unintend": [193, 310, 810, 885], "union": [53, 54, 55, 516, 796, 797, 806, 832, 843, 885, 891, 1090, 1271, 1272], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 172, 211, 216, 231, 235, 245, 301, 310, 326, 337, 352, 386, 481, 510, 553, 578, 662, 664, 665, 669, 687, 689, 697, 745, 775, 790, 818, 874, 885, 889, 909, 924, 961, 1056, 1084, 1112, 1123, 1200, 1202, 1203, 1207, 1233, 1235, 1246, 1261, 1263], "unique_column_valu": [235, 310], "unique_count": [775, 1246], "uniquekeepstrategi": [275, 310, 851, 885], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 188, 310, 367, 395, 397, 403, 423, 435, 441, 447, 530, 543, 662, 665, 688, 718, 719, 720, 721, 727, 775, 832, 885, 889, 891, 938, 969, 971, 977, 1001, 1013, 1018, 1020, 1026, 1104, 1200, 1203, 1234, 1246, 1275], "unix": [61, 62, 403, 727, 977], "unknown": [635, 735, 1173], "unless": [36, 47, 118, 267, 272, 310, 657, 658, 750, 885, 1195, 1267], "unlik": [126, 202, 310, 814, 885], "unnam": [637, 1175], "unnest": [126, 310, 386, 578, 589, 636, 637, 654, 655, 675, 676, 689, 775, 885, 931, 961, 1098, 1123, 1133, 1192, 1193, 1246, 1265, 1271], "unpivot": [226, 310, 827, 885], "unregist": [1256, 1257, 1258, 1272, 1274], "unsaf": [775, 889], "unset": [34, 141, 146, 158, 295, 310, 418, 524, 868, 996, 1254], "unsign": [78, 79, 80, 81, 583, 775, 891, 1127, 1246], "unsigned_integ": 891, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 257, 267, 272, 278, 279, 310, 313, 314, 385, 386, 419, 465, 533, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 751, 752, 775, 796, 797, 806, 846, 854, 885, 945, 960, 961, 997, 1039, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1225, 1230, 1246, 1250], "unstack": 310, "unstackdirect": [278, 310], "unsuit": 115, "unsupport": [35, 310], "until": [84, 202, 218, 310, 646, 647, 672, 814, 885, 1184, 1185, 1210], "up": [10, 36, 76, 132, 214, 217, 235, 244, 245, 251, 264, 310, 374, 533, 640, 663, 775, 818, 819, 823, 841, 885, 891, 947, 1178, 1201, 1246], "upcast": [325, 775], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 310, 801, 885], "upgrad": 95, "upheld": [823, 885], "upon": 130, "upper": [129, 130, 131, 188, 202, 310, 375, 465, 470, 524, 556, 688, 698, 716, 717, 719, 720, 762, 763, 775, 814, 885, 950, 1018, 1039, 1043, 1104, 1234, 1246, 1263, 1265], "upper_bound": [202, 310, 375, 470, 524, 775, 814, 885, 950, 1043, 1104, 1246], "uppercas": [562, 671, 1209, 1267], "upsampl": [202, 310, 814, 885], "urandom": [367, 938], "uri": [34, 35, 131, 132, 133, 144, 145, 310], "url": [131, 132, 141, 146, 148, 635, 637, 1173, 1175], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 172, 173, 174, 177, 181, 183, 185, 191, 192, 193, 195, 201, 202, 209, 211, 213, 214, 215, 217, 220, 226, 230, 231, 233, 234, 235, 242, 243, 244, 245, 246, 248, 249, 251, 256, 257, 258, 262, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 284, 285, 286, 287, 289, 296, 310, 313, 320, 322, 324, 326, 335, 336, 359, 364, 365, 370, 385, 388, 391, 392, 400, 418, 419, 421, 424, 432, 435, 437, 440, 441, 442, 443, 444, 448, 449, 450, 454, 465, 468, 469, 470, 482, 496, 512, 520, 524, 526, 532, 533, 536, 554, 557, 559, 561, 562, 571, 578, 581, 583, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 614, 616, 621, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 644, 645, 648, 649, 650, 652, 654, 656, 658, 659, 660, 661, 662, 664, 665, 669, 672, 673, 676, 684, 690, 691, 693, 694, 695, 696, 697, 700, 701, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 727, 731, 732, 734, 735, 737, 738, 739, 741, 743, 744, 747, 750, 751, 752, 753, 754, 756, 757, 758, 759, 762, 763, 764, 765, 766, 771, 774, 775, 786, 787, 790, 791, 792, 793, 796, 797, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 813, 814, 815, 819, 821, 822, 827, 836, 837, 838, 839, 841, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 885, 890, 891, 896, 897, 927, 931, 935, 936, 945, 960, 962, 965, 966, 974, 982, 983, 996, 997, 999, 1002, 1010, 1013, 1016, 1019, 1020, 1021, 1022, 1027, 1028, 1032, 1036, 1039, 1041, 1042, 1043, 1058, 1070, 1086, 1093, 1098, 1105, 1123, 1125, 1127, 1129, 1131, 1133, 1134, 1135, 1147, 1148, 1150, 1151, 1154, 1160, 1162, 1164, 1165, 1166, 1167, 1169, 1170, 1172, 1173, 1174, 1176, 1177, 1182, 1183, 1186, 1187, 1188, 1190, 1192, 1200, 1202, 1203, 1207, 1210, 1221, 1222, 1224, 1227, 1228, 1236, 1246, 1250, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1267, 1268, 1272, 1275], "usag": [159, 163, 254, 310, 891, 1155, 1246], "usd": [200, 310, 1275], "use_pyarrow": [41, 45, 129, 135, 137, 141, 268, 310, 885, 1227, 1246], "use_pyarrow_extension_arrai": [269, 310, 1228, 1246], "use_pyarrow_write_to_dataset": [41, 310], "use_statist": [141, 148], "user": [34, 131, 132, 220, 234, 296, 310, 532, 533, 575, 614, 737, 775, 831, 869, 885, 889, 1105, 1151, 1246], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 272, 310, 394, 968], "utc": [133, 144, 394, 398, 400, 402, 418, 662, 665, 891, 968, 972, 976, 996, 1200, 1203], "utc_tz": 891, "utf": [33, 42, 75, 310, 885], "utf8": [20, 129, 130, 143, 640, 652, 663, 1178, 1190, 1201], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [272, 310, 727, 885, 889], "uvw": [636, 1174], "v": [8, 9, 41, 188, 310, 613, 694, 696, 775, 1149, 1246, 1257, 1258], "v2": [8, 135, 146], "val": [36, 241, 310, 533, 575, 682, 765, 775, 835, 885], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 183, 188, 216, 310, 385, 628, 630, 635, 636, 637, 639, 643, 648, 649, 765, 775, 803, 818, 885, 891, 960, 1018, 1166, 1168, 1173, 1174, 1175, 1177, 1181, 1186, 1187, 1246, 1254, 1255], "validate_output_schema": [823, 885], "vals_phys": [682, 775], "valu": [4, 5, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 171, 172, 173, 181, 185, 187, 190, 191, 192, 193, 197, 200, 202, 203, 204, 208, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 233, 235, 236, 237, 239, 242, 243, 244, 245, 246, 253, 256, 258, 259, 260, 261, 263, 264, 268, 269, 273, 274, 277, 278, 279, 280, 281, 288, 291, 292, 294, 297, 298, 300, 301, 310, 314, 318, 319, 320, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 386, 389, 391, 392, 397, 401, 411, 416, 433, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 519, 520, 521, 522, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 549, 550, 551, 552, 553, 563, 564, 565, 566, 569, 571, 572, 575, 576, 578, 579, 581, 584, 585, 586, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 654, 655, 656, 663, 672, 674, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 701, 704, 705, 706, 708, 710, 711, 712, 713, 714, 724, 725, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 743, 744, 745, 749, 750, 751, 752, 758, 759, 765, 775, 790, 791, 801, 804, 808, 809, 810, 814, 816, 817, 818, 819, 824, 825, 826, 827, 829, 830, 833, 834, 836, 842, 845, 847, 848, 850, 853, 854, 855, 864, 865, 867, 870, 871, 873, 874, 885, 891, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 915, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 932, 933, 935, 936, 937, 938, 939, 941, 947, 950, 952, 953, 954, 955, 960, 961, 962, 963, 965, 966, 971, 975, 989, 994, 1011, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1069, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1091, 1093, 1094, 1095, 1096, 1099, 1100, 1105, 1106, 1107, 1109, 1110, 1112, 1114, 1115, 1116, 1118, 1119, 1122, 1123, 1124, 1125, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1153, 1157, 1158, 1159, 1160, 1162, 1165, 1166, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1192, 1193, 1194, 1201, 1210, 1213, 1217, 1218, 1219, 1220, 1227, 1228, 1229, 1233, 1235, 1237, 1246, 1250, 1254, 1259, 1261, 1263, 1264, 1266, 1267, 1268, 1270, 1272, 1274, 1275], "value1": [624, 775], "value2": [624, 775], "value_a": 1272, "value_b": 1272, "value_count": [687, 775, 1246], "value_cum_sum": [384, 775], "value_cum_sum_all_fil": [384, 775], "value_nam": [226, 277, 310, 827, 853, 885], "value_var": [226, 277, 310, 827, 853, 885], "valueerror": [15, 20], "valueexcept": 735, "var": [36, 164, 310, 608, 609, 775, 885, 1246, 1262], "var_samp": 1262, "vari": [394, 968, 1275], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 226, 265, 277, 310, 827, 853, 885, 1222, 1246, 1255, 1257, 1272], "variable_nam": [226, 277, 310, 827, 853, 885], "variad": 131, "varianc": [281, 310, 443, 482, 608, 609, 690, 764, 775, 855, 885, 1022, 1058, 1144, 1236, 1246, 1265], "variou": [131, 177, 310, 775, 798, 885, 890, 891, 1246], "vector": [593, 595, 597, 599, 601, 604, 606, 608, 775, 1136, 1137, 1139, 1142, 1143, 1144, 1246], "vectoris": [412, 413, 990, 991], "vein": 168, "verbos": [29, 152, 154, 168, 636, 1174], "veri": [131, 214, 274, 310, 533, 775, 869, 1266], "versicolor": [310, 313], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 171, 172, 182, 203, 226, 250, 257, 267, 268, 272, 286, 291, 310, 388, 400, 412, 413, 435, 456, 463, 539, 545, 548, 585, 627, 629, 634, 676, 691, 700, 749, 754, 775, 790, 802, 806, 827, 840, 846, 859, 860, 864, 885, 891, 974, 982, 983, 990, 991, 1013, 1036, 1037, 1129, 1165, 1167, 1172, 1225, 1227, 1230, 1246], "versu": [181, 310, 801, 885], "vertic": [55, 190, 278, 282, 310, 627, 641, 1165, 1179], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 170, 182, 214, 244, 310, 388, 533, 637, 775, 802, 885, 893, 1175], "view": [533, 775], "visibl": [17, 188, 310, 1018, 1246], "visit": [385, 775, 960, 1246], "visual": [209, 211, 310, 843, 885], "volk": 126, "vote": [635, 637, 1173, 1175], "vowel": [648, 649, 1186, 1187], "vstack": [55, 190, 310], "w": [36, 131, 202, 245, 310, 630, 635, 637, 694, 696, 814, 885, 891, 1168, 1173, 1175, 1196, 1257, 1258, 1261], "w_i": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "wa": [34, 52, 91, 134, 152, 182, 267, 268, 310, 388, 586, 650, 721, 775, 802, 885, 891, 1130, 1188, 1227, 1246], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 201, 215, 234, 256, 289, 310, 571, 575, 624, 635, 708, 771, 775, 799, 805, 813, 831, 837, 845, 856, 862, 869, 885, 1173], "walk": 706, "want": [54, 119, 121, 134, 190, 220, 231, 242, 257, 310, 393, 450, 532, 533, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 629, 644, 650, 703, 711, 725, 747, 750, 766, 775, 797, 815, 822, 846, 885, 891, 967, 1025, 1105, 1167, 1182, 1188, 1246, 1260], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 571, 775, 1246], "watermark": [41, 310], "wb": [36, 310], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 182, 202, 217, 235, 242, 280, 310, 388, 415, 419, 432, 465, 496, 524, 532, 533, 591, 594, 596, 598, 600, 602, 605, 607, 609, 637, 667, 715, 716, 717, 718, 719, 720, 735, 762, 763, 765, 775, 801, 802, 814, 819, 823, 836, 885, 993, 997, 1010, 1039, 1070, 1105, 1175, 1205, 1246, 1257], "weather": [648, 649, 1186, 1187], "wednesdai": [202, 310, 421, 424, 814, 885, 999, 1002], "week": [202, 217, 242, 280, 310, 393, 415, 419, 432, 434, 441, 591, 594, 596, 598, 600, 602, 605, 607, 609, 703, 716, 717, 719, 720, 721, 762, 763, 775, 814, 819, 836, 885, 891, 967, 993, 997, 1010, 1012, 1020, 1246, 1268], "week_mask": [393, 703, 967], "weekdai": [401, 416], "weekend": [393, 703, 967], "weekli": [202, 310, 432, 814, 885, 1010], "weghorst": [637, 1175], "weight": [126, 440, 441, 442, 443, 592, 593, 595, 597, 599, 601, 604, 606, 608, 621, 775, 1019, 1020, 1021, 1022, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1160, 1246], "wei\u00df": 1267, "well": [36, 129, 130, 131, 143, 310, 470, 754, 775, 1043, 1246, 1272], "were": [168, 585, 586, 771, 775, 1129, 1130, 1246], "what": [231, 310, 313, 393, 532, 629, 650, 775, 967, 1167, 1188, 1246, 1250], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 173, 181, 186, 188, 190, 192, 195, 202, 216, 220, 234, 243, 245, 248, 249, 253, 256, 262, 265, 267, 268, 272, 273, 275, 279, 285, 310, 354, 375, 393, 440, 442, 443, 449, 517, 524, 543, 575, 585, 586, 615, 623, 624, 629, 634, 638, 640, 644, 645, 650, 652, 657, 658, 659, 662, 663, 701, 703, 711, 725, 775, 791, 801, 809, 814, 818, 823, 838, 839, 842, 845, 850, 851, 854, 858, 885, 926, 950, 962, 967, 1018, 1019, 1021, 1022, 1025, 1028, 1091, 1129, 1130, 1148, 1150, 1153, 1167, 1172, 1176, 1178, 1182, 1183, 1188, 1190, 1195, 1196, 1197, 1200, 1201, 1221, 1222, 1227, 1246, 1260, 1272], "when_matched_update_al": [35, 310], "when_not_matched_insert_al": [35, 310], "where": [36, 47, 91, 131, 132, 134, 185, 190, 193, 202, 214, 226, 235, 244, 257, 258, 267, 272, 277, 279, 281, 310, 336, 434, 437, 439, 441, 450, 520, 526, 532, 566, 584, 613, 621, 624, 626, 650, 670, 690, 702, 707, 709, 751, 752, 754, 756, 764, 765, 775, 804, 810, 814, 827, 846, 847, 853, 854, 855, 885, 908, 1012, 1016, 1020, 1025, 1029, 1149, 1160, 1164, 1188, 1208, 1236, 1237, 1246, 1254, 1271, 1272, 1274], "wherea": [129, 143, 242, 310, 419, 432, 563, 564, 591, 775, 815, 822, 836, 885, 997, 1010, 1114, 1115, 1246], "wherev": [36, 220, 296, 310, 533, 775, 1105, 1246], "whether": [33, 42, 120, 122, 126, 141, 146, 148, 163, 167, 187, 213, 217, 251, 256, 310, 322, 324, 338, 339, 405, 420, 462, 487, 488, 614, 624, 638, 701, 775, 823, 841, 845, 885, 891, 896, 897, 910, 911, 943, 945, 979, 998, 1017, 1035, 1036, 1061, 1062, 1176, 1246, 1257, 1272], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 173, 174, 181, 182, 185, 190, 191, 201, 202, 207, 217, 235, 242, 250, 267, 268, 273, 275, 280, 310, 322, 359, 388, 393, 415, 419, 421, 432, 441, 447, 470, 472, 475, 477, 478, 479, 480, 524, 532, 533, 543, 545, 591, 594, 596, 598, 600, 602, 605, 607, 609, 667, 703, 716, 717, 719, 720, 721, 762, 763, 765, 775, 791, 793, 796, 799, 801, 802, 804, 805, 806, 814, 819, 836, 840, 850, 851, 856, 885, 891, 931, 967, 993, 997, 999, 1010, 1020, 1025, 1026, 1043, 1046, 1049, 1051, 1052, 1053, 1054, 1098, 1150, 1205, 1225, 1227, 1246, 1255, 1261, 1272, 1275], "while": [35, 54, 130, 133, 134, 144, 148, 159, 163, 168, 214, 226, 274, 277, 279, 310, 585, 645, 775, 797, 827, 853, 854, 885, 1129, 1183, 1246], "white": [36, 310], "whitespac": [123, 657, 658, 659, 1195, 1196, 1197, 1267], "whole": [532, 623, 624, 635, 775, 869, 885, 1173], "whose": [47, 217, 235, 310, 444, 723, 775, 819, 885, 891], "why": [796, 885], "wide": [131, 200, 226, 235, 277, 278, 310, 827, 853, 885], "width": [26, 36, 56, 129, 130, 143, 310, 313, 523, 885, 1097], "wiki": 20, "wikipedia": 20, "wildcard": [444, 673, 711, 712, 725, 749, 771, 775, 889], "win_loss": [36, 310], "window": [129, 130, 143, 202, 242, 310, 385, 440, 442, 443, 533, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 705, 751, 752, 775, 814, 836, 885, 960, 1019, 1021, 1022, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1246], "window_s": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 751, 752, 775, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1246], "windowmappingstrategi": [571, 775], "winter": [638, 648, 649, 1176], "wise": [36, 47, 131, 195, 310, 327, 328, 329, 330, 331, 332, 376, 377, 378, 445, 528, 618, 619, 620, 680, 681, 725, 749, 775, 899, 900, 901, 902, 903, 904, 952, 953, 954, 1023, 1102, 1103, 1157, 1158, 1159, 1219, 1220, 1246], "wish": [173, 273, 310, 369, 370, 683, 684, 775, 791, 850, 885, 940, 1231, 1246], "with_column": [1, 12, 50, 53, 54, 202, 234, 242, 272, 278, 285, 310, 319, 321, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 359, 364, 365, 367, 371, 375, 380, 381, 382, 383, 384, 386, 389, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 436, 438, 439, 441, 448, 449, 454, 459, 461, 463, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 550, 552, 554, 555, 557, 559, 561, 562, 565, 566, 567, 571, 572, 575, 576, 578, 581, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 615, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 682, 685, 692, 694, 696, 699, 703, 704, 705, 706, 711, 712, 714, 715, 717, 718, 722, 732, 736, 739, 741, 744, 755, 759, 761, 763, 765, 771, 775, 796, 797, 806, 814, 816, 831, 832, 836, 843, 858, 885, 891, 961, 996, 1123, 1246, 1272], "with_column_nam": 143, "with_columns_seq": [310, 885], "with_context": 885, "with_field": [533, 775], "with_replac": [246, 310, 512, 612, 775, 1086, 1147, 1246], "with_row_count": [310, 885], "with_row_index": [1, 242, 286, 310, 594, 596, 598, 600, 602, 605, 607, 609, 775, 860, 885, 1148, 1246], "within": [41, 56, 72, 152, 153, 154, 155, 201, 202, 203, 217, 242, 280, 310, 463, 581, 624, 775, 814, 819, 836, 885, 1037, 1246, 1272], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 257, 267, 268, 272, 278, 279, 310, 313, 314, 385, 386, 419, 465, 533, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 629, 638, 650, 708, 751, 752, 753, 775, 796, 797, 806, 846, 854, 885, 943, 945, 960, 961, 997, 1039, 1123, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1167, 1176, 1188, 1225, 1227, 1230, 1246, 1250, 1274], "without_fil": [133, 144, 145], "wod": [659, 1197], "womp": [276, 310, 852, 885], "word": [132, 648, 649, 658, 659, 670, 1208], "work": [36, 63, 65, 130, 149, 249, 285, 310, 322, 324, 360, 374, 375, 444, 453, 496, 525, 532, 533, 554, 555, 557, 559, 561, 562, 571, 640, 644, 645, 652, 663, 686, 775, 839, 858, 885, 891, 896, 897, 932, 947, 950, 1031, 1070, 1099, 1178, 1182, 1183, 1190, 1201, 1232, 1246], "workaround": 310, "workbook": [36, 134, 140, 310], "working_with_conditional_format": [36, 310], "working_with_sparklin": [36, 310], "worksheet": [36, 134, 140, 310], "world": [1, 20, 629, 650, 657, 658, 659, 891, 1077, 1167, 1188, 1195, 1196, 1197, 1256, 1259], "wors": [845, 885], "worth": [496, 1070], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 268, 272, 310, 335, 346, 393, 501, 532, 533, 542, 571, 581, 701, 703, 775, 907, 918, 967, 1075, 1125, 1227, 1246, 1270], "wrap": [74, 123, 371, 470, 532, 775, 941, 1246], "wrap_numer": [371, 775, 941, 1246], "wrapper": [54, 797, 885], "writabl": [31, 33, 37, 38, 39, 40, 41, 250, 268, 310, 1227, 1246], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 177, 310, 375, 548, 775, 821, 843, 885, 891, 950, 1246], "write_ascii_frame_to_stdout": 168, "write_avro": 310, "write_clipboard": [128, 310], "write_csv": [32, 130, 143, 310], "write_databas": 310, "write_delta": 310, "write_excel": 310, "write_ipc": [135, 310], "write_ipc_stream": 310, "write_json": 310, "write_ndjson": [39, 310], "write_parquet": 310, "write_t": [41, 310], "write_to_dataset": [41, 310], "writeabl": [268, 310, 1227, 1246], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 250, 310, 545, 840, 885], "ww": [1267, 1274], "www": 675, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 134, 140, 143, 156, 157, 159, 171, 188, 206, 209, 211, 216, 235, 244, 245, 274, 277, 278, 310, 313, 319, 321, 323, 342, 347, 367, 380, 387, 438, 439, 454, 459, 461, 463, 484, 491, 503, 529, 531, 532, 533, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 570, 576, 584, 585, 586, 590, 618, 621, 654, 676, 677, 682, 685, 692, 694, 696, 699, 700, 705, 711, 712, 714, 725, 735, 736, 739, 741, 744, 749, 754, 759, 765, 775, 818, 823, 844, 846, 853, 885, 891, 919, 944, 955, 1028, 1105, 1129, 1130, 1157, 1160, 1192, 1225, 1229, 1230, 1246, 1257, 1258, 1261, 1266, 1272, 1274], "x00": [363, 364, 365, 366, 368, 631, 934, 935, 936, 937, 939, 1169], "x00fvalu": [250, 310], "x07": 367, "x1": 367, "x17": 367, "x80": 367, "x81": [545, 840, 885], "x82": [250, 310], "x83": [250, 310, 367], "x88": 367, "x8e": 367, "x99": 367, "x9c": 367, "x_0": [278, 310, 440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "x_1": [278, 310, 441, 775, 1020, 1246], "x_2": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "x_i": [441, 775, 1020, 1246], "x_invers": [576, 775], "x_n": [441, 775, 1020, 1246], "x_pow_8": 1266, "x_round": 1266, "x_round_1": 1266, "x_squar": [576, 775], "x_t": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "x_uniqu": [553, 775], "x_y": [347, 503], "xa1cagg": 545, "xa1csum": 545, "xa1fcolumncfoolpartition_bi": 545, "xa1fwindow": 545, "xa1gcolumn": [250, 310, 840, 885], "xa1kmapfunct": [840, 885], "xa1mdataframescan": [840, 885], "xa2einput": [840, 885], "xa4bdf": [840, 885], "xa4d": [840, 885], "xa4dnamecfoohdatatypeeint64lbit_set": [250, 310], "xa4hfunct": 545, "xb": 367, "xb1": 367, "xb9neq": 367, "xbd": 367, "xc14": 367, "xd3": 367, "xdb": 367, "xdist": 1275, "xe9": 367, "xee": 367, "xf4": 367, "xf4v": 367, "xf9": 367, "xfb": 367, "xff": [363, 364, 365, 366, 368, 631, 934, 935, 936, 937, 939, 1169], "xi": [636, 1174], "xl": 134, "xlog2": [552, 576, 775], "xlsb": 134, "xlsx": [36, 134, 310], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 310], "xor": 775, "xor_xi": [692, 775], "xx": [10, 48, 50, 163, 181, 257, 310, 801, 885, 891, 1261, 1267, 1274], "xxx": 675, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 319, 630, 636, 775, 1168, 1174, 1223, 1246], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 171, 188, 209, 211, 216, 235, 244, 245, 274, 277, 278, 310, 313, 319, 321, 323, 342, 347, 367, 421, 424, 438, 439, 459, 461, 484, 491, 503, 531, 533, 553, 555, 557, 559, 561, 562, 565, 566, 570, 584, 585, 586, 590, 662, 664, 665, 676, 685, 692, 694, 696, 699, 700, 714, 721, 735, 739, 741, 744, 754, 759, 775, 818, 844, 846, 853, 885, 891, 919, 944, 999, 1002, 1129, 1130, 1200, 1202, 1203, 1246, 1261, 1267, 1268, 1274], "y_": [440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "y_0": [278, 310, 440, 441, 442, 443, 775, 1019, 1020, 1021, 1022, 1246], "y_1": [278, 310], "y_i": [441, 775, 1020, 1246], "y_mul": 676, "y_t": [440, 442, 443, 775, 1019, 1021, 1022, 1246], "y_uniqu": [553, 775], "ya": [652, 1190], "ya29": 145, "year": [133, 144, 202, 217, 242, 257, 280, 310, 393, 405, 406, 415, 416, 419, 432, 433, 591, 594, 596, 598, 600, 602, 605, 607, 609, 703, 715, 716, 717, 718, 719, 720, 762, 763, 775, 814, 819, 836, 885, 891, 967, 979, 980, 993, 994, 997, 1010, 1011, 1268], "yellow": [310, 314, 363, 364, 365, 366, 368], "yield": [120, 122, 129, 130, 131, 143, 188, 190, 213, 274, 310, 454, 532, 571, 775, 885, 1018, 1025, 1246], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 173, 190, 193, 202, 213, 214, 220, 231, 235, 242, 243, 244, 245, 257, 264, 267, 273, 274, 275, 277, 296, 310, 313, 369, 370, 393, 412, 413, 415, 418, 421, 424, 444, 450, 470, 496, 524, 532, 533, 576, 583, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 629, 644, 648, 649, 650, 670, 673, 683, 684, 703, 711, 721, 725, 737, 747, 750, 754, 766, 775, 791, 797, 804, 810, 814, 815, 822, 836, 843, 846, 850, 851, 853, 869, 885, 889, 891, 940, 967, 990, 991, 996, 999, 1002, 1025, 1043, 1070, 1105, 1127, 1167, 1182, 1186, 1187, 1188, 1208, 1225, 1231, 1246, 1250, 1255, 1260, 1275], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 214, 220, 244, 245, 248, 264, 284, 289, 296, 310, 398, 441, 456, 533, 637, 662, 664, 665, 672, 737, 775, 815, 822, 823, 838, 857, 862, 869, 885, 972, 1020, 1105, 1175, 1200, 1202, 1203, 1210, 1246, 1275], "yy": [10, 48, 50, 163, 181, 257, 310, 801, 885, 891, 1261, 1267, 1274], "yyi": 675, "yyyi": [36, 310], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 188, 209, 211, 216, 244, 245, 274, 277, 278, 310, 319, 321, 323, 463, 491, 533, 555, 557, 559, 561, 562, 570, 584, 585, 586, 629, 636, 638, 650, 662, 665, 694, 696, 714, 739, 741, 744, 750, 754, 759, 775, 818, 844, 846, 853, 885, 891, 1028, 1129, 1130, 1167, 1174, 1176, 1188, 1200, 1203, 1246, 1257, 1261, 1272, 1274], "z_0": [278, 310], "z_1": [278, 310], "zap": 891, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 171, 192, 202, 214, 243, 257, 262, 268, 269, 310, 449, 524, 529, 613, 621, 672, 685, 775, 794, 809, 814, 885, 949, 1028, 1098, 1160, 1210, 1221, 1227, 1228, 1246, 1266, 1272], "zero_copy_onli": [1227, 1246], "zfill": [647, 692, 775, 1185], "zip": 1275, "zip_with": [195, 310, 1246], "zone": [62, 159, 160, 163, 394, 398, 418, 441, 665, 718, 719, 720, 775, 891, 968, 972, 996, 1020, 1203, 1246], "zoneinfo": [62, 891], "zoom": [36, 310], "zstd": [37, 38, 41, 43, 45, 310, 885], "zz": [163, 181, 257, 310, 801, 885, 1261, 1267, 1274], "zzz": 675, "\u03bc": [123, 174, 202, 214, 242, 244, 245, 264, 280, 310, 394, 395, 397, 398, 399, 400, 402, 404, 407, 409, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 591, 594, 596, 598, 600, 602, 605, 607, 609, 662, 665, 718, 719, 720, 721, 727, 775, 793, 814, 819, 836, 885, 891, 968, 969, 971, 972, 973, 974, 976, 977, 978, 983, 984, 988, 990, 991, 992, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1200, 1203, 1267], "\u0441\u0438\u043d\u0438\u0439": 1267, "\u0967\u096f\u096f\u096f": 891, "\u0968\u0966\u096d\u096d": 891, "\u4eac\u90fd": 891, "\u5927\u962a": 891, "\u6771\u4eac": [644, 645, 891, 1182, 1183], "\u90fd\u5e02": 891, "\ud835\udf0b": 1266}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__arrow_c_stream__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1261, 1273], "IF": 1264, "__arrow_c_stream__": [170, 893], "__dataframe__": 171, "__iter__": 288, "ab": [318, 894, 1266], "aco": 1269, "acosd": 1269, "add": 319, "add_business_dai": [393, 967], "agg": [289, 862], "agg_group": 320, "aggreg": [169, 317, 789, 892, 1262], "alia": [321, 895], "alias": [1262, 1266, 1267], "align_fram": 47, "all": [290, 322, 338, 487, 693, 863, 896, 910, 1061, 1273], "all_horizont": 694, "and_": 323, "ani": [324, 339, 488, 695, 897, 911, 1062], "any_horizont": 696, "api": [1, 48, 49, 50, 51, 787, 1272], "append": [325, 898], "approx_n_uniqu": [172, 326, 697, 790], "arang": 698, "arcco": [327, 899], "arccosh": [328, 900], "arcsin": [329, 901], "arcsinh": [330, 902], "arctan": [331, 903], "arctan2": 699, "arctan2d": 700, "arctanh": [332, 904], "arg_max": [333, 340, 489, 905, 912, 1063], "arg_min": [334, 341, 490, 906, 913, 1064], "arg_sort": [335, 907], "arg_sort_bi": 701, "arg_tru": [336, 908], "arg_uniqu": [337, 909], "arg_wher": 702, "arr": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "arrai": [56, 767, 1238, 1263], "array_agg": 1263, "array_contain": 1263, "array_get": 1263, "array_length": 1263, "array_low": 1263, "array_mean": 1263, "array_revers": 1263, "array_sum": 1263, "array_to_str": 1263, "array_uniqu": 1263, "array_upp": 1263, "asin": 1269, "asind": 1269, "assert": 1275, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1269, "atan2": 1269, "atan2d": 1269, "atand": 1269, "attribut": [305, 881, 1239], "avail": 1, "avg": 1262, "avro": 788, "backward_fil": 362, "base_utc_offset": [394, 968], "batched_read": 125, "batchedcsvread": 125, "bin": [363, 364, 365, 366, 367, 368, 934, 935, 936, 937, 938, 939], "binari": [57, 768, 781, 1240], "bit_length": 1267, "boolean": [58, 769, 1241], "bottom_k": [173, 369, 791, 940], "bottom_k_bi": 370, "build_info": 52, "business_day_count": 703, "cach": 792, "cancel": 878, "cast": [174, 371, 793, 941, 1270], "cast_time_unit": [395, 969], "cat": [372, 942, 943, 944, 945], "categor": 59, "categori": [770, 1242], "categoricalremappingwarn": 86, "cbrt": [373, 946, 1266], "ceil": [374, 947, 1266], "centuri": [396, 970], "chronoformatwarn": 87, "chunk_length": 948, "claus": 1261, "clear": [175, 794, 949], "clip": [375, 950], "clipboard": 788, "clone": [176, 795, 951], "co": [376, 952, 1269], "coalesc": [704, 1264], "col": 771, "collect": 796, "collect_al": 53, "collect_all_async": 54, "collect_async": 797, "collect_schema": [177, 798], "column": [156, 157, 178, 772, 799], "columnnotfounderror": 88, "combin": [397, 971], "comparison": 781, "comput": [306, 773, 1243], "computeerror": 89, "concat": [55, 491, 627, 1065, 1165, 1267], "concat_list": 705, "concat_str": 706, "concat_w": 1267, "condit": 1264, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 781, "contain": [342, 363, 492, 628, 914, 934, 1066, 1166], "contains_ani": [629, 1167], "context": 168, "convers": 786, "convert_time_zon": [398, 972], "corr": [179, 707], "cosd": 1269, "cosh": [377, 953], "cot": [378, 954, 1269], "cotd": 1269, "count": [180, 291, 379, 708, 800, 864, 1262], "count_match": [343, 493, 630, 915, 1067, 1168], "cov": 709, "creat": 1274, "create_list_strategi": 158, "csv": [125, 788], "cum_count": [380, 710, 955], "cum_fold": 711, "cum_max": [381, 956], "cum_min": [382, 957], "cum_prod": [383, 958], "cum_reduc": 712, "cum_sum": [384, 713, 959], "cum_sum_horizont": 714, "cumulative_ev": [385, 960], "customufuncwarn": 90, "cut": [386, 961], "dai": [401, 975], "data": 315, "databas": 788, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310], "dataorientationwarn": 91, "dataset": 788, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 315], "date": [61, 399, 715, 973, 1267], "date_part": 1268, "date_rang": [716, 717], "datetim": [62, 400, 718, 974], "datetime_rang": [719, 720], "decim": 63, "decod": [364, 631, 935, 1169], "decor": 168, "degre": [387, 1269], "delta": 788, "describ": [181, 801, 962], "descript": [307, 882, 1244], "deseri": [182, 388, 802], "diff": [389, 494, 963, 1068], "disable_string_cach": 84, "distinct": 1261, "div": 1266, "document": 1272, "dot": [390, 964], "drop": [183, 803, 1274], "drop_in_plac": 184, "drop_nan": [391, 965], "drop_nul": [185, 392, 495, 804, 966, 1069], "dst_offset": [402, 976], "dt": [393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "dtype": [160, 186, 805, 1015], "duplicateerror": 92, "durat": [64, 721], "element": 722, "enable_string_cach": 85, "encod": [365, 632, 936, 1170], "ends_with": [366, 633, 937, 1171, 1267], "entropi": [437, 1016], "enum": 65, "epoch": [403, 977], "eq": [438, 537], "eq_miss": 439, "equal": [187, 1017], "error": 316, "estimated_s": [188, 1018], "eval": [496, 1070], "ewm_mean": [440, 1019], "ewm_mean_bi": [441, 1020], "ewm_std": [442, 1021], "ewm_var": [443, 1022], "exampl": [1, 891, 1275], "excel": 788, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 316, 1273], "exclud": [444, 723], "execut": 1254, "execute_glob": 1255, "exp": [445, 1023, 1266], "explain": [806, 1274], "explod": [189, 344, 446, 497, 634, 807, 916, 1024, 1071, 1172], "export": [308, 1245], "expr": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "express": [775, 1272], "extend": [1, 190, 1025], "extend_const": [447, 1026], "extract": [635, 1173, 1268], "extract_al": [636, 1174], "extract_group": [637, 1175], "extract_mani": [638, 1176], "feather": 788, "fetch": 879, "fetch_block": 880, "field": [673, 1211, 1212], "fill_nan": [191, 448, 808, 1027], "fill_nul": [192, 449, 809, 1028], "filter": [193, 450, 810, 1029], "find": [639, 1177], "first": [292, 345, 451, 498, 724, 811, 865, 917, 1072, 1262], "flag": [194, 1030], "flatten": 452, "float32": 66, "float64": 67, "floor": [453, 1031, 1266], "floordiv": 454, "fold": [195, 725], "format": 726, "forward_fil": 455, "frame": 1272, "from": 1261, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 727, "from_json": 456, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 774, 786, 891, 1265], "gather": [457, 499, 1032, 1073], "gather_everi": [196, 458, 500, 812, 1033, 1074], "ge": 459, "get": [346, 460, 501, 918, 1075], "get_categori": [372, 942], "get_chunk": 1034, "get_column": [197, 199], "get_column_index": 198, "get_index_typ": 124, "glimps": 200, "global": 1272, "greatest": 1264, "group": [728, 1261], "group_bi": [201, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 813, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "group_by_dynam": [202, 814], "groupbi": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 883], "gt": 461, "has_multiple_output": 538, "has_nul": [462, 1035], "has_valid": 1036, "hash": [463, 1037], "hash_row": 203, "have": 1261, "head": [204, 293, 464, 502, 640, 729, 815, 866, 1038, 1076, 1178], "height": 205, "helper": 1275, "hist": [465, 1039], "hour": [404, 978], "hstack": 206, "iceberg": 788, "ifnul": 1264, "implod": [466, 730, 1040], "import": 891, "in_process": [878, 879, 880], "index": 0, "initcap": 1267, "inprocessqueri": [878, 879, 880, 884], "input": 788, "insert_column": 207, "inspect": [467, 816], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [731, 732], "interfac": 1271, "interpol": [208, 468, 817, 1041], "interpolate_bi": [469, 1042], "intersect": 1273, "introduct": 1272, "invalidoperationerror": 93, "io": 125, "ipc": 788, "is_between": [470, 1043], "is_column_select": 539, "is_dupl": [209, 471, 1044], "is_empti": [210, 1045], "is_finit": [472, 1046], "is_first_distinct": [473, 1047], "is_in": [474, 1048], "is_infinit": [475, 1049], "is_last_distinct": [476, 1050], "is_leap_year": [405, 979], "is_loc": 943, "is_nan": [477, 1051], "is_not_nan": [478, 1052], "is_not_nul": [479, 1053], "is_nul": [480, 1054], "is_regex_project": 540, "is_sort": 1055, "is_uniqu": [211, 481, 1056], "iso_year": [406, 980], "item": [212, 1057], "iter_column": 213, "iter_row": 214, "iter_slic": 215, "join": [216, 347, 503, 641, 818, 919, 1077, 1179, 1261], "join_asof": [217, 819], "json": 788, "json_decod": [642, 1180], "json_encod": [674, 1213], "json_norm": 126, "json_path_match": [643, 1181], "keep": 554, "kurtosi": [482, 1058], "lake": 788, "last": [294, 348, 483, 504, 733, 820, 867, 920, 1078, 1262], "lazi": [218, 821], "lazyfram": [42, 43, 44, 45, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885], "lazygroupbi": [862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "le": 484, "least": 1264, "left": 1267, "len": [295, 485, 505, 734, 868, 1059, 1079], "len_byt": [644, 1182], "len_char": [645, 1183], "length": 1267, "limit": [219, 486, 822, 1060, 1261], "list": [72, 161, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 776, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1247], "lit": 735, "ln": 1266, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [527, 1101, 1266], "log10": [528, 1102, 1266], "log1p": [529, 1103, 1266], "log2": 1266, "lower": 1267, "lower_bound": [530, 1104], "lt": 531, "ltrim": 1267, "manag": 168, "manipul": [312, 779, 887, 1249], "map": 555, "map_batch": [532, 736, 823], "map_el": [533, 1105], "map_field": 556, "map_group": [296, 737, 869], "map_row": 220, "mapwithoutreturndtypewarn": 94, "math": 1266, "max": [221, 297, 349, 506, 534, 738, 824, 870, 921, 981, 1080, 1106, 1262], "max_horizont": [222, 739], "mean": [223, 298, 507, 535, 740, 825, 871, 982, 1081, 1107], "mean_horizont": [224, 741], "median": [225, 299, 350, 508, 536, 742, 826, 872, 922, 983, 1082, 1108, 1262], "melt": [226, 827], "merge_sort": [227, 828], "meta": [537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 777], "metadata": 888, "method": 1272, "microsecond": [407, 984], "millennium": [408, 985], "millisecond": [409, 986], "min": [228, 300, 351, 509, 549, 743, 829, 873, 923, 987, 1083, 1109, 1262], "min_horizont": [229, 744], "minut": [410, 988], "miscellan": [311, 778, 786, 886, 1248], "mod": [550, 1266], "mode": [551, 1110], "moduleupgraderequirederror": 95, "month": [411, 989], "month_end": [412, 990], "month_start": [413, 991], "mul": 552, "n_chunk": [230, 1111], "n_uniqu": [231, 301, 352, 510, 553, 745, 874, 924, 1084, 1112], "name": [554, 555, 556, 557, 558, 559, 560, 561, 562, 772, 780, 1113, 1273], "nan_max": [563, 1114], "nan_min": [564, 1115], "nanosecond": [414, 992], "ne": [541, 565], "ne_miss": 566, "neg": 567, "nest": 315, "new": 1, "new_from_index": 1116, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [568, 1117], "nth": 746, "null": 73, "null_count": [232, 569, 830, 1118], "nullif": 1264, "numer": [315, 781], "object": 74, "octet_length": 1267, "od": 788, "offset": 1261, "offset_bi": [415, 993], "ones": 747, "oper": [781, 891, 1273, 1274], "option": 168, "or_": 570, "order": 1261, "ordinal_dai": [416, 994], "other": 315, "outofboundserror": 98, "output": 788, "output_nam": 542, "over": 571, "pad_end": [646, 1184], "pad_start": [647, 1185], "panic": 316, "panicexcept": 99, "parallel": 786, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1275], "parquet": 788, "partition_bi": 233, "pct_chang": [572, 1119], "peak_max": [573, 1120], "peak_min": [574, 1121], "performancewarn": 101, "pi": 1266, "pipe": [234, 575, 831], "pivot": 235, "plot": [313, 1250], "plugin": 889, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1275], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 543, "pow": [576, 1266], "prefix": 557, "prefix_field": 558, "product": [236, 577, 1122], "profil": [832, 1275], "provid": 1, "pyarrow": 788, "python": [787, 1272], "qcut": [578, 1123], "quantil": [237, 302, 579, 748, 833, 875, 1124], "quarter": [417, 995], "queri": 1272, "radian": [580, 1269], "random": 786, "rank": [581, 1125], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [238, 582, 1126], "reduc": 749, "refer": 787, "regexp_lik": 1267, "regist": 1256, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1257, "register_lazyframe_namespac": 50, "register_mani": 1258, "register_series_namespac": 51, "registr": 1, "reinterpret": [583, 1127], "renam": [239, 834, 1128], "rename_field": [675, 1214], "repeat": 750, "repeat_bi": 584, "replac": [585, 648, 1129, 1186, 1267], "replace_al": [649, 1187], "replace_column": 240, "replace_mani": [650, 1188], "replace_strict": [586, 1130], "replace_time_zon": [418, 996], "reshap": [587, 1131], "restore_default": 4, "revers": [241, 353, 511, 588, 651, 835, 925, 1085, 1132, 1189, 1267], "right": 1267, "rle": [589, 1133], "rle_id": [590, 1134], "roll": [242, 591, 836], "rolling_corr": 751, "rolling_cov": 752, "rolling_map": [592, 1135], "rolling_max": [593, 1136], "rolling_max_bi": 594, "rolling_mean": [595, 1137], "rolling_mean_bi": 596, "rolling_median": [597, 1138], "rolling_median_bi": 598, "rolling_min": [599, 1139], "rolling_min_bi": 600, "rolling_quantil": [601, 1140], "rolling_quantile_bi": 602, "rolling_skew": [603, 1141], "rolling_std": [604, 1142], "rolling_std_bi": 605, "rolling_sum": [606, 1143], "rolling_sum_bi": 607, "rolling_var": [608, 1144], "rolling_var_bi": 609, "root_nam": 544, "round": [419, 610, 997, 1145, 1266], "round_sig_fig": [611, 1146], "row": [243, 244], "rows_by_kei": 245, "rowserror": 105, "rtrim": 1267, "sampl": [246, 512, 612, 1086, 1147], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1148, "schema": [247, 837, 890, 1215], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [613, 1149], "second": [420, 998], "select": [248, 312, 753, 779, 838, 887, 1249, 1261], "select_seq": [249, 839], "selector": 891, "seri": [163, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246], "serial": [250, 311, 545, 840, 886], "set": [891, 1150, 1273], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [513, 1087], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [514, 1088], "set_profil": 164, "set_random_se": 150, "set_sort": [251, 614, 841, 1151], "set_streaming_chunk_s": 14, "set_symmetric_differ": [515, 1089], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [516, 1090], "set_verbos": 29, "shape": [252, 1152], "shapeerror": 110, "shift": [253, 354, 517, 615, 842, 926, 1091, 1153], "show": 1274, "show_graph": 843, "show_vers": 151, "shrink_dtyp": [616, 1154], "shrink_to_fit": [254, 1155], "shuffl": [617, 1156], "sign": [618, 1157, 1266], "sin": [619, 1158, 1269], "sind": 1269, "sinh": [620, 1159], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [367, 938], "skew": [621, 1160], "slice": [255, 518, 622, 652, 844, 1092, 1161, 1190], "sort": [256, 355, 519, 623, 845, 927, 1093, 1162], "sort_bi": 624, "split": [653, 1191], "split_exact": [654, 1192], "splitn": [655, 1193], "sql": [257, 754, 846, 1261, 1265, 1271, 1272], "sql_expr": 755, "sqlcontext": [1254, 1255, 1256, 1257, 1258, 1259, 1260, 1272], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [625, 1163, 1266], "starts_with": [368, 656, 939, 1194, 1267], "state": [30, 168], "std": [258, 356, 520, 626, 756, 847, 928, 1094, 1164], "stddev": 1262, "str": [627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210], "strategi": 1275, "strftime": [421, 999, 1268], "string": [75, 315, 782, 1251, 1267], "stringcach": [46, 786], "stringcachemismatcherror": 111, "strip_char": [657, 1195], "strip_chars_end": [658, 1196], "strip_chars_start": [659, 1197], "strip_prefix": [660, 1198], "strip_suffix": [661, 1199], "strpo": 1267, "strptime": [662, 1200, 1267], "struct": [76, 673, 674, 675, 676, 757, 783, 1211, 1212, 1213, 1214, 1215, 1216, 1252], "structfieldnotfounderror": 112, "style": 314, "sub": 677, "substr": 1267, "suffix": 559, "suffix_field": 560, "sum": [259, 303, 357, 521, 678, 758, 848, 876, 929, 1095, 1217, 1262], "sum_horizont": [260, 759], "tabl": [1259, 1274], "tail": [261, 304, 522, 663, 679, 760, 849, 877, 1096, 1201, 1218], "tan": [680, 1219, 1269], "tand": 1269, "tanh": [681, 1220], "tempor": [315, 784, 1253, 1268], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1275], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 422, 761, 1000], "time_rang": [762, 763], "timestamp": [423, 1001, 1267], "to_arrai": [523, 1097], "to_arrow": [262, 1221], "to_dat": [664, 1202], "to_datetim": [665, 1203], "to_decim": [666, 1204], "to_dict": [263, 264], "to_dummi": [265, 1222], "to_fram": 1223, "to_init_repr": [266, 1224], "to_integ": [667, 1205], "to_jax": [267, 1225], "to_list": [358, 930, 1226], "to_loc": 944, "to_lowercas": [561, 668, 1206], "to_numpi": [268, 1227], "to_panda": [269, 1228], "to_phys": [682, 1229], "to_seri": 270, "to_str": [424, 1002], "to_struct": [271, 359, 524, 931, 1098], "to_tim": [669, 1207], "to_titlecas": [670, 1208], "to_torch": [272, 1230], "to_uppercas": [562, 671, 1209], "toomanyrowsreturnederror": 113, "top_k": [273, 683, 850, 1231], "top_k_bi": 684, "total_dai": [425, 1003], "total_hour": [426, 1004], "total_microsecond": [427, 1005], "total_millisecond": [428, 1006], "total_minut": [429, 1007], "total_nanosecond": [430, 1008], "total_second": [431, 1009], "transpos": 274, "tree_format": 546, "trigonometri": 1269, "truediv": 685, "truncat": [432, 1010, 1274], "try_cast": 1270, "type": [315, 1270], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 547, "union": 1273, "uniqu": [275, 360, 525, 686, 851, 932, 1099, 1232], "unique_count": [687, 1233], "unknown": 82, "unnest": [276, 852, 1216, 1263, 1274], "unpivot": [277, 853], "unregist": 1260, "unstablewarn": 114, "unstack": 278, "unsuitablesqlerror": 115, "updat": [279, 854], "upper": 1267, "upper_bound": [688, 1234], "upsampl": 280, "us": 168, "uses_lexical_ord": 945, "using_string_cach": 167, "utf8": 83, "value_count": [689, 1235], "var": [281, 361, 526, 690, 764, 855, 933, 1100, 1236], "varianc": 1262, "vstack": 282, "warn": 316, "week": [433, 1011], "weekdai": [434, 1012], "when": 765, "where": [691, 1261], "width": [283, 856], "window": 785, "with_column": [284, 857], "with_columns_seq": [285, 858], "with_context": 859, "with_field": 676, "with_row_count": [286, 860], "with_row_index": [287, 861], "with_time_unit": [435, 1013], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 548], "write_ndjson": 40, "write_parquet": 41, "xor": 692, "year": [436, 1014], "zero": 766, "zfill": [672, 1210], "zip_with": 1237}})